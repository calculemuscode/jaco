{
  "errors": [],
  "warnings": [
    "asset size limit: The following asset(s) exceed the recommended size limit (244 KiB).\nThis can impact web performance.\nAssets: \n  jaco.js (874 KiB)",
    "entrypoint size limit: The following entrypoint(s) combined asset size exceeds the recommended limit (244 KiB). This can impact web performance.\nEntrypoints:\n  main (874 KiB)\n      jaco.js\n",
    "webpack performance recommendations: \nYou can limit the size of your bundles by using import() or require.ensure to lazy load some parts of your application.\nFor more info visit https://webpack.js.org/guides/code-splitting/"
  ],
  "version": "4.8.3",
  "hash": "134fe8fac24eeffcd208",
  "time": 4337,
  "builtAt": 1531856984911,
  "publicPath": "",
  "outputPath": "/Users/robs/r/jaco/demo",
  "assetsByChunkName": {
    "main": "jaco.js"
  },
  "assets": [
    {
      "name": "lib/demo/demo.d.ts",
      "size": 79,
      "chunks": [],
      "chunkNames": [],
      "emitted": true
    },
    {
      "name": "jaco.js",
      "size": 894964,
      "chunks": [
        0
      ],
      "chunkNames": [
        "main"
      ],
      "emitted": true,
      "isOverSizeLimit": true
    },
    {
      "name": "lib/index.d.ts",
      "size": 166,
      "chunks": [],
      "chunkNames": [],
      "emitted": true
    },
    {
      "name": "lib/lang.d.ts",
      "size": 221,
      "chunks": [],
      "chunkNames": [],
      "emitted": true
    },
    {
      "name": "lib/lex.d.ts",
      "size": 696,
      "chunks": [],
      "chunkNames": [],
      "emitted": true
    },
    {
      "name": "lib/parse.d.ts",
      "size": 491,
      "chunks": [],
      "chunkNames": [],
      "emitted": true
    },
    {
      "name": "lib/parsedsyntax.d.ts",
      "size": 7101,
      "chunks": [],
      "chunkNames": [],
      "emitted": true
    },
    {
      "name": "lib/parser-util.d.ts",
      "size": 7612,
      "chunks": [],
      "chunkNames": [],
      "emitted": true
    },
    {
      "name": "lib/restrictsyntax.d.ts",
      "size": 761,
      "chunks": [],
      "chunkNames": [],
      "emitted": true
    },
    {
      "name": "lib/scratch.d.ts",
      "size": 11,
      "chunks": [],
      "chunkNames": [],
      "emitted": true
    },
    {
      "name": "lib/ast.d.ts",
      "size": 11230,
      "chunks": [],
      "chunkNames": [],
      "emitted": true
    },
    {
      "name": "lib/test/parsespec.d.ts",
      "size": 549,
      "chunks": [],
      "chunkNames": [],
      "emitted": true
    },
    {
      "name": "lib/test/parsespec_test.d.ts",
      "size": 16,
      "chunks": [],
      "chunkNames": [],
      "emitted": true
    },
    {
      "name": "lib/test/suite_test.d.ts",
      "size": 16,
      "chunks": [],
      "chunkNames": [],
      "emitted": true
    },
    {
      "name": "lib/typecheck/error.d.ts",
      "size": 63,
      "chunks": [],
      "chunkNames": [],
      "emitted": true
    },
    {
      "name": "lib/typecheck/expressions.d.ts",
      "size": 676,
      "chunks": [],
      "chunkNames": [],
      "emitted": true
    },
    {
      "name": "lib/typecheck/flow.d.ts",
      "size": 1697,
      "chunks": [],
      "chunkNames": [],
      "emitted": true
    },
    {
      "name": "lib/typecheck/globalenv.d.ts",
      "size": 1163,
      "chunks": [],
      "chunkNames": [],
      "emitted": true
    },
    {
      "name": "lib/typecheck/programs.d.ts",
      "size": 168,
      "chunks": [],
      "chunkNames": [],
      "emitted": true
    },
    {
      "name": "lib/typecheck/statements.d.ts",
      "size": 245,
      "chunks": [],
      "chunkNames": [],
      "emitted": true
    },
    {
      "name": "lib/typecheck/types.d.ts",
      "size": 2382,
      "chunks": [],
      "chunkNames": [],
      "emitted": true
    }
  ],
  "filteredAssets": 0,
  "entrypoints": {
    "main": {
      "chunks": [
        0
      ],
      "assets": [
        "jaco.js"
      ],
      "children": {},
      "childAssets": {},
      "isOverSizeLimit": true
    }
  },
  "namedChunkGroups": {
    "main": {
      "chunks": [
        0
      ],
      "assets": [
        "jaco.js"
      ],
      "children": {},
      "childAssets": {},
      "isOverSizeLimit": true
    }
  },
  "chunks": [
    {
      "id": 0,
      "rendered": true,
      "initial": true,
      "entry": true,
      "size": 336705,
      "names": [
        "main"
      ],
      "files": [
        "jaco.js"
      ],
      "hash": "a1161bcc7e1f478a6aca",
      "siblings": [],
      "parents": [],
      "children": [],
      "childrenByOrder": {},
      "modules": [
        {
          "id": 0,
          "identifier": "/Users/robs/r/jaco/node_modules/@calculemus/impossible/lib/index.js",
          "name": "./node_modules/@calculemus/impossible/lib/index.js",
          "index": 5,
          "index2": 2,
          "size": 217,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "issuerId": 12,
          "issuerName": "./src/typecheck/programs.ts",
          "issuerPath": [
            {
              "id": 19,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "name": "./src/demo/demo.ts",
              "profile": {
                "factory": 64,
                "building": 1924
              }
            },
            {
              "id": 12,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
              "name": "./src/typecheck/programs.ts",
              "profile": {
                "factory": 288,
                "building": 665,
                "dependencies": 114
              }
            }
          ],
          "profile": {
            "factory": 703,
            "building": 8,
            "dependencies": 347
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": 3,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/types.ts",
              "module": "./src/typecheck/types.ts",
              "moduleName": "./src/typecheck/types.ts",
              "type": "cjs require",
              "userRequest": "@calculemus/impossible",
              "loc": "3:21-54"
            },
            {
              "moduleId": 5,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/expressions.ts",
              "module": "./src/typecheck/expressions.ts",
              "moduleName": "./src/typecheck/expressions.ts",
              "type": "cjs require",
              "userRequest": "@calculemus/impossible",
              "loc": "3:21-54"
            },
            {
              "moduleId": 7,
              "moduleIdentifier": "/Users/robs/r/jaco/lib/lex.js",
              "module": "./lib/lex.js",
              "moduleName": "./lib/lex.js",
              "type": "cjs require",
              "userRequest": "../node_modules/@calculemus/impossible",
              "loc": "5:21-70"
            },
            {
              "moduleId": 10,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/flow.ts",
              "module": "./src/typecheck/flow.ts",
              "moduleName": "./src/typecheck/flow.ts",
              "type": "cjs require",
              "userRequest": "@calculemus/impossible",
              "loc": "3:21-54"
            },
            {
              "moduleId": 11,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/statements.ts",
              "module": "./src/typecheck/statements.ts",
              "moduleName": "./src/typecheck/statements.ts",
              "type": "cjs require",
              "userRequest": "@calculemus/impossible",
              "loc": "3:21-54"
            },
            {
              "moduleId": 12,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
              "module": "./src/typecheck/programs.ts",
              "moduleName": "./src/typecheck/programs.ts",
              "type": "cjs require",
              "userRequest": "@calculemus/impossible",
              "loc": "3:21-54"
            },
            {
              "moduleId": 15,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/restrictsyntax.ts",
              "module": "./src/restrictsyntax.ts",
              "moduleName": "./src/restrictsyntax.ts",
              "type": "cjs require",
              "userRequest": "@calculemus/impossible",
              "loc": "3:21-54"
            },
            {
              "moduleId": 17,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/lex.ts",
              "module": "./src/lex.ts",
              "moduleName": "./src/lex.ts",
              "type": "cjs require",
              "userRequest": "../node_modules/@calculemus/impossible",
              "loc": "5:21-70"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [
            "ModuleConcatenation bailout: Module is not an ECMAScript module"
          ],
          "depth": 2,
          "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction impossible(x) {\n    throw new Error(\"Impossible '\" + x + \"'\");\n}\nexports.impossible = impossible;\n//# sourceMappingURL=index.js.map"
        },
        {
          "id": 1,
          "identifier": "/Users/robs/r/jaco/node_modules/immutable/dist/immutable.es.js",
          "name": "./node_modules/immutable/dist/immutable.es.js",
          "index": 2,
          "index2": 0,
          "size": 153841,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "issuerId": 19,
          "issuerName": "./src/demo/demo.ts",
          "issuerPath": [
            {
              "id": 19,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "name": "./src/demo/demo.ts",
              "profile": {
                "factory": 64,
                "building": 1924
              }
            }
          ],
          "profile": {
            "factory": 288,
            "building": 665,
            "dependencies": 114
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": 4,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/globalenv.ts",
              "module": "./src/typecheck/globalenv.ts",
              "moduleName": "./src/typecheck/globalenv.ts",
              "type": "cjs require",
              "userRequest": "immutable",
              "loc": "3:20-40"
            },
            {
              "moduleId": 7,
              "moduleIdentifier": "/Users/robs/r/jaco/lib/lex.js",
              "module": "./lib/lex.js",
              "moduleName": "./lib/lex.js",
              "type": "cjs require",
              "userRequest": "immutable",
              "loc": "4:20-40"
            },
            {
              "moduleId": 10,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/flow.ts",
              "module": "./src/typecheck/flow.ts",
              "moduleName": "./src/typecheck/flow.ts",
              "type": "cjs require",
              "userRequest": "immutable",
              "loc": "4:20-40"
            },
            {
              "moduleId": 12,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
              "module": "./src/typecheck/programs.ts",
              "moduleName": "./src/typecheck/programs.ts",
              "type": "cjs require",
              "userRequest": "immutable",
              "loc": "4:20-40"
            },
            {
              "moduleId": 17,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/lex.ts",
              "module": "./src/lex.ts",
              "moduleName": "./src/lex.ts",
              "type": "cjs require",
              "userRequest": "immutable",
              "loc": "4:20-40"
            },
            {
              "moduleId": 18,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
              "module": "./src/parse.ts",
              "moduleName": "./src/parse.ts",
              "type": "cjs require",
              "userRequest": "immutable",
              "loc": "3:20-40"
            },
            {
              "moduleId": 19,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "module": "./src/demo/demo.ts",
              "moduleName": "./src/demo/demo.ts",
              "type": "cjs require",
              "userRequest": "../../node_modules/immutable",
              "loc": "6:20-59"
            }
          ],
          "usedExports": true,
          "providedExports": [
            "version",
            "Collection",
            "Iterable",
            "Seq",
            "Map",
            "OrderedMap",
            "List",
            "Stack",
            "Set",
            "OrderedSet",
            "Record",
            "Range",
            "Repeat",
            "is",
            "fromJS",
            "hash",
            "isImmutable",
            "isCollection",
            "isKeyed",
            "isIndexed",
            "isAssociative",
            "isOrdered",
            "isValueObject",
            "get",
            "getIn",
            "has",
            "hasIn",
            "merge",
            "mergeDeep",
            "mergeWith",
            "mergeDeepWith",
            "remove",
            "removeIn",
            "set",
            "setIn",
            "update",
            "updateIn",
            "default"
          ],
          "optimizationBailout": [
            "ModuleConcatenation bailout: Module is referenced from these modules with unsupported syntax: ./lib/lex.js (referenced with cjs require), ./src/demo/demo.ts (referenced with cjs require), ./src/lex.ts (referenced with cjs require), ./src/parse.ts (referenced with cjs require), ./src/typecheck/flow.ts (referenced with cjs require), ./src/typecheck/globalenv.ts (referenced with cjs require), ./src/typecheck/programs.ts (referenced with cjs require)"
          ],
          "depth": 1,
          "source": "/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// Used for setting prototype methods that IE8 chokes on.\nvar DELETE = 'delete';\n\n// Constants describing the size of trie nodes.\nvar SHIFT = 5; // Resulted in best performance after ______?\nvar SIZE = 1 << SHIFT;\nvar MASK = SIZE - 1;\n\n// A consistent shared value representing \"not set\" which equals nothing other\n// than itself, and nothing that could be provided externally.\nvar NOT_SET = {};\n\n// Boolean references, Rough equivalent of `bool &`.\nvar CHANGE_LENGTH = { value: false };\nvar DID_ALTER = { value: false };\n\nfunction MakeRef(ref) {\n  ref.value = false;\n  return ref;\n}\n\nfunction SetRef(ref) {\n  ref && (ref.value = true);\n}\n\n// A function which returns a value representing an \"owner\" for transient writes\n// to tries. The return value will only ever equal itself, and will not equal\n// the return of any subsequent call of this function.\nfunction OwnerID() {}\n\nfunction ensureSize(iter) {\n  if (iter.size === undefined) {\n    iter.size = iter.__iterate(returnTrue);\n  }\n  return iter.size;\n}\n\nfunction wrapIndex(iter, index) {\n  // This implements \"is array index\" which the ECMAString spec defines as:\n  //\n  //     A String property name P is an array index if and only if\n  //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n  //     to 2^32−1.\n  //\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n  if (typeof index !== 'number') {\n    var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n    if ('' + uint32Index !== index || uint32Index === 4294967295) {\n      return NaN;\n    }\n    index = uint32Index;\n  }\n  return index < 0 ? ensureSize(iter) + index : index;\n}\n\nfunction returnTrue() {\n  return true;\n}\n\nfunction wholeSlice(begin, end, size) {\n  return (\n    ((begin === 0 && !isNeg(begin)) ||\n      (size !== undefined && begin <= -size)) &&\n    (end === undefined || (size !== undefined && end >= size))\n  );\n}\n\nfunction resolveBegin(begin, size) {\n  return resolveIndex(begin, size, 0);\n}\n\nfunction resolveEnd(end, size) {\n  return resolveIndex(end, size, size);\n}\n\nfunction resolveIndex(index, size, defaultIndex) {\n  // Sanitize indices using this shorthand for ToInt32(argument)\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n  return index === undefined\n    ? defaultIndex\n    : isNeg(index)\n      ? size === Infinity ? size : Math.max(0, size + index) | 0\n      : size === undefined || size === index\n        ? index\n        : Math.min(size, index) | 0;\n}\n\nfunction isNeg(value) {\n  // Account for -0 which is negative, but not less than 0.\n  return value < 0 || (value === 0 && 1 / value === -Infinity);\n}\n\nfunction isImmutable(maybeImmutable) {\n  return isCollection(maybeImmutable) || isRecord(maybeImmutable);\n}\n\nfunction isCollection(maybeCollection) {\n  return !!(maybeCollection && maybeCollection[IS_ITERABLE_SENTINEL]);\n}\n\nfunction isKeyed(maybeKeyed) {\n  return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n}\n\nfunction isIndexed(maybeIndexed) {\n  return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n}\n\nfunction isAssociative(maybeAssociative) {\n  return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n}\n\nfunction isOrdered(maybeOrdered) {\n  return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n}\n\nfunction isRecord(maybeRecord) {\n  return !!(maybeRecord && maybeRecord[IS_RECORD_SENTINEL]);\n}\n\nfunction isValueObject(maybeValue) {\n  return !!(\n    maybeValue &&\n    typeof maybeValue.equals === 'function' &&\n    typeof maybeValue.hashCode === 'function'\n  );\n}\n\nvar IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\nvar IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\nvar IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\nvar IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\nvar IS_RECORD_SENTINEL = '@@__IMMUTABLE_RECORD__@@';\n\nvar Collection = function Collection(value) {\n  return isCollection(value) ? value : Seq(value);\n};\n\nvar KeyedCollection = (function (Collection) {\n  function KeyedCollection(value) {\n    return isKeyed(value) ? value : KeyedSeq(value);\n  }\n\n  if ( Collection ) KeyedCollection.__proto__ = Collection;\n  KeyedCollection.prototype = Object.create( Collection && Collection.prototype );\n  KeyedCollection.prototype.constructor = KeyedCollection;\n\n  return KeyedCollection;\n}(Collection));\n\nvar IndexedCollection = (function (Collection) {\n  function IndexedCollection(value) {\n    return isIndexed(value) ? value : IndexedSeq(value);\n  }\n\n  if ( Collection ) IndexedCollection.__proto__ = Collection;\n  IndexedCollection.prototype = Object.create( Collection && Collection.prototype );\n  IndexedCollection.prototype.constructor = IndexedCollection;\n\n  return IndexedCollection;\n}(Collection));\n\nvar SetCollection = (function (Collection) {\n  function SetCollection(value) {\n    return isCollection(value) && !isAssociative(value) ? value : SetSeq(value);\n  }\n\n  if ( Collection ) SetCollection.__proto__ = Collection;\n  SetCollection.prototype = Object.create( Collection && Collection.prototype );\n  SetCollection.prototype.constructor = SetCollection;\n\n  return SetCollection;\n}(Collection));\n\nCollection.Keyed = KeyedCollection;\nCollection.Indexed = IndexedCollection;\nCollection.Set = SetCollection;\n\nvar ITERATE_KEYS = 0;\nvar ITERATE_VALUES = 1;\nvar ITERATE_ENTRIES = 2;\n\nvar REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nvar ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\nvar Iterator = function Iterator(next) {\n  this.next = next;\n};\n\nIterator.prototype.toString = function toString () {\n  return '[Iterator]';\n};\n\nIterator.KEYS = ITERATE_KEYS;\nIterator.VALUES = ITERATE_VALUES;\nIterator.ENTRIES = ITERATE_ENTRIES;\n\nIterator.prototype.inspect = Iterator.prototype.toSource = function() {\n  return this.toString();\n};\nIterator.prototype[ITERATOR_SYMBOL] = function() {\n  return this;\n};\n\nfunction iteratorValue(type, k, v, iteratorResult) {\n  var value = type === 0 ? k : type === 1 ? v : [k, v];\n  iteratorResult\n    ? (iteratorResult.value = value)\n    : (iteratorResult = {\n        value: value,\n        done: false\n      });\n  return iteratorResult;\n}\n\nfunction iteratorDone() {\n  return { value: undefined, done: true };\n}\n\nfunction hasIterator(maybeIterable) {\n  return !!getIteratorFn(maybeIterable);\n}\n\nfunction isIterator(maybeIterator) {\n  return maybeIterator && typeof maybeIterator.next === 'function';\n}\n\nfunction getIterator(iterable) {\n  var iteratorFn = getIteratorFn(iterable);\n  return iteratorFn && iteratorFn.call(iterable);\n}\n\nfunction getIteratorFn(iterable) {\n  var iteratorFn =\n    iterable &&\n    ((REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]);\n  if (typeof iteratorFn === 'function') {\n    return iteratorFn;\n  }\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isArrayLike(value) {\n  return value && typeof value.length === 'number';\n}\n\nvar Seq = (function (Collection$$1) {\n  function Seq(value) {\n    return value === null || value === undefined\n      ? emptySequence()\n      : isImmutable(value) ? value.toSeq() : seqFromValue(value);\n  }\n\n  if ( Collection$$1 ) Seq.__proto__ = Collection$$1;\n  Seq.prototype = Object.create( Collection$$1 && Collection$$1.prototype );\n  Seq.prototype.constructor = Seq;\n\n  Seq.prototype.toSeq = function toSeq () {\n    return this;\n  };\n\n  Seq.prototype.toString = function toString () {\n    return this.__toString('Seq {', '}');\n  };\n\n  Seq.prototype.cacheResult = function cacheResult () {\n    if (!this._cache && this.__iterateUncached) {\n      this._cache = this.entrySeq().toArray();\n      this.size = this._cache.length;\n    }\n    return this;\n  };\n\n  // abstract __iterateUncached(fn, reverse)\n\n  Seq.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var cache = this._cache;\n    if (cache) {\n      var size = cache.length;\n      var i = 0;\n      while (i !== size) {\n        var entry = cache[reverse ? size - ++i : i++];\n        if (fn(entry[1], entry[0], this$1) === false) {\n          break;\n        }\n      }\n      return i;\n    }\n    return this.__iterateUncached(fn, reverse);\n  };\n\n  // abstract __iteratorUncached(type, reverse)\n\n  Seq.prototype.__iterator = function __iterator (type, reverse) {\n    var cache = this._cache;\n    if (cache) {\n      var size = cache.length;\n      var i = 0;\n      return new Iterator(function () {\n        if (i === size) {\n          return iteratorDone();\n        }\n        var entry = cache[reverse ? size - ++i : i++];\n        return iteratorValue(type, entry[0], entry[1]);\n      });\n    }\n    return this.__iteratorUncached(type, reverse);\n  };\n\n  return Seq;\n}(Collection));\n\nvar KeyedSeq = (function (Seq) {\n  function KeyedSeq(value) {\n    return value === null || value === undefined\n      ? emptySequence().toKeyedSeq()\n      : isCollection(value)\n        ? isKeyed(value) ? value.toSeq() : value.fromEntrySeq()\n        : isRecord(value) ? value.toSeq() : keyedSeqFromValue(value);\n  }\n\n  if ( Seq ) KeyedSeq.__proto__ = Seq;\n  KeyedSeq.prototype = Object.create( Seq && Seq.prototype );\n  KeyedSeq.prototype.constructor = KeyedSeq;\n\n  KeyedSeq.prototype.toKeyedSeq = function toKeyedSeq () {\n    return this;\n  };\n\n  return KeyedSeq;\n}(Seq));\n\nvar IndexedSeq = (function (Seq) {\n  function IndexedSeq(value) {\n    return value === null || value === undefined\n      ? emptySequence()\n      : isCollection(value)\n        ? isKeyed(value) ? value.entrySeq() : value.toIndexedSeq()\n        : isRecord(value)\n          ? value.toSeq().entrySeq()\n          : indexedSeqFromValue(value);\n  }\n\n  if ( Seq ) IndexedSeq.__proto__ = Seq;\n  IndexedSeq.prototype = Object.create( Seq && Seq.prototype );\n  IndexedSeq.prototype.constructor = IndexedSeq;\n\n  IndexedSeq.of = function of (/*...values*/) {\n    return IndexedSeq(arguments);\n  };\n\n  IndexedSeq.prototype.toIndexedSeq = function toIndexedSeq () {\n    return this;\n  };\n\n  IndexedSeq.prototype.toString = function toString () {\n    return this.__toString('Seq [', ']');\n  };\n\n  return IndexedSeq;\n}(Seq));\n\nvar SetSeq = (function (Seq) {\n  function SetSeq(value) {\n    return (isCollection(value) && !isAssociative(value)\n      ? value\n      : IndexedSeq(value)\n    ).toSetSeq();\n  }\n\n  if ( Seq ) SetSeq.__proto__ = Seq;\n  SetSeq.prototype = Object.create( Seq && Seq.prototype );\n  SetSeq.prototype.constructor = SetSeq;\n\n  SetSeq.of = function of (/*...values*/) {\n    return SetSeq(arguments);\n  };\n\n  SetSeq.prototype.toSetSeq = function toSetSeq () {\n    return this;\n  };\n\n  return SetSeq;\n}(Seq));\n\nSeq.isSeq = isSeq;\nSeq.Keyed = KeyedSeq;\nSeq.Set = SetSeq;\nSeq.Indexed = IndexedSeq;\n\nvar IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\nSeq.prototype[IS_SEQ_SENTINEL] = true;\n\n// #pragma Root Sequences\n\nvar ArraySeq = (function (IndexedSeq) {\n  function ArraySeq(array) {\n    this._array = array;\n    this.size = array.length;\n  }\n\n  if ( IndexedSeq ) ArraySeq.__proto__ = IndexedSeq;\n  ArraySeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  ArraySeq.prototype.constructor = ArraySeq;\n\n  ArraySeq.prototype.get = function get (index, notSetValue) {\n    return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n  };\n\n  ArraySeq.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var array = this._array;\n    var size = array.length;\n    var i = 0;\n    while (i !== size) {\n      var ii = reverse ? size - ++i : i++;\n      if (fn(array[ii], ii, this$1) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  ArraySeq.prototype.__iterator = function __iterator (type, reverse) {\n    var array = this._array;\n    var size = array.length;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var ii = reverse ? size - ++i : i++;\n      return iteratorValue(type, ii, array[ii]);\n    });\n  };\n\n  return ArraySeq;\n}(IndexedSeq));\n\nvar ObjectSeq = (function (KeyedSeq) {\n  function ObjectSeq(object) {\n    var keys = Object.keys(object);\n    this._object = object;\n    this._keys = keys;\n    this.size = keys.length;\n  }\n\n  if ( KeyedSeq ) ObjectSeq.__proto__ = KeyedSeq;\n  ObjectSeq.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );\n  ObjectSeq.prototype.constructor = ObjectSeq;\n\n  ObjectSeq.prototype.get = function get (key, notSetValue) {\n    if (notSetValue !== undefined && !this.has(key)) {\n      return notSetValue;\n    }\n    return this._object[key];\n  };\n\n  ObjectSeq.prototype.has = function has (key) {\n    return hasOwnProperty.call(this._object, key);\n  };\n\n  ObjectSeq.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var object = this._object;\n    var keys = this._keys;\n    var size = keys.length;\n    var i = 0;\n    while (i !== size) {\n      var key = keys[reverse ? size - ++i : i++];\n      if (fn(object[key], key, this$1) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  ObjectSeq.prototype.__iterator = function __iterator (type, reverse) {\n    var object = this._object;\n    var keys = this._keys;\n    var size = keys.length;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var key = keys[reverse ? size - ++i : i++];\n      return iteratorValue(type, key, object[key]);\n    });\n  };\n\n  return ObjectSeq;\n}(KeyedSeq));\nObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\nvar CollectionSeq = (function (IndexedSeq) {\n  function CollectionSeq(collection) {\n    this._collection = collection;\n    this.size = collection.length || collection.size;\n  }\n\n  if ( IndexedSeq ) CollectionSeq.__proto__ = IndexedSeq;\n  CollectionSeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  CollectionSeq.prototype.constructor = CollectionSeq;\n\n  CollectionSeq.prototype.__iterateUncached = function __iterateUncached (fn, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var collection = this._collection;\n    var iterator = getIterator(collection);\n    var iterations = 0;\n    if (isIterator(iterator)) {\n      var step;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this$1) === false) {\n          break;\n        }\n      }\n    }\n    return iterations;\n  };\n\n  CollectionSeq.prototype.__iteratorUncached = function __iteratorUncached (type, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var collection = this._collection;\n    var iterator = getIterator(collection);\n    if (!isIterator(iterator)) {\n      return new Iterator(iteratorDone);\n    }\n    var iterations = 0;\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done ? step : iteratorValue(type, iterations++, step.value);\n    });\n  };\n\n  return CollectionSeq;\n}(IndexedSeq));\n\nvar IteratorSeq = (function (IndexedSeq) {\n  function IteratorSeq(iterator) {\n    this._iterator = iterator;\n    this._iteratorCache = [];\n  }\n\n  if ( IndexedSeq ) IteratorSeq.__proto__ = IndexedSeq;\n  IteratorSeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  IteratorSeq.prototype.constructor = IteratorSeq;\n\n  IteratorSeq.prototype.__iterateUncached = function __iterateUncached (fn, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var iterator = this._iterator;\n    var cache = this._iteratorCache;\n    var iterations = 0;\n    while (iterations < cache.length) {\n      if (fn(cache[iterations], iterations++, this$1) === false) {\n        return iterations;\n      }\n    }\n    var step;\n    while (!(step = iterator.next()).done) {\n      var val = step.value;\n      cache[iterations] = val;\n      if (fn(val, iterations++, this$1) === false) {\n        break;\n      }\n    }\n    return iterations;\n  };\n\n  IteratorSeq.prototype.__iteratorUncached = function __iteratorUncached (type, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = this._iterator;\n    var cache = this._iteratorCache;\n    var iterations = 0;\n    return new Iterator(function () {\n      if (iterations >= cache.length) {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        cache[iterations] = step.value;\n      }\n      return iteratorValue(type, iterations, cache[iterations++]);\n    });\n  };\n\n  return IteratorSeq;\n}(IndexedSeq));\n\n// # pragma Helper functions\n\nfunction isSeq(maybeSeq) {\n  return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n}\n\nvar EMPTY_SEQ;\n\nfunction emptySequence() {\n  return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n}\n\nfunction keyedSeqFromValue(value) {\n  var seq = Array.isArray(value)\n    ? new ArraySeq(value)\n    : isIterator(value)\n      ? new IteratorSeq(value)\n      : hasIterator(value) ? new CollectionSeq(value) : undefined;\n  if (seq) {\n    return seq.fromEntrySeq();\n  }\n  if (typeof value === 'object') {\n    return new ObjectSeq(value);\n  }\n  throw new TypeError(\n    'Expected Array or collection object of [k, v] entries, or keyed object: ' +\n      value\n  );\n}\n\nfunction indexedSeqFromValue(value) {\n  var seq = maybeIndexedSeqFromValue(value);\n  if (seq) {\n    return seq;\n  }\n  throw new TypeError(\n    'Expected Array or collection object of values: ' + value\n  );\n}\n\nfunction seqFromValue(value) {\n  var seq = maybeIndexedSeqFromValue(value);\n  if (seq) {\n    return seq;\n  }\n  if (typeof value === 'object') {\n    return new ObjectSeq(value);\n  }\n  throw new TypeError(\n    'Expected Array or collection object of values, or keyed object: ' + value\n  );\n}\n\nfunction maybeIndexedSeqFromValue(value) {\n  return isArrayLike(value)\n    ? new ArraySeq(value)\n    : isIterator(value)\n      ? new IteratorSeq(value)\n      : hasIterator(value) ? new CollectionSeq(value) : undefined;\n}\n\n/**\n * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n *\n * NaN is considered the same as NaN, however -0 and 0 are considered the same\n * value, which is different from the algorithm described by\n * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n *\n * This is extended further to allow Objects to describe the values they\n * represent, by way of `valueOf` or `equals` (and `hashCode`).\n *\n * Note: because of this extension, the key equality of Immutable.Map and the\n * value equality of Immutable.Set will differ from ES6 Map and Set.\n *\n * ### Defining custom values\n *\n * The easiest way to describe the value an object represents is by implementing\n * `valueOf`. For example, `Date` represents a value by returning a unix\n * timestamp for `valueOf`:\n *\n *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n *     var date2 = new Date(1234567890000);\n *     date1.valueOf(); // 1234567890000\n *     assert( date1 !== date2 );\n *     assert( Immutable.is( date1, date2 ) );\n *\n * Note: overriding `valueOf` may have other implications if you use this object\n * where JavaScript expects a primitive, such as implicit string coercion.\n *\n * For more complex types, especially collections, implementing `valueOf` may\n * not be performant. An alternative is to implement `equals` and `hashCode`.\n *\n * `equals` takes another object, presumably of similar type, and returns true\n * if it is equal. Equality is symmetrical, so the same result should be\n * returned if this and the argument are flipped.\n *\n *     assert( a.equals(b) === b.equals(a) );\n *\n * `hashCode` returns a 32bit integer number representing the object which will\n * be used to determine how to store the value object in a Map or Set. You must\n * provide both or neither methods, one must not exist without the other.\n *\n * Also, an important relationship between these methods must be upheld: if two\n * values are equal, they *must* return the same hashCode. If the values are not\n * equal, they might have the same hashCode; this is called a hash collision,\n * and while undesirable for performance reasons, it is acceptable.\n *\n *     if (a.equals(b)) {\n *       assert( a.hashCode() === b.hashCode() );\n *     }\n *\n * All Immutable collections are Value Objects: they implement `equals()`\n * and `hashCode()`.\n */\nfunction is(valueA, valueB) {\n  if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n    return true;\n  }\n  if (!valueA || !valueB) {\n    return false;\n  }\n  if (\n    typeof valueA.valueOf === 'function' &&\n    typeof valueB.valueOf === 'function'\n  ) {\n    valueA = valueA.valueOf();\n    valueB = valueB.valueOf();\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n  }\n  return !!(\n    isValueObject(valueA) &&\n    isValueObject(valueB) &&\n    valueA.equals(valueB)\n  );\n}\n\nvar imul =\n  typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2\n    ? Math.imul\n    : function imul(a, b) {\n        a |= 0; // int\n        b |= 0; // int\n        var c = a & 0xffff;\n        var d = b & 0xffff;\n        // Shift by 0 fixes the sign on the high part.\n        return (c * d + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0)) | 0; // int\n      };\n\n// v8 has an optimization for storing 31-bit signed numbers.\n// Values which have either 00 or 11 as the high order bits qualify.\n// This function drops the highest order bit in a signed number, maintaining\n// the sign bit.\nfunction smi(i32) {\n  return ((i32 >>> 1) & 0x40000000) | (i32 & 0xbfffffff);\n}\n\nfunction hash(o) {\n  if (o === false || o === null || o === undefined) {\n    return 0;\n  }\n  if (typeof o.valueOf === 'function') {\n    o = o.valueOf();\n    if (o === false || o === null || o === undefined) {\n      return 0;\n    }\n  }\n  if (o === true) {\n    return 1;\n  }\n  var type = typeof o;\n  if (type === 'number') {\n    if (o !== o || o === Infinity) {\n      return 0;\n    }\n    var h = o | 0;\n    if (h !== o) {\n      h ^= o * 0xffffffff;\n    }\n    while (o > 0xffffffff) {\n      o /= 0xffffffff;\n      h ^= o;\n    }\n    return smi(h);\n  }\n  if (type === 'string') {\n    return o.length > STRING_HASH_CACHE_MIN_STRLEN\n      ? cachedHashString(o)\n      : hashString(o);\n  }\n  if (typeof o.hashCode === 'function') {\n    // Drop any high bits from accidentally long hash codes.\n    return smi(o.hashCode());\n  }\n  if (type === 'object') {\n    return hashJSObj(o);\n  }\n  if (typeof o.toString === 'function') {\n    return hashString(o.toString());\n  }\n  throw new Error('Value type ' + type + ' cannot be hashed.');\n}\n\nfunction cachedHashString(string) {\n  var hashed = stringHashCache[string];\n  if (hashed === undefined) {\n    hashed = hashString(string);\n    if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n      STRING_HASH_CACHE_SIZE = 0;\n      stringHashCache = {};\n    }\n    STRING_HASH_CACHE_SIZE++;\n    stringHashCache[string] = hashed;\n  }\n  return hashed;\n}\n\n// http://jsperf.com/hashing-strings\nfunction hashString(string) {\n  // This is the hash from JVM\n  // The hash code for a string is computed as\n  // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n  // where s[i] is the ith character of the string and n is the length of\n  // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n  // (exclusive) by dropping high bits.\n  var hashed = 0;\n  for (var ii = 0; ii < string.length; ii++) {\n    hashed = (31 * hashed + string.charCodeAt(ii)) | 0;\n  }\n  return smi(hashed);\n}\n\nfunction hashJSObj(obj) {\n  var hashed;\n  if (usingWeakMap) {\n    hashed = weakMap.get(obj);\n    if (hashed !== undefined) {\n      return hashed;\n    }\n  }\n\n  hashed = obj[UID_HASH_KEY];\n  if (hashed !== undefined) {\n    return hashed;\n  }\n\n  if (!canDefineProperty) {\n    hashed = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n    if (hashed !== undefined) {\n      return hashed;\n    }\n\n    hashed = getIENodeHash(obj);\n    if (hashed !== undefined) {\n      return hashed;\n    }\n  }\n\n  hashed = ++objHashUID;\n  if (objHashUID & 0x40000000) {\n    objHashUID = 0;\n  }\n\n  if (usingWeakMap) {\n    weakMap.set(obj, hashed);\n  } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n    throw new Error('Non-extensible objects are not allowed as keys.');\n  } else if (canDefineProperty) {\n    Object.defineProperty(obj, UID_HASH_KEY, {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: hashed\n    });\n  } else if (\n    obj.propertyIsEnumerable !== undefined &&\n    obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable\n  ) {\n    // Since we can't define a non-enumerable property on the object\n    // we'll hijack one of the less-used non-enumerable properties to\n    // save our hash on it. Since this is a function it will not show up in\n    // `JSON.stringify` which is what we want.\n    obj.propertyIsEnumerable = function() {\n      return this.constructor.prototype.propertyIsEnumerable.apply(\n        this,\n        arguments\n      );\n    };\n    obj.propertyIsEnumerable[UID_HASH_KEY] = hashed;\n  } else if (obj.nodeType !== undefined) {\n    // At this point we couldn't get the IE `uniqueID` to use as a hash\n    // and we couldn't use a non-enumerable property to exploit the\n    // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n    // itself.\n    obj[UID_HASH_KEY] = hashed;\n  } else {\n    throw new Error('Unable to set a non-enumerable property on object.');\n  }\n\n  return hashed;\n}\n\n// Get references to ES5 object methods.\nvar isExtensible = Object.isExtensible;\n\n// True if Object.defineProperty works as expected. IE8 fails this test.\nvar canDefineProperty = (function() {\n  try {\n    Object.defineProperty({}, '@', {});\n    return true;\n  } catch (e) {\n    return false;\n  }\n})();\n\n// IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n// and avoid memory leaks from the IE cloneNode bug.\nfunction getIENodeHash(node) {\n  if (node && node.nodeType > 0) {\n    switch (node.nodeType) {\n      case 1: // Element\n        return node.uniqueID;\n      case 9: // Document\n        return node.documentElement && node.documentElement.uniqueID;\n    }\n  }\n}\n\n// If possible, use a WeakMap.\nvar usingWeakMap = typeof WeakMap === 'function';\nvar weakMap;\nif (usingWeakMap) {\n  weakMap = new WeakMap();\n}\n\nvar objHashUID = 0;\n\nvar UID_HASH_KEY = '__immutablehash__';\nif (typeof Symbol === 'function') {\n  UID_HASH_KEY = Symbol(UID_HASH_KEY);\n}\n\nvar STRING_HASH_CACHE_MIN_STRLEN = 16;\nvar STRING_HASH_CACHE_MAX_SIZE = 255;\nvar STRING_HASH_CACHE_SIZE = 0;\nvar stringHashCache = {};\n\nvar ToKeyedSequence = (function (KeyedSeq$$1) {\n  function ToKeyedSequence(indexed, useKeys) {\n    this._iter = indexed;\n    this._useKeys = useKeys;\n    this.size = indexed.size;\n  }\n\n  if ( KeyedSeq$$1 ) ToKeyedSequence.__proto__ = KeyedSeq$$1;\n  ToKeyedSequence.prototype = Object.create( KeyedSeq$$1 && KeyedSeq$$1.prototype );\n  ToKeyedSequence.prototype.constructor = ToKeyedSequence;\n\n  ToKeyedSequence.prototype.get = function get (key, notSetValue) {\n    return this._iter.get(key, notSetValue);\n  };\n\n  ToKeyedSequence.prototype.has = function has (key) {\n    return this._iter.has(key);\n  };\n\n  ToKeyedSequence.prototype.valueSeq = function valueSeq () {\n    return this._iter.valueSeq();\n  };\n\n  ToKeyedSequence.prototype.reverse = function reverse () {\n    var this$1 = this;\n\n    var reversedSequence = reverseFactory(this, true);\n    if (!this._useKeys) {\n      reversedSequence.valueSeq = function () { return this$1._iter.toSeq().reverse(); };\n    }\n    return reversedSequence;\n  };\n\n  ToKeyedSequence.prototype.map = function map (mapper, context) {\n    var this$1 = this;\n\n    var mappedSequence = mapFactory(this, mapper, context);\n    if (!this._useKeys) {\n      mappedSequence.valueSeq = function () { return this$1._iter.toSeq().map(mapper, context); };\n    }\n    return mappedSequence;\n  };\n\n  ToKeyedSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    return this._iter.__iterate(function (v, k) { return fn(v, k, this$1); }, reverse);\n  };\n\n  ToKeyedSequence.prototype.__iterator = function __iterator (type, reverse) {\n    return this._iter.__iterator(type, reverse);\n  };\n\n  return ToKeyedSequence;\n}(KeyedSeq));\nToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\nvar ToIndexedSequence = (function (IndexedSeq$$1) {\n  function ToIndexedSequence(iter) {\n    this._iter = iter;\n    this.size = iter.size;\n  }\n\n  if ( IndexedSeq$$1 ) ToIndexedSequence.__proto__ = IndexedSeq$$1;\n  ToIndexedSequence.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );\n  ToIndexedSequence.prototype.constructor = ToIndexedSequence;\n\n  ToIndexedSequence.prototype.includes = function includes (value) {\n    return this._iter.includes(value);\n  };\n\n  ToIndexedSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var i = 0;\n    reverse && ensureSize(this);\n    return this._iter.__iterate(\n      function (v) { return fn(v, reverse ? this$1.size - ++i : i++, this$1); },\n      reverse\n    );\n  };\n\n  ToIndexedSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var this$1 = this;\n\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    var i = 0;\n    reverse && ensureSize(this);\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done\n        ? step\n        : iteratorValue(\n            type,\n            reverse ? this$1.size - ++i : i++,\n            step.value,\n            step\n          );\n    });\n  };\n\n  return ToIndexedSequence;\n}(IndexedSeq));\n\nvar ToSetSequence = (function (SetSeq$$1) {\n  function ToSetSequence(iter) {\n    this._iter = iter;\n    this.size = iter.size;\n  }\n\n  if ( SetSeq$$1 ) ToSetSequence.__proto__ = SetSeq$$1;\n  ToSetSequence.prototype = Object.create( SetSeq$$1 && SetSeq$$1.prototype );\n  ToSetSequence.prototype.constructor = ToSetSequence;\n\n  ToSetSequence.prototype.has = function has (key) {\n    return this._iter.includes(key);\n  };\n\n  ToSetSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    return this._iter.__iterate(function (v) { return fn(v, v, this$1); }, reverse);\n  };\n\n  ToSetSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done\n        ? step\n        : iteratorValue(type, step.value, step.value, step);\n    });\n  };\n\n  return ToSetSequence;\n}(SetSeq));\n\nvar FromEntriesSequence = (function (KeyedSeq$$1) {\n  function FromEntriesSequence(entries) {\n    this._iter = entries;\n    this.size = entries.size;\n  }\n\n  if ( KeyedSeq$$1 ) FromEntriesSequence.__proto__ = KeyedSeq$$1;\n  FromEntriesSequence.prototype = Object.create( KeyedSeq$$1 && KeyedSeq$$1.prototype );\n  FromEntriesSequence.prototype.constructor = FromEntriesSequence;\n\n  FromEntriesSequence.prototype.entrySeq = function entrySeq () {\n    return this._iter.toSeq();\n  };\n\n  FromEntriesSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    return this._iter.__iterate(function (entry) {\n      // Check if entry exists first so array access doesn't throw for holes\n      // in the parent iteration.\n      if (entry) {\n        validateEntry(entry);\n        var indexedCollection = isCollection(entry);\n        return fn(\n          indexedCollection ? entry.get(1) : entry[1],\n          indexedCollection ? entry.get(0) : entry[0],\n          this$1\n        );\n      }\n    }, reverse);\n  };\n\n  FromEntriesSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    return new Iterator(function () {\n      while (true) {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedCollection = isCollection(entry);\n          return iteratorValue(\n            type,\n            indexedCollection ? entry.get(0) : entry[0],\n            indexedCollection ? entry.get(1) : entry[1],\n            step\n          );\n        }\n      }\n    });\n  };\n\n  return FromEntriesSequence;\n}(KeyedSeq));\n\nToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;\n\nfunction flipFactory(collection) {\n  var flipSequence = makeSequence(collection);\n  flipSequence._iter = collection;\n  flipSequence.size = collection.size;\n  flipSequence.flip = function () { return collection; };\n  flipSequence.reverse = function() {\n    var reversedSequence = collection.reverse.apply(this); // super.reverse()\n    reversedSequence.flip = function () { return collection.reverse(); };\n    return reversedSequence;\n  };\n  flipSequence.has = function (key) { return collection.includes(key); };\n  flipSequence.includes = function (key) { return collection.has(key); };\n  flipSequence.cacheResult = cacheResultThrough;\n  flipSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    return collection.__iterate(function (v, k) { return fn(k, v, this$1) !== false; }, reverse);\n  };\n  flipSequence.__iteratorUncached = function(type, reverse) {\n    if (type === ITERATE_ENTRIES) {\n      var iterator = collection.__iterator(type, reverse);\n      return new Iterator(function () {\n        var step = iterator.next();\n        if (!step.done) {\n          var k = step.value[0];\n          step.value[0] = step.value[1];\n          step.value[1] = k;\n        }\n        return step;\n      });\n    }\n    return collection.__iterator(\n      type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n      reverse\n    );\n  };\n  return flipSequence;\n}\n\nfunction mapFactory(collection, mapper, context) {\n  var mappedSequence = makeSequence(collection);\n  mappedSequence.size = collection.size;\n  mappedSequence.has = function (key) { return collection.has(key); };\n  mappedSequence.get = function (key, notSetValue) {\n    var v = collection.get(key, NOT_SET);\n    return v === NOT_SET\n      ? notSetValue\n      : mapper.call(context, v, key, collection);\n  };\n  mappedSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    return collection.__iterate(\n      function (v, k, c) { return fn(mapper.call(context, v, k, c), k, this$1) !== false; },\n      reverse\n    );\n  };\n  mappedSequence.__iteratorUncached = function(type, reverse) {\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      var key = entry[0];\n      return iteratorValue(\n        type,\n        key,\n        mapper.call(context, entry[1], key, collection),\n        step\n      );\n    });\n  };\n  return mappedSequence;\n}\n\nfunction reverseFactory(collection, useKeys) {\n  var this$1 = this;\n\n  var reversedSequence = makeSequence(collection);\n  reversedSequence._iter = collection;\n  reversedSequence.size = collection.size;\n  reversedSequence.reverse = function () { return collection; };\n  if (collection.flip) {\n    reversedSequence.flip = function() {\n      var flipSequence = flipFactory(collection);\n      flipSequence.reverse = function () { return collection.flip(); };\n      return flipSequence;\n    };\n  }\n  reversedSequence.get = function (key, notSetValue) { return collection.get(useKeys ? key : -1 - key, notSetValue); };\n  reversedSequence.has = function (key) { return collection.has(useKeys ? key : -1 - key); };\n  reversedSequence.includes = function (value) { return collection.includes(value); };\n  reversedSequence.cacheResult = cacheResultThrough;\n  reversedSequence.__iterate = function(fn, reverse) {\n    var this$1 = this;\n\n    var i = 0;\n    reverse && ensureSize(collection);\n    return collection.__iterate(\n      function (v, k) { return fn(v, useKeys ? k : reverse ? this$1.size - ++i : i++, this$1); },\n      !reverse\n    );\n  };\n  reversedSequence.__iterator = function (type, reverse) {\n    var i = 0;\n    reverse && ensureSize(collection);\n    var iterator = collection.__iterator(ITERATE_ENTRIES, !reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      return iteratorValue(\n        type,\n        useKeys ? entry[0] : reverse ? this$1.size - ++i : i++,\n        entry[1],\n        step\n      );\n    });\n  };\n  return reversedSequence;\n}\n\nfunction filterFactory(collection, predicate, context, useKeys) {\n  var filterSequence = makeSequence(collection);\n  if (useKeys) {\n    filterSequence.has = function (key) {\n      var v = collection.get(key, NOT_SET);\n      return v !== NOT_SET && !!predicate.call(context, v, key, collection);\n    };\n    filterSequence.get = function (key, notSetValue) {\n      var v = collection.get(key, NOT_SET);\n      return v !== NOT_SET && predicate.call(context, v, key, collection)\n        ? v\n        : notSetValue;\n    };\n  }\n  filterSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    var iterations = 0;\n    collection.__iterate(function (v, k, c) {\n      if (predicate.call(context, v, k, c)) {\n        iterations++;\n        return fn(v, useKeys ? k : iterations - 1, this$1);\n      }\n    }, reverse);\n    return iterations;\n  };\n  filterSequence.__iteratorUncached = function(type, reverse) {\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var iterations = 0;\n    return new Iterator(function () {\n      while (true) {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        var value = entry[1];\n        if (predicate.call(context, value, key, collection)) {\n          return iteratorValue(type, useKeys ? key : iterations++, value, step);\n        }\n      }\n    });\n  };\n  return filterSequence;\n}\n\nfunction countByFactory(collection, grouper, context) {\n  var groups = Map().asMutable();\n  collection.__iterate(function (v, k) {\n    groups.update(grouper.call(context, v, k, collection), 0, function (a) { return a + 1; });\n  });\n  return groups.asImmutable();\n}\n\nfunction groupByFactory(collection, grouper, context) {\n  var isKeyedIter = isKeyed(collection);\n  var groups = (isOrdered(collection) ? OrderedMap() : Map()).asMutable();\n  collection.__iterate(function (v, k) {\n    groups.update(\n      grouper.call(context, v, k, collection),\n      function (a) { return ((a = a || []), a.push(isKeyedIter ? [k, v] : v), a); }\n    );\n  });\n  var coerce = collectionClass(collection);\n  return groups.map(function (arr) { return reify(collection, coerce(arr)); });\n}\n\nfunction sliceFactory(collection, begin, end, useKeys) {\n  var originalSize = collection.size;\n\n  if (wholeSlice(begin, end, originalSize)) {\n    return collection;\n  }\n\n  var resolvedBegin = resolveBegin(begin, originalSize);\n  var resolvedEnd = resolveEnd(end, originalSize);\n\n  // begin or end will be NaN if they were provided as negative numbers and\n  // this collection's size is unknown. In that case, cache first so there is\n  // a known size and these do not resolve to NaN.\n  if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n    return sliceFactory(collection.toSeq().cacheResult(), begin, end, useKeys);\n  }\n\n  // Note: resolvedEnd is undefined when the original sequence's length is\n  // unknown and this slice did not supply an end and should contain all\n  // elements after resolvedBegin.\n  // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n  var resolvedSize = resolvedEnd - resolvedBegin;\n  var sliceSize;\n  if (resolvedSize === resolvedSize) {\n    sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n  }\n\n  var sliceSeq = makeSequence(collection);\n\n  // If collection.size is undefined, the size of the realized sliceSeq is\n  // unknown at this point unless the number of items to slice is 0\n  sliceSeq.size =\n    sliceSize === 0 ? sliceSize : (collection.size && sliceSize) || undefined;\n\n  if (!useKeys && isSeq(collection) && sliceSize >= 0) {\n    sliceSeq.get = function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return index >= 0 && index < sliceSize\n        ? collection.get(index + resolvedBegin, notSetValue)\n        : notSetValue;\n    };\n  }\n\n  sliceSeq.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    if (sliceSize === 0) {\n      return 0;\n    }\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var skipped = 0;\n    var isSkipping = true;\n    var iterations = 0;\n    collection.__iterate(function (v, k) {\n      if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n        iterations++;\n        return (\n          fn(v, useKeys ? k : iterations - 1, this$1) !== false &&\n          iterations !== sliceSize\n        );\n      }\n    });\n    return iterations;\n  };\n\n  sliceSeq.__iteratorUncached = function(type, reverse) {\n    if (sliceSize !== 0 && reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    // Don't bother instantiating parent iterator if taking 0.\n    if (sliceSize === 0) {\n      return new Iterator(iteratorDone);\n    }\n    var iterator = collection.__iterator(type, reverse);\n    var skipped = 0;\n    var iterations = 0;\n    return new Iterator(function () {\n      while (skipped++ < resolvedBegin) {\n        iterator.next();\n      }\n      if (++iterations > sliceSize) {\n        return iteratorDone();\n      }\n      var step = iterator.next();\n      if (useKeys || type === ITERATE_VALUES || step.done) {\n        return step;\n      }\n      if (type === ITERATE_KEYS) {\n        return iteratorValue(type, iterations - 1, undefined, step);\n      }\n      return iteratorValue(type, iterations - 1, step.value[1], step);\n    });\n  };\n\n  return sliceSeq;\n}\n\nfunction takeWhileFactory(collection, predicate, context) {\n  var takeSequence = makeSequence(collection);\n  takeSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var iterations = 0;\n    collection.__iterate(\n      function (v, k, c) { return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$1); }\n    );\n    return iterations;\n  };\n  takeSequence.__iteratorUncached = function(type, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var iterating = true;\n    return new Iterator(function () {\n      if (!iterating) {\n        return iteratorDone();\n      }\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      var k = entry[0];\n      var v = entry[1];\n      if (!predicate.call(context, v, k, this$1)) {\n        iterating = false;\n        return iteratorDone();\n      }\n      return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n    });\n  };\n  return takeSequence;\n}\n\nfunction skipWhileFactory(collection, predicate, context, useKeys) {\n  var skipSequence = makeSequence(collection);\n  skipSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var isSkipping = true;\n    var iterations = 0;\n    collection.__iterate(function (v, k, c) {\n      if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n        iterations++;\n        return fn(v, useKeys ? k : iterations - 1, this$1);\n      }\n    });\n    return iterations;\n  };\n  skipSequence.__iteratorUncached = function(type, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var skipping = true;\n    var iterations = 0;\n    return new Iterator(function () {\n      var step;\n      var k;\n      var v;\n      do {\n        step = iterator.next();\n        if (step.done) {\n          if (useKeys || type === ITERATE_VALUES) {\n            return step;\n          }\n          if (type === ITERATE_KEYS) {\n            return iteratorValue(type, iterations++, undefined, step);\n          }\n          return iteratorValue(type, iterations++, step.value[1], step);\n        }\n        var entry = step.value;\n        k = entry[0];\n        v = entry[1];\n        skipping && (skipping = predicate.call(context, v, k, this$1));\n      } while (skipping);\n      return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n    });\n  };\n  return skipSequence;\n}\n\nfunction concatFactory(collection, values) {\n  var isKeyedCollection = isKeyed(collection);\n  var iters = [collection]\n    .concat(values)\n    .map(function (v) {\n      if (!isCollection(v)) {\n        v = isKeyedCollection\n          ? keyedSeqFromValue(v)\n          : indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedCollection) {\n        v = KeyedCollection(v);\n      }\n      return v;\n    })\n    .filter(function (v) { return v.size !== 0; });\n\n  if (iters.length === 0) {\n    return collection;\n  }\n\n  if (iters.length === 1) {\n    var singleton = iters[0];\n    if (\n      singleton === collection ||\n      (isKeyedCollection && isKeyed(singleton)) ||\n      (isIndexed(collection) && isIndexed(singleton))\n    ) {\n      return singleton;\n    }\n  }\n\n  var concatSeq = new ArraySeq(iters);\n  if (isKeyedCollection) {\n    concatSeq = concatSeq.toKeyedSeq();\n  } else if (!isIndexed(collection)) {\n    concatSeq = concatSeq.toSetSeq();\n  }\n  concatSeq = concatSeq.flatten(true);\n  concatSeq.size = iters.reduce(function (sum, seq) {\n    if (sum !== undefined) {\n      var size = seq.size;\n      if (size !== undefined) {\n        return sum + size;\n      }\n    }\n  }, 0);\n  return concatSeq;\n}\n\nfunction flattenFactory(collection, depth, useKeys) {\n  var flatSequence = makeSequence(collection);\n  flatSequence.__iterateUncached = function(fn, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var iterations = 0;\n    var stopped = false;\n    function flatDeep(iter, currentDepth) {\n      iter.__iterate(function (v, k) {\n        if ((!depth || currentDepth < depth) && isCollection(v)) {\n          flatDeep(v, currentDepth + 1);\n        } else {\n          iterations++;\n          if (fn(v, useKeys ? k : iterations - 1, flatSequence) === false) {\n            stopped = true;\n          }\n        }\n        return !stopped;\n      }, reverse);\n    }\n    flatDeep(collection, 0);\n    return iterations;\n  };\n  flatSequence.__iteratorUncached = function(type, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(type, reverse);\n    var stack = [];\n    var iterations = 0;\n    return new Iterator(function () {\n      while (iterator) {\n        var step = iterator.next();\n        if (step.done !== false) {\n          iterator = stack.pop();\n          continue;\n        }\n        var v = step.value;\n        if (type === ITERATE_ENTRIES) {\n          v = v[1];\n        }\n        if ((!depth || stack.length < depth) && isCollection(v)) {\n          stack.push(iterator);\n          iterator = v.__iterator(type, reverse);\n        } else {\n          return useKeys ? step : iteratorValue(type, iterations++, v, step);\n        }\n      }\n      return iteratorDone();\n    });\n  };\n  return flatSequence;\n}\n\nfunction flatMapFactory(collection, mapper, context) {\n  var coerce = collectionClass(collection);\n  return collection\n    .toSeq()\n    .map(function (v, k) { return coerce(mapper.call(context, v, k, collection)); })\n    .flatten(true);\n}\n\nfunction interposeFactory(collection, separator) {\n  var interposedSequence = makeSequence(collection);\n  interposedSequence.size = collection.size && collection.size * 2 - 1;\n  interposedSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    var iterations = 0;\n    collection.__iterate(\n      function (v) { return (!iterations || fn(separator, iterations++, this$1) !== false) &&\n        fn(v, iterations++, this$1) !== false; },\n      reverse\n    );\n    return iterations;\n  };\n  interposedSequence.__iteratorUncached = function(type, reverse) {\n    var iterator = collection.__iterator(ITERATE_VALUES, reverse);\n    var iterations = 0;\n    var step;\n    return new Iterator(function () {\n      if (!step || iterations % 2) {\n        step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n      }\n      return iterations % 2\n        ? iteratorValue(type, iterations++, separator)\n        : iteratorValue(type, iterations++, step.value, step);\n    });\n  };\n  return interposedSequence;\n}\n\nfunction sortFactory(collection, comparator, mapper) {\n  if (!comparator) {\n    comparator = defaultComparator;\n  }\n  var isKeyedCollection = isKeyed(collection);\n  var index = 0;\n  var entries = collection\n    .toSeq()\n    .map(function (v, k) { return [k, v, index++, mapper ? mapper(v, k, collection) : v]; })\n    .valueSeq()\n    .toArray();\n  entries.sort(function (a, b) { return comparator(a[3], b[3]) || a[2] - b[2]; }).forEach(\n    isKeyedCollection\n      ? function (v, i) {\n          entries[i].length = 2;\n        }\n      : function (v, i) {\n          entries[i] = v[1];\n        }\n  );\n  return isKeyedCollection\n    ? KeyedSeq(entries)\n    : isIndexed(collection) ? IndexedSeq(entries) : SetSeq(entries);\n}\n\nfunction maxFactory(collection, comparator, mapper) {\n  if (!comparator) {\n    comparator = defaultComparator;\n  }\n  if (mapper) {\n    var entry = collection\n      .toSeq()\n      .map(function (v, k) { return [v, mapper(v, k, collection)]; })\n      .reduce(function (a, b) { return (maxCompare(comparator, a[1], b[1]) ? b : a); });\n    return entry && entry[0];\n  }\n  return collection.reduce(function (a, b) { return (maxCompare(comparator, a, b) ? b : a); });\n}\n\nfunction maxCompare(comparator, a, b) {\n  var comp = comparator(b, a);\n  // b is considered the new max if the comparator declares them equal, but\n  // they are not equal and b is in fact a nullish value.\n  return (\n    (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) ||\n    comp > 0\n  );\n}\n\nfunction zipWithFactory(keyIter, zipper, iters, zipAll) {\n  var zipSequence = makeSequence(keyIter);\n  var sizes = new ArraySeq(iters).map(function (i) { return i.size; });\n  zipSequence.size = zipAll ? sizes.max() : sizes.min();\n  // Note: this a generic base implementation of __iterate in terms of\n  // __iterator which may be more generically useful in the future.\n  zipSequence.__iterate = function(fn, reverse) {\n    var this$1 = this;\n\n    /* generic:\n    var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n    var step;\n    var iterations = 0;\n    while (!(step = iterator.next()).done) {\n      iterations++;\n      if (fn(step.value[1], step.value[0], this) === false) {\n        break;\n      }\n    }\n    return iterations;\n    */\n    // indexed:\n    var iterator = this.__iterator(ITERATE_VALUES, reverse);\n    var step;\n    var iterations = 0;\n    while (!(step = iterator.next()).done) {\n      if (fn(step.value, iterations++, this$1) === false) {\n        break;\n      }\n    }\n    return iterations;\n  };\n  zipSequence.__iteratorUncached = function(type, reverse) {\n    var iterators = iters.map(\n      function (i) { return ((i = Collection(i)), getIterator(reverse ? i.reverse() : i)); }\n    );\n    var iterations = 0;\n    var isDone = false;\n    return new Iterator(function () {\n      var steps;\n      if (!isDone) {\n        steps = iterators.map(function (i) { return i.next(); });\n        isDone = zipAll ? steps.every(function (s) { return s.done; }) : steps.some(function (s) { return s.done; });\n      }\n      if (isDone) {\n        return iteratorDone();\n      }\n      return iteratorValue(\n        type,\n        iterations++,\n        zipper.apply(null, steps.map(function (s) { return s.value; }))\n      );\n    });\n  };\n  return zipSequence;\n}\n\n// #pragma Helper Functions\n\nfunction reify(iter, seq) {\n  return iter === seq ? iter : isSeq(iter) ? seq : iter.constructor(seq);\n}\n\nfunction validateEntry(entry) {\n  if (entry !== Object(entry)) {\n    throw new TypeError('Expected [K, V] tuple: ' + entry);\n  }\n}\n\nfunction collectionClass(collection) {\n  return isKeyed(collection)\n    ? KeyedCollection\n    : isIndexed(collection) ? IndexedCollection : SetCollection;\n}\n\nfunction makeSequence(collection) {\n  return Object.create(\n    (isKeyed(collection)\n      ? KeyedSeq\n      : isIndexed(collection) ? IndexedSeq : SetSeq\n    ).prototype\n  );\n}\n\nfunction cacheResultThrough() {\n  if (this._iter.cacheResult) {\n    this._iter.cacheResult();\n    this.size = this._iter.size;\n    return this;\n  }\n  return Seq.prototype.cacheResult.call(this);\n}\n\nfunction defaultComparator(a, b) {\n  if (a === undefined && b === undefined) {\n    return 0;\n  }\n\n  if (a === undefined) {\n    return 1;\n  }\n\n  if (b === undefined) {\n    return -1;\n  }\n\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\n// http://jsperf.com/copy-array-inline\nfunction arrCopy(arr, offset) {\n  offset = offset || 0;\n  var len = Math.max(0, arr.length - offset);\n  var newArr = new Array(len);\n  for (var ii = 0; ii < len; ii++) {\n    newArr[ii] = arr[ii + offset];\n  }\n  return newArr;\n}\n\nfunction invariant(condition, error) {\n  if (!condition) { throw new Error(error); }\n}\n\nfunction assertNotInfinite(size) {\n  invariant(\n    size !== Infinity,\n    'Cannot perform this action with an infinite size.'\n  );\n}\n\nfunction coerceKeyPath(keyPath) {\n  if (isArrayLike(keyPath) && typeof keyPath !== 'string') {\n    return keyPath;\n  }\n  if (isOrdered(keyPath)) {\n    return keyPath.toArray();\n  }\n  throw new TypeError(\n    'Invalid keyPath: expected Ordered Collection or Array: ' + keyPath\n  );\n}\n\nfunction isPlainObj(value) {\n  return (\n    value && (value.constructor === Object || value.constructor === undefined)\n  );\n}\n\n/**\n * Returns true if the value is a potentially-persistent data structure, either\n * provided by Immutable.js or a plain Array or Object.\n */\nfunction isDataStructure(value) {\n  return isImmutable(value) || Array.isArray(value) || isPlainObj(value);\n}\n\n/**\n * Converts a value to a string, adding quotes if a string was provided.\n */\nfunction quoteString(value) {\n  try {\n    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n  } catch (_ignoreError) {\n    return JSON.stringify(value);\n  }\n}\n\nfunction has(collection, key) {\n  return isImmutable(collection)\n    ? collection.has(key)\n    : isDataStructure(collection) && hasOwnProperty.call(collection, key);\n}\n\nfunction get(collection, key, notSetValue) {\n  return isImmutable(collection)\n    ? collection.get(key, notSetValue)\n    : !has(collection, key)\n      ? notSetValue\n      : typeof collection.get === 'function'\n        ? collection.get(key)\n        : collection[key];\n}\n\nfunction shallowCopy(from) {\n  if (Array.isArray(from)) {\n    return arrCopy(from);\n  }\n  var to = {};\n  for (var key in from) {\n    if (hasOwnProperty.call(from, key)) {\n      to[key] = from[key];\n    }\n  }\n  return to;\n}\n\nfunction remove(collection, key) {\n  if (!isDataStructure(collection)) {\n    throw new TypeError(\n      'Cannot update non-data-structure value: ' + collection\n    );\n  }\n  if (isImmutable(collection)) {\n    if (!collection.remove) {\n      throw new TypeError(\n        'Cannot update immutable value without .remove() method: ' + collection\n      );\n    }\n    return collection.remove(key);\n  }\n  if (!hasOwnProperty.call(collection, key)) {\n    return collection;\n  }\n  var collectionCopy = shallowCopy(collection);\n  if (Array.isArray(collectionCopy)) {\n    collectionCopy.splice(key, 1);\n  } else {\n    delete collectionCopy[key];\n  }\n  return collectionCopy;\n}\n\nfunction set(collection, key, value) {\n  if (!isDataStructure(collection)) {\n    throw new TypeError(\n      'Cannot update non-data-structure value: ' + collection\n    );\n  }\n  if (isImmutable(collection)) {\n    if (!collection.set) {\n      throw new TypeError(\n        'Cannot update immutable value without .set() method: ' + collection\n      );\n    }\n    return collection.set(key, value);\n  }\n  if (hasOwnProperty.call(collection, key) && value === collection[key]) {\n    return collection;\n  }\n  var collectionCopy = shallowCopy(collection);\n  collectionCopy[key] = value;\n  return collectionCopy;\n}\n\nfunction updateIn(collection, keyPath, notSetValue, updater) {\n  if (!updater) {\n    updater = notSetValue;\n    notSetValue = undefined;\n  }\n  var updatedValue = updateInDeeply(\n    isImmutable(collection),\n    collection,\n    coerceKeyPath(keyPath),\n    0,\n    notSetValue,\n    updater\n  );\n  return updatedValue === NOT_SET ? notSetValue : updatedValue;\n}\n\nfunction updateInDeeply(\n  inImmutable,\n  existing,\n  keyPath,\n  i,\n  notSetValue,\n  updater\n) {\n  var wasNotSet = existing === NOT_SET;\n  if (i === keyPath.length) {\n    var existingValue = wasNotSet ? notSetValue : existing;\n    var newValue = updater(existingValue);\n    return newValue === existingValue ? existing : newValue;\n  }\n  if (!wasNotSet && !isDataStructure(existing)) {\n    throw new TypeError(\n      'Cannot update within non-data-structure value in path [' +\n        keyPath.slice(0, i).map(quoteString) +\n        ']: ' +\n        existing\n    );\n  }\n  var key = keyPath[i];\n  var nextExisting = wasNotSet ? NOT_SET : get(existing, key, NOT_SET);\n  var nextUpdated = updateInDeeply(\n    nextExisting === NOT_SET ? inImmutable : isImmutable(nextExisting),\n    nextExisting,\n    keyPath,\n    i + 1,\n    notSetValue,\n    updater\n  );\n  return nextUpdated === nextExisting\n    ? existing\n    : nextUpdated === NOT_SET\n      ? remove(existing, key)\n      : set(\n          wasNotSet ? (inImmutable ? emptyMap() : {}) : existing,\n          key,\n          nextUpdated\n        );\n}\n\nfunction setIn$1(collection, keyPath, value) {\n  return updateIn(collection, keyPath, NOT_SET, function () { return value; });\n}\n\nfunction setIn$$1(keyPath, v) {\n  return setIn$1(this, keyPath, v);\n}\n\nfunction removeIn(collection, keyPath) {\n  return updateIn(collection, keyPath, function () { return NOT_SET; });\n}\n\nfunction deleteIn(keyPath) {\n  return removeIn(this, keyPath);\n}\n\nfunction update$1(collection, key, notSetValue, updater) {\n  return updateIn(collection, [key], notSetValue, updater);\n}\n\nfunction update$$1(key, notSetValue, updater) {\n  return arguments.length === 1\n    ? key(this)\n    : update$1(this, key, notSetValue, updater);\n}\n\nfunction updateIn$1(keyPath, notSetValue, updater) {\n  return updateIn(this, keyPath, notSetValue, updater);\n}\n\nfunction merge() {\n  var iters = [], len = arguments.length;\n  while ( len-- ) iters[ len ] = arguments[ len ];\n\n  return mergeIntoKeyedWith(this, iters);\n}\n\nfunction mergeWith(merger) {\n  var iters = [], len = arguments.length - 1;\n  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n  return mergeIntoKeyedWith(this, iters, merger);\n}\n\nfunction mergeIntoKeyedWith(collection, collections, merger) {\n  var iters = [];\n  for (var ii = 0; ii < collections.length; ii++) {\n    var collection$1 = KeyedCollection(collections[ii]);\n    if (collection$1.size !== 0) {\n      iters.push(collection$1);\n    }\n  }\n  if (iters.length === 0) {\n    return collection;\n  }\n  if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n    return collection.constructor(iters[0]);\n  }\n  return collection.withMutations(function (collection) {\n    var mergeIntoCollection = merger\n      ? function (value, key) {\n          update$1(\n            collection,\n            key,\n            NOT_SET,\n            function (oldVal) { return (oldVal === NOT_SET ? value : merger(oldVal, value, key)); }\n          );\n        }\n      : function (value, key) {\n          collection.set(key, value);\n        };\n    for (var ii = 0; ii < iters.length; ii++) {\n      iters[ii].forEach(mergeIntoCollection);\n    }\n  });\n}\n\nfunction merge$1(collection) {\n  var sources = [], len = arguments.length - 1;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n  return mergeWithSources(collection, sources);\n}\n\nfunction mergeWith$1(merger, collection) {\n  var sources = [], len = arguments.length - 2;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 2 ];\n\n  return mergeWithSources(collection, sources, merger);\n}\n\nfunction mergeDeep$1(collection) {\n  var sources = [], len = arguments.length - 1;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n  return mergeDeepWithSources(collection, sources);\n}\n\nfunction mergeDeepWith$1(merger, collection) {\n  var sources = [], len = arguments.length - 2;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 2 ];\n\n  return mergeDeepWithSources(collection, sources, merger);\n}\n\nfunction mergeDeepWithSources(collection, sources, merger) {\n  return mergeWithSources(collection, sources, deepMergerWith(merger));\n}\n\nfunction mergeWithSources(collection, sources, merger) {\n  if (!isDataStructure(collection)) {\n    throw new TypeError(\n      'Cannot merge into non-data-structure value: ' + collection\n    );\n  }\n  if (isImmutable(collection)) {\n    return collection.mergeWith\n      ? collection.mergeWith.apply(collection, [ merger ].concat( sources ))\n      : collection.concat.apply(collection, sources);\n  }\n  var isArray = Array.isArray(collection);\n  var merged = collection;\n  var Collection$$1 = isArray ? IndexedCollection : KeyedCollection;\n  var mergeItem = isArray\n    ? function (value) {\n        // Copy on write\n        if (merged === collection) {\n          merged = shallowCopy(merged);\n        }\n        merged.push(value);\n      }\n    : function (value, key) {\n        var hasVal = hasOwnProperty.call(merged, key);\n        var nextVal =\n          hasVal && merger ? merger(merged[key], value, key) : value;\n        if (!hasVal || nextVal !== merged[key]) {\n          // Copy on write\n          if (merged === collection) {\n            merged = shallowCopy(merged);\n          }\n          merged[key] = nextVal;\n        }\n      };\n  for (var i = 0; i < sources.length; i++) {\n    Collection$$1(sources[i]).forEach(mergeItem);\n  }\n  return merged;\n}\n\nfunction deepMergerWith(merger) {\n  function deepMerger(oldValue, newValue, key) {\n    return isDataStructure(oldValue) && isDataStructure(newValue)\n      ? mergeWithSources(oldValue, [newValue], deepMerger)\n      : merger ? merger(oldValue, newValue, key) : newValue;\n  }\n  return deepMerger;\n}\n\nfunction mergeDeep() {\n  var iters = [], len = arguments.length;\n  while ( len-- ) iters[ len ] = arguments[ len ];\n\n  return mergeDeepWithSources(this, iters);\n}\n\nfunction mergeDeepWith(merger) {\n  var iters = [], len = arguments.length - 1;\n  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n  return mergeDeepWithSources(this, iters, merger);\n}\n\nfunction mergeIn(keyPath) {\n  var iters = [], len = arguments.length - 1;\n  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n  return updateIn(this, keyPath, emptyMap(), function (m) { return mergeWithSources(m, iters); });\n}\n\nfunction mergeDeepIn(keyPath) {\n  var iters = [], len = arguments.length - 1;\n  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n  return updateIn(this, keyPath, emptyMap(), function (m) { return mergeDeepWithSources(m, iters); }\n  );\n}\n\nfunction withMutations(fn) {\n  var mutable = this.asMutable();\n  fn(mutable);\n  return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n}\n\nfunction asMutable() {\n  return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n}\n\nfunction asImmutable() {\n  return this.__ensureOwner();\n}\n\nfunction wasAltered() {\n  return this.__altered;\n}\n\nvar Map = (function (KeyedCollection$$1) {\n  function Map(value) {\n    return value === null || value === undefined\n      ? emptyMap()\n      : isMap(value) && !isOrdered(value)\n        ? value\n        : emptyMap().withMutations(function (map) {\n            var iter = KeyedCollection$$1(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function (v, k) { return map.set(k, v); });\n          });\n  }\n\n  if ( KeyedCollection$$1 ) Map.__proto__ = KeyedCollection$$1;\n  Map.prototype = Object.create( KeyedCollection$$1 && KeyedCollection$$1.prototype );\n  Map.prototype.constructor = Map;\n\n  Map.of = function of () {\n    var keyValues = [], len = arguments.length;\n    while ( len-- ) keyValues[ len ] = arguments[ len ];\n\n    return emptyMap().withMutations(function (map) {\n      for (var i = 0; i < keyValues.length; i += 2) {\n        if (i + 1 >= keyValues.length) {\n          throw new Error('Missing value for key: ' + keyValues[i]);\n        }\n        map.set(keyValues[i], keyValues[i + 1]);\n      }\n    });\n  };\n\n  Map.prototype.toString = function toString () {\n    return this.__toString('Map {', '}');\n  };\n\n  // @pragma Access\n\n  Map.prototype.get = function get (k, notSetValue) {\n    return this._root\n      ? this._root.get(0, undefined, k, notSetValue)\n      : notSetValue;\n  };\n\n  // @pragma Modification\n\n  Map.prototype.set = function set (k, v) {\n    return updateMap(this, k, v);\n  };\n\n  Map.prototype.remove = function remove (k) {\n    return updateMap(this, k, NOT_SET);\n  };\n\n  Map.prototype.deleteAll = function deleteAll (keys) {\n    var collection = Collection(keys);\n\n    if (collection.size === 0) {\n      return this;\n    }\n\n    return this.withMutations(function (map) {\n      collection.forEach(function (key) { return map.remove(key); });\n    });\n  };\n\n  Map.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._root = null;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyMap();\n  };\n\n  // @pragma Composition\n\n  Map.prototype.sort = function sort (comparator) {\n    // Late binding\n    return OrderedMap(sortFactory(this, comparator));\n  };\n\n  Map.prototype.sortBy = function sortBy (mapper, comparator) {\n    // Late binding\n    return OrderedMap(sortFactory(this, comparator, mapper));\n  };\n\n  // @pragma Mutability\n\n  Map.prototype.__iterator = function __iterator (type, reverse) {\n    return new MapIterator(this, type, reverse);\n  };\n\n  Map.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var iterations = 0;\n    this._root &&\n      this._root.iterate(function (entry) {\n        iterations++;\n        return fn(entry[1], entry[0], this$1);\n      }, reverse);\n    return iterations;\n  };\n\n  Map.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyMap();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeMap(this.size, this._root, ownerID, this.__hash);\n  };\n\n  return Map;\n}(KeyedCollection));\n\nfunction isMap(maybeMap) {\n  return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n}\n\nMap.isMap = isMap;\n\nvar IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\nvar MapPrototype = Map.prototype;\nMapPrototype[IS_MAP_SENTINEL] = true;\nMapPrototype[DELETE] = MapPrototype.remove;\nMapPrototype.removeAll = MapPrototype.deleteAll;\nMapPrototype.concat = MapPrototype.merge;\nMapPrototype.setIn = setIn$$1;\nMapPrototype.removeIn = MapPrototype.deleteIn = deleteIn;\nMapPrototype.update = update$$1;\nMapPrototype.updateIn = updateIn$1;\nMapPrototype.merge = merge;\nMapPrototype.mergeWith = mergeWith;\nMapPrototype.mergeDeep = mergeDeep;\nMapPrototype.mergeDeepWith = mergeDeepWith;\nMapPrototype.mergeIn = mergeIn;\nMapPrototype.mergeDeepIn = mergeDeepIn;\nMapPrototype.withMutations = withMutations;\nMapPrototype.wasAltered = wasAltered;\nMapPrototype.asImmutable = asImmutable;\nMapPrototype['@@transducer/init'] = MapPrototype.asMutable = asMutable;\nMapPrototype['@@transducer/step'] = function(result, arr) {\n  return result.set(arr[0], arr[1]);\n};\nMapPrototype['@@transducer/result'] = function(obj) {\n  return obj.asImmutable();\n};\n\n// #pragma Trie Nodes\n\nvar ArrayMapNode = function ArrayMapNode(ownerID, entries) {\n  this.ownerID = ownerID;\n  this.entries = entries;\n};\n\nArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  var entries = this.entries;\n  for (var ii = 0, len = entries.length; ii < len; ii++) {\n    if (is(key, entries[ii][0])) {\n      return entries[ii][1];\n    }\n  }\n  return notSetValue;\n};\n\nArrayMapNode.prototype.update = function update$$1 (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  var removed = value === NOT_SET;\n\n  var entries = this.entries;\n  var idx = 0;\n  var len = entries.length;\n  for (; idx < len; idx++) {\n    if (is(key, entries[idx][0])) {\n      break;\n    }\n  }\n  var exists = idx < len;\n\n  if (exists ? entries[idx][1] === value : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n  (removed || !exists) && SetRef(didChangeSize);\n\n  if (removed && entries.length === 1) {\n    return; // undefined\n  }\n\n  if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n    return createNodes(ownerID, entries, key, value);\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newEntries = isEditable ? entries : arrCopy(entries);\n\n  if (exists) {\n    if (removed) {\n      idx === len - 1\n        ? newEntries.pop()\n        : (newEntries[idx] = newEntries.pop());\n    } else {\n      newEntries[idx] = [key, value];\n    }\n  } else {\n    newEntries.push([key, value]);\n  }\n\n  if (isEditable) {\n    this.entries = newEntries;\n    return this;\n  }\n\n  return new ArrayMapNode(ownerID, newEntries);\n};\n\nvar BitmapIndexedNode = function BitmapIndexedNode(ownerID, bitmap, nodes) {\n  this.ownerID = ownerID;\n  this.bitmap = bitmap;\n  this.nodes = nodes;\n};\n\nBitmapIndexedNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);\n  var bitmap = this.bitmap;\n  return (bitmap & bit) === 0\n    ? notSetValue\n    : this.nodes[popCount(bitmap & (bit - 1))].get(\n        shift + SHIFT,\n        keyHash,\n        key,\n        notSetValue\n      );\n};\n\nBitmapIndexedNode.prototype.update = function update$$1 (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var bit = 1 << keyHashFrag;\n  var bitmap = this.bitmap;\n  var exists = (bitmap & bit) !== 0;\n\n  if (!exists && value === NOT_SET) {\n    return this;\n  }\n\n  var idx = popCount(bitmap & (bit - 1));\n  var nodes = this.nodes;\n  var node = exists ? nodes[idx] : undefined;\n  var newNode = updateNode(\n    node,\n    ownerID,\n    shift + SHIFT,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n\n  if (newNode === node) {\n    return this;\n  }\n\n  if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n    return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n  }\n\n  if (\n    exists &&\n    !newNode &&\n    nodes.length === 2 &&\n    isLeafNode(nodes[idx ^ 1])\n  ) {\n    return nodes[idx ^ 1];\n  }\n\n  if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n    return newNode;\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newBitmap = exists ? (newNode ? bitmap : bitmap ^ bit) : bitmap | bit;\n  var newNodes = exists\n    ? newNode\n      ? setAt(nodes, idx, newNode, isEditable)\n      : spliceOut(nodes, idx, isEditable)\n    : spliceIn(nodes, idx, newNode, isEditable);\n\n  if (isEditable) {\n    this.bitmap = newBitmap;\n    this.nodes = newNodes;\n    return this;\n  }\n\n  return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n};\n\nvar HashArrayMapNode = function HashArrayMapNode(ownerID, count, nodes) {\n  this.ownerID = ownerID;\n  this.count = count;\n  this.nodes = nodes;\n};\n\nHashArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var node = this.nodes[idx];\n  return node\n    ? node.get(shift + SHIFT, keyHash, key, notSetValue)\n    : notSetValue;\n};\n\nHashArrayMapNode.prototype.update = function update$$1 (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var removed = value === NOT_SET;\n  var nodes = this.nodes;\n  var node = nodes[idx];\n\n  if (removed && !node) {\n    return this;\n  }\n\n  var newNode = updateNode(\n    node,\n    ownerID,\n    shift + SHIFT,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n  if (newNode === node) {\n    return this;\n  }\n\n  var newCount = this.count;\n  if (!node) {\n    newCount++;\n  } else if (!newNode) {\n    newCount--;\n    if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n      return packNodes(ownerID, nodes, newCount, idx);\n    }\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newNodes = setAt(nodes, idx, newNode, isEditable);\n\n  if (isEditable) {\n    this.count = newCount;\n    this.nodes = newNodes;\n    return this;\n  }\n\n  return new HashArrayMapNode(ownerID, newCount, newNodes);\n};\n\nvar HashCollisionNode = function HashCollisionNode(ownerID, keyHash, entries) {\n  this.ownerID = ownerID;\n  this.keyHash = keyHash;\n  this.entries = entries;\n};\n\nHashCollisionNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  var entries = this.entries;\n  for (var ii = 0, len = entries.length; ii < len; ii++) {\n    if (is(key, entries[ii][0])) {\n      return entries[ii][1];\n    }\n  }\n  return notSetValue;\n};\n\nHashCollisionNode.prototype.update = function update$$1 (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n\n  var removed = value === NOT_SET;\n\n  if (keyHash !== this.keyHash) {\n    if (removed) {\n      return this;\n    }\n    SetRef(didAlter);\n    SetRef(didChangeSize);\n    return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n  }\n\n  var entries = this.entries;\n  var idx = 0;\n  var len = entries.length;\n  for (; idx < len; idx++) {\n    if (is(key, entries[idx][0])) {\n      break;\n    }\n  }\n  var exists = idx < len;\n\n  if (exists ? entries[idx][1] === value : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n  (removed || !exists) && SetRef(didChangeSize);\n\n  if (removed && len === 2) {\n    return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newEntries = isEditable ? entries : arrCopy(entries);\n\n  if (exists) {\n    if (removed) {\n      idx === len - 1\n        ? newEntries.pop()\n        : (newEntries[idx] = newEntries.pop());\n    } else {\n      newEntries[idx] = [key, value];\n    }\n  } else {\n    newEntries.push([key, value]);\n  }\n\n  if (isEditable) {\n    this.entries = newEntries;\n    return this;\n  }\n\n  return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n};\n\nvar ValueNode = function ValueNode(ownerID, keyHash, entry) {\n  this.ownerID = ownerID;\n  this.keyHash = keyHash;\n  this.entry = entry;\n};\n\nValueNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n};\n\nValueNode.prototype.update = function update$$1 (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  var removed = value === NOT_SET;\n  var keyMatch = is(key, this.entry[0]);\n  if (keyMatch ? value === this.entry[1] : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n\n  if (removed) {\n    SetRef(didChangeSize);\n    return; // undefined\n  }\n\n  if (keyMatch) {\n    if (ownerID && ownerID === this.ownerID) {\n      this.entry[1] = value;\n      return this;\n    }\n    return new ValueNode(ownerID, this.keyHash, [key, value]);\n  }\n\n  SetRef(didChangeSize);\n  return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n};\n\n// #pragma Iterators\n\nArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function(\n  fn,\n  reverse\n) {\n  var entries = this.entries;\n  for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n    if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n      return false;\n    }\n  }\n};\n\nBitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function(\n  fn,\n  reverse\n) {\n  var nodes = this.nodes;\n  for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n    var node = nodes[reverse ? maxIndex - ii : ii];\n    if (node && node.iterate(fn, reverse) === false) {\n      return false;\n    }\n  }\n};\n\n// eslint-disable-next-line no-unused-vars\nValueNode.prototype.iterate = function(fn, reverse) {\n  return fn(this.entry);\n};\n\nvar MapIterator = (function (Iterator$$1) {\n  function MapIterator(map, type, reverse) {\n    this._type = type;\n    this._reverse = reverse;\n    this._stack = map._root && mapIteratorFrame(map._root);\n  }\n\n  if ( Iterator$$1 ) MapIterator.__proto__ = Iterator$$1;\n  MapIterator.prototype = Object.create( Iterator$$1 && Iterator$$1.prototype );\n  MapIterator.prototype.constructor = MapIterator;\n\n  MapIterator.prototype.next = function next () {\n    var this$1 = this;\n\n    var type = this._type;\n    var stack = this._stack;\n    while (stack) {\n      var node = stack.node;\n      var index = stack.index++;\n      var maxIndex = (void 0);\n      if (node.entry) {\n        if (index === 0) {\n          return mapIteratorValue(type, node.entry);\n        }\n      } else if (node.entries) {\n        maxIndex = node.entries.length - 1;\n        if (index <= maxIndex) {\n          return mapIteratorValue(\n            type,\n            node.entries[this$1._reverse ? maxIndex - index : index]\n          );\n        }\n      } else {\n        maxIndex = node.nodes.length - 1;\n        if (index <= maxIndex) {\n          var subNode = node.nodes[this$1._reverse ? maxIndex - index : index];\n          if (subNode) {\n            if (subNode.entry) {\n              return mapIteratorValue(type, subNode.entry);\n            }\n            stack = this$1._stack = mapIteratorFrame(subNode, stack);\n          }\n          continue;\n        }\n      }\n      stack = this$1._stack = this$1._stack.__prev;\n    }\n    return iteratorDone();\n  };\n\n  return MapIterator;\n}(Iterator));\n\nfunction mapIteratorValue(type, entry) {\n  return iteratorValue(type, entry[0], entry[1]);\n}\n\nfunction mapIteratorFrame(node, prev) {\n  return {\n    node: node,\n    index: 0,\n    __prev: prev\n  };\n}\n\nfunction makeMap(size, root, ownerID, hash$$1) {\n  var map = Object.create(MapPrototype);\n  map.size = size;\n  map._root = root;\n  map.__ownerID = ownerID;\n  map.__hash = hash$$1;\n  map.__altered = false;\n  return map;\n}\n\nvar EMPTY_MAP;\nfunction emptyMap() {\n  return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n}\n\nfunction updateMap(map, k, v) {\n  var newRoot;\n  var newSize;\n  if (!map._root) {\n    if (v === NOT_SET) {\n      return map;\n    }\n    newSize = 1;\n    newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n  } else {\n    var didChangeSize = MakeRef(CHANGE_LENGTH);\n    var didAlter = MakeRef(DID_ALTER);\n    newRoot = updateNode(\n      map._root,\n      map.__ownerID,\n      0,\n      undefined,\n      k,\n      v,\n      didChangeSize,\n      didAlter\n    );\n    if (!didAlter.value) {\n      return map;\n    }\n    newSize = map.size + (didChangeSize.value ? (v === NOT_SET ? -1 : 1) : 0);\n  }\n  if (map.__ownerID) {\n    map.size = newSize;\n    map._root = newRoot;\n    map.__hash = undefined;\n    map.__altered = true;\n    return map;\n  }\n  return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n}\n\nfunction updateNode(\n  node,\n  ownerID,\n  shift,\n  keyHash,\n  key,\n  value,\n  didChangeSize,\n  didAlter\n) {\n  if (!node) {\n    if (value === NOT_SET) {\n      return node;\n    }\n    SetRef(didAlter);\n    SetRef(didChangeSize);\n    return new ValueNode(ownerID, keyHash, [key, value]);\n  }\n  return node.update(\n    ownerID,\n    shift,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n}\n\nfunction isLeafNode(node) {\n  return (\n    node.constructor === ValueNode || node.constructor === HashCollisionNode\n  );\n}\n\nfunction mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n  if (node.keyHash === keyHash) {\n    return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n  }\n\n  var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n  var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n  var newNode;\n  var nodes =\n    idx1 === idx2\n      ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)]\n      : ((newNode = new ValueNode(ownerID, keyHash, entry)),\n        idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n  return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n}\n\nfunction createNodes(ownerID, entries, key, value) {\n  if (!ownerID) {\n    ownerID = new OwnerID();\n  }\n  var node = new ValueNode(ownerID, hash(key), [key, value]);\n  for (var ii = 0; ii < entries.length; ii++) {\n    var entry = entries[ii];\n    node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n  }\n  return node;\n}\n\nfunction packNodes(ownerID, nodes, count, excluding) {\n  var bitmap = 0;\n  var packedII = 0;\n  var packedNodes = new Array(count);\n  for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n    var node = nodes[ii];\n    if (node !== undefined && ii !== excluding) {\n      bitmap |= bit;\n      packedNodes[packedII++] = node;\n    }\n  }\n  return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n}\n\nfunction expandNodes(ownerID, nodes, bitmap, including, node) {\n  var count = 0;\n  var expandedNodes = new Array(SIZE);\n  for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n    expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n  }\n  expandedNodes[including] = node;\n  return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n}\n\nfunction popCount(x) {\n  x -= (x >> 1) & 0x55555555;\n  x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n  x = (x + (x >> 4)) & 0x0f0f0f0f;\n  x += x >> 8;\n  x += x >> 16;\n  return x & 0x7f;\n}\n\nfunction setAt(array, idx, val, canEdit) {\n  var newArray = canEdit ? array : arrCopy(array);\n  newArray[idx] = val;\n  return newArray;\n}\n\nfunction spliceIn(array, idx, val, canEdit) {\n  var newLen = array.length + 1;\n  if (canEdit && idx + 1 === newLen) {\n    array[idx] = val;\n    return array;\n  }\n  var newArray = new Array(newLen);\n  var after = 0;\n  for (var ii = 0; ii < newLen; ii++) {\n    if (ii === idx) {\n      newArray[ii] = val;\n      after = -1;\n    } else {\n      newArray[ii] = array[ii + after];\n    }\n  }\n  return newArray;\n}\n\nfunction spliceOut(array, idx, canEdit) {\n  var newLen = array.length - 1;\n  if (canEdit && idx === newLen) {\n    array.pop();\n    return array;\n  }\n  var newArray = new Array(newLen);\n  var after = 0;\n  for (var ii = 0; ii < newLen; ii++) {\n    if (ii === idx) {\n      after = 1;\n    }\n    newArray[ii] = array[ii + after];\n  }\n  return newArray;\n}\n\nvar MAX_ARRAY_MAP_SIZE = SIZE / 4;\nvar MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\nvar MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\nvar List = (function (IndexedCollection$$1) {\n  function List(value) {\n    var empty = emptyList();\n    if (value === null || value === undefined) {\n      return empty;\n    }\n    if (isList(value)) {\n      return value;\n    }\n    var iter = IndexedCollection$$1(value);\n    var size = iter.size;\n    if (size === 0) {\n      return empty;\n    }\n    assertNotInfinite(size);\n    if (size > 0 && size < SIZE) {\n      return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n    }\n    return empty.withMutations(function (list) {\n      list.setSize(size);\n      iter.forEach(function (v, i) { return list.set(i, v); });\n    });\n  }\n\n  if ( IndexedCollection$$1 ) List.__proto__ = IndexedCollection$$1;\n  List.prototype = Object.create( IndexedCollection$$1 && IndexedCollection$$1.prototype );\n  List.prototype.constructor = List;\n\n  List.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  List.prototype.toString = function toString () {\n    return this.__toString('List [', ']');\n  };\n\n  // @pragma Access\n\n  List.prototype.get = function get (index, notSetValue) {\n    index = wrapIndex(this, index);\n    if (index >= 0 && index < this.size) {\n      index += this._origin;\n      var node = listNodeFor(this, index);\n      return node && node.array[index & MASK];\n    }\n    return notSetValue;\n  };\n\n  // @pragma Modification\n\n  List.prototype.set = function set (index, value) {\n    return updateList(this, index, value);\n  };\n\n  List.prototype.remove = function remove (index) {\n    return !this.has(index)\n      ? this\n      : index === 0\n        ? this.shift()\n        : index === this.size - 1 ? this.pop() : this.splice(index, 1);\n  };\n\n  List.prototype.insert = function insert (index, value) {\n    return this.splice(index, 0, value);\n  };\n\n  List.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = this._origin = this._capacity = 0;\n      this._level = SHIFT;\n      this._root = this._tail = null;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyList();\n  };\n\n  List.prototype.push = function push (/*...values*/) {\n    var values = arguments;\n    var oldSize = this.size;\n    return this.withMutations(function (list) {\n      setListBounds(list, 0, oldSize + values.length);\n      for (var ii = 0; ii < values.length; ii++) {\n        list.set(oldSize + ii, values[ii]);\n      }\n    });\n  };\n\n  List.prototype.pop = function pop () {\n    return setListBounds(this, 0, -1);\n  };\n\n  List.prototype.unshift = function unshift (/*...values*/) {\n    var values = arguments;\n    return this.withMutations(function (list) {\n      setListBounds(list, -values.length);\n      for (var ii = 0; ii < values.length; ii++) {\n        list.set(ii, values[ii]);\n      }\n    });\n  };\n\n  List.prototype.shift = function shift () {\n    return setListBounds(this, 1);\n  };\n\n  // @pragma Composition\n\n  List.prototype.concat = function concat (/*...collections*/) {\n    var arguments$1 = arguments;\n\n    var seqs = [];\n    for (var i = 0; i < arguments.length; i++) {\n      var argument = arguments$1[i];\n      var seq = IndexedCollection$$1(\n        typeof argument !== 'string' && hasIterator(argument)\n          ? argument\n          : [argument]\n      );\n      if (seq.size !== 0) {\n        seqs.push(seq);\n      }\n    }\n    if (seqs.length === 0) {\n      return this;\n    }\n    if (this.size === 0 && !this.__ownerID && seqs.length === 1) {\n      return this.constructor(seqs[0]);\n    }\n    return this.withMutations(function (list) {\n      seqs.forEach(function (seq) { return seq.forEach(function (value) { return list.push(value); }); });\n    });\n  };\n\n  List.prototype.setSize = function setSize (size) {\n    return setListBounds(this, 0, size);\n  };\n\n  // @pragma Iteration\n\n  List.prototype.slice = function slice (begin, end) {\n    var size = this.size;\n    if (wholeSlice(begin, end, size)) {\n      return this;\n    }\n    return setListBounds(\n      this,\n      resolveBegin(begin, size),\n      resolveEnd(end, size)\n    );\n  };\n\n  List.prototype.__iterator = function __iterator (type, reverse) {\n    var index = reverse ? this.size : 0;\n    var values = iterateList(this, reverse);\n    return new Iterator(function () {\n      var value = values();\n      return value === DONE\n        ? iteratorDone()\n        : iteratorValue(type, reverse ? --index : index++, value);\n    });\n  };\n\n  List.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var index = reverse ? this.size : 0;\n    var values = iterateList(this, reverse);\n    var value;\n    while ((value = values()) !== DONE) {\n      if (fn(value, reverse ? --index : index++, this$1) === false) {\n        break;\n      }\n    }\n    return index;\n  };\n\n  List.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyList();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeList(\n      this._origin,\n      this._capacity,\n      this._level,\n      this._root,\n      this._tail,\n      ownerID,\n      this.__hash\n    );\n  };\n\n  return List;\n}(IndexedCollection));\n\nfunction isList(maybeList) {\n  return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n}\n\nList.isList = isList;\n\nvar IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\nvar ListPrototype = List.prototype;\nListPrototype[IS_LIST_SENTINEL] = true;\nListPrototype[DELETE] = ListPrototype.remove;\nListPrototype.merge = ListPrototype.concat;\nListPrototype.setIn = setIn$$1;\nListPrototype.deleteIn = ListPrototype.removeIn = deleteIn;\nListPrototype.update = update$$1;\nListPrototype.updateIn = updateIn$1;\nListPrototype.mergeIn = mergeIn;\nListPrototype.mergeDeepIn = mergeDeepIn;\nListPrototype.withMutations = withMutations;\nListPrototype.wasAltered = wasAltered;\nListPrototype.asImmutable = asImmutable;\nListPrototype['@@transducer/init'] = ListPrototype.asMutable = asMutable;\nListPrototype['@@transducer/step'] = function(result, arr) {\n  return result.push(arr);\n};\nListPrototype['@@transducer/result'] = function(obj) {\n  return obj.asImmutable();\n};\n\nvar VNode = function VNode(array, ownerID) {\n  this.array = array;\n  this.ownerID = ownerID;\n};\n\n// TODO: seems like these methods are very similar\n\nVNode.prototype.removeBefore = function removeBefore (ownerID, level, index) {\n  if (index === level ? 1 << level : 0 || this.array.length === 0) {\n    return this;\n  }\n  var originIndex = (index >>> level) & MASK;\n  if (originIndex >= this.array.length) {\n    return new VNode([], ownerID);\n  }\n  var removingFirst = originIndex === 0;\n  var newChild;\n  if (level > 0) {\n    var oldChild = this.array[originIndex];\n    newChild =\n      oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n    if (newChild === oldChild && removingFirst) {\n      return this;\n    }\n  }\n  if (removingFirst && !newChild) {\n    return this;\n  }\n  var editable = editableVNode(this, ownerID);\n  if (!removingFirst) {\n    for (var ii = 0; ii < originIndex; ii++) {\n      editable.array[ii] = undefined;\n    }\n  }\n  if (newChild) {\n    editable.array[originIndex] = newChild;\n  }\n  return editable;\n};\n\nVNode.prototype.removeAfter = function removeAfter (ownerID, level, index) {\n  if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n    return this;\n  }\n  var sizeIndex = ((index - 1) >>> level) & MASK;\n  if (sizeIndex >= this.array.length) {\n    return this;\n  }\n\n  var newChild;\n  if (level > 0) {\n    var oldChild = this.array[sizeIndex];\n    newChild =\n      oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n    if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n      return this;\n    }\n  }\n\n  var editable = editableVNode(this, ownerID);\n  editable.array.splice(sizeIndex + 1);\n  if (newChild) {\n    editable.array[sizeIndex] = newChild;\n  }\n  return editable;\n};\n\nvar DONE = {};\n\nfunction iterateList(list, reverse) {\n  var left = list._origin;\n  var right = list._capacity;\n  var tailPos = getTailOffset(right);\n  var tail = list._tail;\n\n  return iterateNodeOrLeaf(list._root, list._level, 0);\n\n  function iterateNodeOrLeaf(node, level, offset) {\n    return level === 0\n      ? iterateLeaf(node, offset)\n      : iterateNode(node, level, offset);\n  }\n\n  function iterateLeaf(node, offset) {\n    var array = offset === tailPos ? tail && tail.array : node && node.array;\n    var from = offset > left ? 0 : left - offset;\n    var to = right - offset;\n    if (to > SIZE) {\n      to = SIZE;\n    }\n    return function () {\n      if (from === to) {\n        return DONE;\n      }\n      var idx = reverse ? --to : from++;\n      return array && array[idx];\n    };\n  }\n\n  function iterateNode(node, level, offset) {\n    var values;\n    var array = node && node.array;\n    var from = offset > left ? 0 : (left - offset) >> level;\n    var to = ((right - offset) >> level) + 1;\n    if (to > SIZE) {\n      to = SIZE;\n    }\n    return function () {\n      while (true) {\n        if (values) {\n          var value = values();\n          if (value !== DONE) {\n            return value;\n          }\n          values = null;\n        }\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        values = iterateNodeOrLeaf(\n          array && array[idx],\n          level - SHIFT,\n          offset + (idx << level)\n        );\n      }\n    };\n  }\n}\n\nfunction makeList(origin, capacity, level, root, tail, ownerID, hash) {\n  var list = Object.create(ListPrototype);\n  list.size = capacity - origin;\n  list._origin = origin;\n  list._capacity = capacity;\n  list._level = level;\n  list._root = root;\n  list._tail = tail;\n  list.__ownerID = ownerID;\n  list.__hash = hash;\n  list.__altered = false;\n  return list;\n}\n\nvar EMPTY_LIST;\nfunction emptyList() {\n  return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n}\n\nfunction updateList(list, index, value) {\n  index = wrapIndex(list, index);\n\n  if (index !== index) {\n    return list;\n  }\n\n  if (index >= list.size || index < 0) {\n    return list.withMutations(function (list) {\n      index < 0\n        ? setListBounds(list, index).set(0, value)\n        : setListBounds(list, 0, index + 1).set(index, value);\n    });\n  }\n\n  index += list._origin;\n\n  var newTail = list._tail;\n  var newRoot = list._root;\n  var didAlter = MakeRef(DID_ALTER);\n  if (index >= getTailOffset(list._capacity)) {\n    newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n  } else {\n    newRoot = updateVNode(\n      newRoot,\n      list.__ownerID,\n      list._level,\n      index,\n      value,\n      didAlter\n    );\n  }\n\n  if (!didAlter.value) {\n    return list;\n  }\n\n  if (list.__ownerID) {\n    list._root = newRoot;\n    list._tail = newTail;\n    list.__hash = undefined;\n    list.__altered = true;\n    return list;\n  }\n  return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n}\n\nfunction updateVNode(node, ownerID, level, index, value, didAlter) {\n  var idx = (index >>> level) & MASK;\n  var nodeHas = node && idx < node.array.length;\n  if (!nodeHas && value === undefined) {\n    return node;\n  }\n\n  var newNode;\n\n  if (level > 0) {\n    var lowerNode = node && node.array[idx];\n    var newLowerNode = updateVNode(\n      lowerNode,\n      ownerID,\n      level - SHIFT,\n      index,\n      value,\n      didAlter\n    );\n    if (newLowerNode === lowerNode) {\n      return node;\n    }\n    newNode = editableVNode(node, ownerID);\n    newNode.array[idx] = newLowerNode;\n    return newNode;\n  }\n\n  if (nodeHas && node.array[idx] === value) {\n    return node;\n  }\n\n  SetRef(didAlter);\n\n  newNode = editableVNode(node, ownerID);\n  if (value === undefined && idx === newNode.array.length - 1) {\n    newNode.array.pop();\n  } else {\n    newNode.array[idx] = value;\n  }\n  return newNode;\n}\n\nfunction editableVNode(node, ownerID) {\n  if (ownerID && node && ownerID === node.ownerID) {\n    return node;\n  }\n  return new VNode(node ? node.array.slice() : [], ownerID);\n}\n\nfunction listNodeFor(list, rawIndex) {\n  if (rawIndex >= getTailOffset(list._capacity)) {\n    return list._tail;\n  }\n  if (rawIndex < 1 << (list._level + SHIFT)) {\n    var node = list._root;\n    var level = list._level;\n    while (node && level > 0) {\n      node = node.array[(rawIndex >>> level) & MASK];\n      level -= SHIFT;\n    }\n    return node;\n  }\n}\n\nfunction setListBounds(list, begin, end) {\n  // Sanitize begin & end using this shorthand for ToInt32(argument)\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n  if (begin !== undefined) {\n    begin |= 0;\n  }\n  if (end !== undefined) {\n    end |= 0;\n  }\n  var owner = list.__ownerID || new OwnerID();\n  var oldOrigin = list._origin;\n  var oldCapacity = list._capacity;\n  var newOrigin = oldOrigin + begin;\n  var newCapacity =\n    end === undefined\n      ? oldCapacity\n      : end < 0 ? oldCapacity + end : oldOrigin + end;\n  if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n    return list;\n  }\n\n  // If it's going to end after it starts, it's empty.\n  if (newOrigin >= newCapacity) {\n    return list.clear();\n  }\n\n  var newLevel = list._level;\n  var newRoot = list._root;\n\n  // New origin might need creating a higher root.\n  var offsetShift = 0;\n  while (newOrigin + offsetShift < 0) {\n    newRoot = new VNode(\n      newRoot && newRoot.array.length ? [undefined, newRoot] : [],\n      owner\n    );\n    newLevel += SHIFT;\n    offsetShift += 1 << newLevel;\n  }\n  if (offsetShift) {\n    newOrigin += offsetShift;\n    oldOrigin += offsetShift;\n    newCapacity += offsetShift;\n    oldCapacity += offsetShift;\n  }\n\n  var oldTailOffset = getTailOffset(oldCapacity);\n  var newTailOffset = getTailOffset(newCapacity);\n\n  // New size might need creating a higher root.\n  while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n    newRoot = new VNode(\n      newRoot && newRoot.array.length ? [newRoot] : [],\n      owner\n    );\n    newLevel += SHIFT;\n  }\n\n  // Locate or create the new tail.\n  var oldTail = list._tail;\n  var newTail =\n    newTailOffset < oldTailOffset\n      ? listNodeFor(list, newCapacity - 1)\n      : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\n  // Merge Tail into tree.\n  if (\n    oldTail &&\n    newTailOffset > oldTailOffset &&\n    newOrigin < oldCapacity &&\n    oldTail.array.length\n  ) {\n    newRoot = editableVNode(newRoot, owner);\n    var node = newRoot;\n    for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n      var idx = (oldTailOffset >>> level) & MASK;\n      node = node.array[idx] = editableVNode(node.array[idx], owner);\n    }\n    node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n  }\n\n  // If the size has been reduced, there's a chance the tail needs to be trimmed.\n  if (newCapacity < oldCapacity) {\n    newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n  }\n\n  // If the new origin is within the tail, then we do not need a root.\n  if (newOrigin >= newTailOffset) {\n    newOrigin -= newTailOffset;\n    newCapacity -= newTailOffset;\n    newLevel = SHIFT;\n    newRoot = null;\n    newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n  } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n    offsetShift = 0;\n\n    // Identify the new top root node of the subtree of the old root.\n    while (newRoot) {\n      var beginIndex = (newOrigin >>> newLevel) & MASK;\n      if ((beginIndex !== newTailOffset >>> newLevel) & MASK) {\n        break;\n      }\n      if (beginIndex) {\n        offsetShift += (1 << newLevel) * beginIndex;\n      }\n      newLevel -= SHIFT;\n      newRoot = newRoot.array[beginIndex];\n    }\n\n    // Trim the new sides of the new root.\n    if (newRoot && newOrigin > oldOrigin) {\n      newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n    }\n    if (newRoot && newTailOffset < oldTailOffset) {\n      newRoot = newRoot.removeAfter(\n        owner,\n        newLevel,\n        newTailOffset - offsetShift\n      );\n    }\n    if (offsetShift) {\n      newOrigin -= offsetShift;\n      newCapacity -= offsetShift;\n    }\n  }\n\n  if (list.__ownerID) {\n    list.size = newCapacity - newOrigin;\n    list._origin = newOrigin;\n    list._capacity = newCapacity;\n    list._level = newLevel;\n    list._root = newRoot;\n    list._tail = newTail;\n    list.__hash = undefined;\n    list.__altered = true;\n    return list;\n  }\n  return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n}\n\nfunction getTailOffset(size) {\n  return size < SIZE ? 0 : ((size - 1) >>> SHIFT) << SHIFT;\n}\n\nvar OrderedMap = (function (Map$$1) {\n  function OrderedMap(value) {\n    return value === null || value === undefined\n      ? emptyOrderedMap()\n      : isOrderedMap(value)\n        ? value\n        : emptyOrderedMap().withMutations(function (map) {\n            var iter = KeyedCollection(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function (v, k) { return map.set(k, v); });\n          });\n  }\n\n  if ( Map$$1 ) OrderedMap.__proto__ = Map$$1;\n  OrderedMap.prototype = Object.create( Map$$1 && Map$$1.prototype );\n  OrderedMap.prototype.constructor = OrderedMap;\n\n  OrderedMap.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  OrderedMap.prototype.toString = function toString () {\n    return this.__toString('OrderedMap {', '}');\n  };\n\n  // @pragma Access\n\n  OrderedMap.prototype.get = function get (k, notSetValue) {\n    var index = this._map.get(k);\n    return index !== undefined ? this._list.get(index)[1] : notSetValue;\n  };\n\n  // @pragma Modification\n\n  OrderedMap.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._map.clear();\n      this._list.clear();\n      return this;\n    }\n    return emptyOrderedMap();\n  };\n\n  OrderedMap.prototype.set = function set (k, v) {\n    return updateOrderedMap(this, k, v);\n  };\n\n  OrderedMap.prototype.remove = function remove (k) {\n    return updateOrderedMap(this, k, NOT_SET);\n  };\n\n  OrderedMap.prototype.wasAltered = function wasAltered () {\n    return this._map.wasAltered() || this._list.wasAltered();\n  };\n\n  OrderedMap.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    return this._list.__iterate(\n      function (entry) { return entry && fn(entry[1], entry[0], this$1); },\n      reverse\n    );\n  };\n\n  OrderedMap.prototype.__iterator = function __iterator (type, reverse) {\n    return this._list.fromEntrySeq().__iterator(type, reverse);\n  };\n\n  OrderedMap.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    var newMap = this._map.__ensureOwner(ownerID);\n    var newList = this._list.__ensureOwner(ownerID);\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyOrderedMap();\n      }\n      this.__ownerID = ownerID;\n      this._map = newMap;\n      this._list = newList;\n      return this;\n    }\n    return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n  };\n\n  return OrderedMap;\n}(Map));\n\nfunction isOrderedMap(maybeOrderedMap) {\n  return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n}\n\nOrderedMap.isOrderedMap = isOrderedMap;\n\nOrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\nOrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\nfunction makeOrderedMap(map, list, ownerID, hash) {\n  var omap = Object.create(OrderedMap.prototype);\n  omap.size = map ? map.size : 0;\n  omap._map = map;\n  omap._list = list;\n  omap.__ownerID = ownerID;\n  omap.__hash = hash;\n  return omap;\n}\n\nvar EMPTY_ORDERED_MAP;\nfunction emptyOrderedMap() {\n  return (\n    EMPTY_ORDERED_MAP ||\n    (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()))\n  );\n}\n\nfunction updateOrderedMap(omap, k, v) {\n  var map = omap._map;\n  var list = omap._list;\n  var i = map.get(k);\n  var has = i !== undefined;\n  var newMap;\n  var newList;\n  if (v === NOT_SET) {\n    // removed\n    if (!has) {\n      return omap;\n    }\n    if (list.size >= SIZE && list.size >= map.size * 2) {\n      newList = list.filter(function (entry, idx) { return entry !== undefined && i !== idx; });\n      newMap = newList\n        .toKeyedSeq()\n        .map(function (entry) { return entry[0]; })\n        .flip()\n        .toMap();\n      if (omap.__ownerID) {\n        newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n      }\n    } else {\n      newMap = map.remove(k);\n      newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n    }\n  } else if (has) {\n    if (v === list.get(i)[1]) {\n      return omap;\n    }\n    newMap = map;\n    newList = list.set(i, [k, v]);\n  } else {\n    newMap = map.set(k, list.size);\n    newList = list.set(list.size, [k, v]);\n  }\n  if (omap.__ownerID) {\n    omap.size = newMap.size;\n    omap._map = newMap;\n    omap._list = newList;\n    omap.__hash = undefined;\n    return omap;\n  }\n  return makeOrderedMap(newMap, newList);\n}\n\nvar Stack = (function (IndexedCollection$$1) {\n  function Stack(value) {\n    return value === null || value === undefined\n      ? emptyStack()\n      : isStack(value) ? value : emptyStack().pushAll(value);\n  }\n\n  if ( IndexedCollection$$1 ) Stack.__proto__ = IndexedCollection$$1;\n  Stack.prototype = Object.create( IndexedCollection$$1 && IndexedCollection$$1.prototype );\n  Stack.prototype.constructor = Stack;\n\n  Stack.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  Stack.prototype.toString = function toString () {\n    return this.__toString('Stack [', ']');\n  };\n\n  // @pragma Access\n\n  Stack.prototype.get = function get (index, notSetValue) {\n    var head = this._head;\n    index = wrapIndex(this, index);\n    while (head && index--) {\n      head = head.next;\n    }\n    return head ? head.value : notSetValue;\n  };\n\n  Stack.prototype.peek = function peek () {\n    return this._head && this._head.value;\n  };\n\n  // @pragma Modification\n\n  Stack.prototype.push = function push (/*...values*/) {\n    var arguments$1 = arguments;\n\n    if (arguments.length === 0) {\n      return this;\n    }\n    var newSize = this.size + arguments.length;\n    var head = this._head;\n    for (var ii = arguments.length - 1; ii >= 0; ii--) {\n      head = {\n        value: arguments$1[ii],\n        next: head\n      };\n    }\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  Stack.prototype.pushAll = function pushAll (iter) {\n    iter = IndexedCollection$$1(iter);\n    if (iter.size === 0) {\n      return this;\n    }\n    if (this.size === 0 && isStack(iter)) {\n      return iter;\n    }\n    assertNotInfinite(iter.size);\n    var newSize = this.size;\n    var head = this._head;\n    iter.__iterate(function (value) {\n      newSize++;\n      head = {\n        value: value,\n        next: head\n      };\n    }, /* reverse */ true);\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  Stack.prototype.pop = function pop () {\n    return this.slice(1);\n  };\n\n  Stack.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._head = undefined;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyStack();\n  };\n\n  Stack.prototype.slice = function slice (begin, end) {\n    if (wholeSlice(begin, end, this.size)) {\n      return this;\n    }\n    var resolvedBegin = resolveBegin(begin, this.size);\n    var resolvedEnd = resolveEnd(end, this.size);\n    if (resolvedEnd !== this.size) {\n      // super.slice(begin, end);\n      return IndexedCollection$$1.prototype.slice.call(this, begin, end);\n    }\n    var newSize = this.size - resolvedBegin;\n    var head = this._head;\n    while (resolvedBegin--) {\n      head = head.next;\n    }\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  // @pragma Mutability\n\n  Stack.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyStack();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeStack(this.size, this._head, ownerID, this.__hash);\n  };\n\n  // @pragma Iteration\n\n  Stack.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return new ArraySeq(this.toArray()).__iterate(\n        function (v, k) { return fn(v, k, this$1); },\n        reverse\n      );\n    }\n    var iterations = 0;\n    var node = this._head;\n    while (node) {\n      if (fn(node.value, iterations++, this$1) === false) {\n        break;\n      }\n      node = node.next;\n    }\n    return iterations;\n  };\n\n  Stack.prototype.__iterator = function __iterator (type, reverse) {\n    if (reverse) {\n      return new ArraySeq(this.toArray()).__iterator(type, reverse);\n    }\n    var iterations = 0;\n    var node = this._head;\n    return new Iterator(function () {\n      if (node) {\n        var value = node.value;\n        node = node.next;\n        return iteratorValue(type, iterations++, value);\n      }\n      return iteratorDone();\n    });\n  };\n\n  return Stack;\n}(IndexedCollection));\n\nfunction isStack(maybeStack) {\n  return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n}\n\nStack.isStack = isStack;\n\nvar IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\nvar StackPrototype = Stack.prototype;\nStackPrototype[IS_STACK_SENTINEL] = true;\nStackPrototype.shift = StackPrototype.pop;\nStackPrototype.unshift = StackPrototype.push;\nStackPrototype.unshiftAll = StackPrototype.pushAll;\nStackPrototype.withMutations = withMutations;\nStackPrototype.wasAltered = wasAltered;\nStackPrototype.asImmutable = asImmutable;\nStackPrototype['@@transducer/init'] = StackPrototype.asMutable = asMutable;\nStackPrototype['@@transducer/step'] = function(result, arr) {\n  return result.unshift(arr);\n};\nStackPrototype['@@transducer/result'] = function(obj) {\n  return obj.asImmutable();\n};\n\nfunction makeStack(size, head, ownerID, hash) {\n  var map = Object.create(StackPrototype);\n  map.size = size;\n  map._head = head;\n  map.__ownerID = ownerID;\n  map.__hash = hash;\n  map.__altered = false;\n  return map;\n}\n\nvar EMPTY_STACK;\nfunction emptyStack() {\n  return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n}\n\nfunction deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (\n    !isCollection(b) ||\n    (a.size !== undefined && b.size !== undefined && a.size !== b.size) ||\n    (a.__hash !== undefined &&\n      b.__hash !== undefined &&\n      a.__hash !== b.__hash) ||\n    isKeyed(a) !== isKeyed(b) ||\n    isIndexed(a) !== isIndexed(b) ||\n    isOrdered(a) !== isOrdered(b)\n  ) {\n    return false;\n  }\n\n  if (a.size === 0 && b.size === 0) {\n    return true;\n  }\n\n  var notAssociative = !isAssociative(a);\n\n  if (isOrdered(a)) {\n    var entries = a.entries();\n    return (\n      b.every(function (v, k) {\n        var entry = entries.next().value;\n        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n      }) && entries.next().done\n    );\n  }\n\n  var flipped = false;\n\n  if (a.size === undefined) {\n    if (b.size === undefined) {\n      if (typeof a.cacheResult === 'function') {\n        a.cacheResult();\n      }\n    } else {\n      flipped = true;\n      var _ = a;\n      a = b;\n      b = _;\n    }\n  }\n\n  var allEqual = true;\n  var bSize = b.__iterate(function (v, k) {\n    if (\n      notAssociative\n        ? !a.has(v)\n        : flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)\n    ) {\n      allEqual = false;\n      return false;\n    }\n  });\n\n  return allEqual && a.size === bSize;\n}\n\n/**\n * Contributes additional methods to a constructor\n */\nfunction mixin(ctor, methods) {\n  var keyCopier = function (key) {\n    ctor.prototype[key] = methods[key];\n  };\n  Object.keys(methods).forEach(keyCopier);\n  Object.getOwnPropertySymbols &&\n    Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n  return ctor;\n}\n\nfunction toJS(value) {\n  return isDataStructure(value)\n    ? Seq(value)\n        .map(toJS)\n        .toJSON()\n    : value;\n}\n\nvar Set = (function (SetCollection$$1) {\n  function Set(value) {\n    return value === null || value === undefined\n      ? emptySet()\n      : isSet(value) && !isOrdered(value)\n        ? value\n        : emptySet().withMutations(function (set) {\n            var iter = SetCollection$$1(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function (v) { return set.add(v); });\n          });\n  }\n\n  if ( SetCollection$$1 ) Set.__proto__ = SetCollection$$1;\n  Set.prototype = Object.create( SetCollection$$1 && SetCollection$$1.prototype );\n  Set.prototype.constructor = Set;\n\n  Set.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  Set.fromKeys = function fromKeys (value) {\n    return this(KeyedCollection(value).keySeq());\n  };\n\n  Set.intersect = function intersect (sets) {\n    sets = Collection(sets).toArray();\n    return sets.length\n      ? SetPrototype.intersect.apply(Set(sets.pop()), sets)\n      : emptySet();\n  };\n\n  Set.union = function union (sets) {\n    sets = Collection(sets).toArray();\n    return sets.length\n      ? SetPrototype.union.apply(Set(sets.pop()), sets)\n      : emptySet();\n  };\n\n  Set.prototype.toString = function toString () {\n    return this.__toString('Set {', '}');\n  };\n\n  // @pragma Access\n\n  Set.prototype.has = function has (value) {\n    return this._map.has(value);\n  };\n\n  // @pragma Modification\n\n  Set.prototype.add = function add (value) {\n    return updateSet(this, this._map.set(value, value));\n  };\n\n  Set.prototype.remove = function remove (value) {\n    return updateSet(this, this._map.remove(value));\n  };\n\n  Set.prototype.clear = function clear () {\n    return updateSet(this, this._map.clear());\n  };\n\n  // @pragma Composition\n\n  Set.prototype.union = function union () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    iters = iters.filter(function (x) { return x.size !== 0; });\n    if (iters.length === 0) {\n      return this;\n    }\n    if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n      return this.constructor(iters[0]);\n    }\n    return this.withMutations(function (set) {\n      for (var ii = 0; ii < iters.length; ii++) {\n        SetCollection$$1(iters[ii]).forEach(function (value) { return set.add(value); });\n      }\n    });\n  };\n\n  Set.prototype.intersect = function intersect () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    if (iters.length === 0) {\n      return this;\n    }\n    iters = iters.map(function (iter) { return SetCollection$$1(iter); });\n    var toRemove = [];\n    this.forEach(function (value) {\n      if (!iters.every(function (iter) { return iter.includes(value); })) {\n        toRemove.push(value);\n      }\n    });\n    return this.withMutations(function (set) {\n      toRemove.forEach(function (value) {\n        set.remove(value);\n      });\n    });\n  };\n\n  Set.prototype.subtract = function subtract () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    if (iters.length === 0) {\n      return this;\n    }\n    iters = iters.map(function (iter) { return SetCollection$$1(iter); });\n    var toRemove = [];\n    this.forEach(function (value) {\n      if (iters.some(function (iter) { return iter.includes(value); })) {\n        toRemove.push(value);\n      }\n    });\n    return this.withMutations(function (set) {\n      toRemove.forEach(function (value) {\n        set.remove(value);\n      });\n    });\n  };\n\n  Set.prototype.sort = function sort (comparator) {\n    // Late binding\n    return OrderedSet(sortFactory(this, comparator));\n  };\n\n  Set.prototype.sortBy = function sortBy (mapper, comparator) {\n    // Late binding\n    return OrderedSet(sortFactory(this, comparator, mapper));\n  };\n\n  Set.prototype.wasAltered = function wasAltered () {\n    return this._map.wasAltered();\n  };\n\n  Set.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    return this._map.__iterate(function (k) { return fn(k, k, this$1); }, reverse);\n  };\n\n  Set.prototype.__iterator = function __iterator (type, reverse) {\n    return this._map.__iterator(type, reverse);\n  };\n\n  Set.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    var newMap = this._map.__ensureOwner(ownerID);\n    if (!ownerID) {\n      if (this.size === 0) {\n        return this.__empty();\n      }\n      this.__ownerID = ownerID;\n      this._map = newMap;\n      return this;\n    }\n    return this.__make(newMap, ownerID);\n  };\n\n  return Set;\n}(SetCollection));\n\nfunction isSet(maybeSet) {\n  return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n}\n\nSet.isSet = isSet;\n\nvar IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\nvar SetPrototype = Set.prototype;\nSetPrototype[IS_SET_SENTINEL] = true;\nSetPrototype[DELETE] = SetPrototype.remove;\nSetPrototype.merge = SetPrototype.concat = SetPrototype.union;\nSetPrototype.withMutations = withMutations;\nSetPrototype.asImmutable = asImmutable;\nSetPrototype['@@transducer/init'] = SetPrototype.asMutable = asMutable;\nSetPrototype['@@transducer/step'] = function(result, arr) {\n  return result.add(arr);\n};\nSetPrototype['@@transducer/result'] = function(obj) {\n  return obj.asImmutable();\n};\n\nSetPrototype.__empty = emptySet;\nSetPrototype.__make = makeSet;\n\nfunction updateSet(set, newMap) {\n  if (set.__ownerID) {\n    set.size = newMap.size;\n    set._map = newMap;\n    return set;\n  }\n  return newMap === set._map\n    ? set\n    : newMap.size === 0 ? set.__empty() : set.__make(newMap);\n}\n\nfunction makeSet(map, ownerID) {\n  var set = Object.create(SetPrototype);\n  set.size = map ? map.size : 0;\n  set._map = map;\n  set.__ownerID = ownerID;\n  return set;\n}\n\nvar EMPTY_SET;\nfunction emptySet() {\n  return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n}\n\n/**\n * Returns a lazy seq of nums from start (inclusive) to end\n * (exclusive), by step, where start defaults to 0, step to 1, and end to\n * infinity. When start is equal to end, returns empty list.\n */\nvar Range = (function (IndexedSeq$$1) {\n  function Range(start, end, step) {\n    if (!(this instanceof Range)) {\n      return new Range(start, end, step);\n    }\n    invariant(step !== 0, 'Cannot step a Range by 0');\n    start = start || 0;\n    if (end === undefined) {\n      end = Infinity;\n    }\n    step = step === undefined ? 1 : Math.abs(step);\n    if (end < start) {\n      step = -step;\n    }\n    this._start = start;\n    this._end = end;\n    this._step = step;\n    this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n    if (this.size === 0) {\n      if (EMPTY_RANGE) {\n        return EMPTY_RANGE;\n      }\n      EMPTY_RANGE = this;\n    }\n  }\n\n  if ( IndexedSeq$$1 ) Range.__proto__ = IndexedSeq$$1;\n  Range.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );\n  Range.prototype.constructor = Range;\n\n  Range.prototype.toString = function toString () {\n    if (this.size === 0) {\n      return 'Range []';\n    }\n    return (\n      'Range [ ' +\n      this._start +\n      '...' +\n      this._end +\n      (this._step !== 1 ? ' by ' + this._step : '') +\n      ' ]'\n    );\n  };\n\n  Range.prototype.get = function get (index, notSetValue) {\n    return this.has(index)\n      ? this._start + wrapIndex(this, index) * this._step\n      : notSetValue;\n  };\n\n  Range.prototype.includes = function includes (searchValue) {\n    var possibleIndex = (searchValue - this._start) / this._step;\n    return (\n      possibleIndex >= 0 &&\n      possibleIndex < this.size &&\n      possibleIndex === Math.floor(possibleIndex)\n    );\n  };\n\n  Range.prototype.slice = function slice (begin, end) {\n    if (wholeSlice(begin, end, this.size)) {\n      return this;\n    }\n    begin = resolveBegin(begin, this.size);\n    end = resolveEnd(end, this.size);\n    if (end <= begin) {\n      return new Range(0, 0);\n    }\n    return new Range(\n      this.get(begin, this._end),\n      this.get(end, this._end),\n      this._step\n    );\n  };\n\n  Range.prototype.indexOf = function indexOf (searchValue) {\n    var offsetValue = searchValue - this._start;\n    if (offsetValue % this._step === 0) {\n      var index = offsetValue / this._step;\n      if (index >= 0 && index < this.size) {\n        return index;\n      }\n    }\n    return -1;\n  };\n\n  Range.prototype.lastIndexOf = function lastIndexOf (searchValue) {\n    return this.indexOf(searchValue);\n  };\n\n  Range.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var size = this.size;\n    var step = this._step;\n    var value = reverse ? this._start + (size - 1) * step : this._start;\n    var i = 0;\n    while (i !== size) {\n      if (fn(value, reverse ? size - ++i : i++, this$1) === false) {\n        break;\n      }\n      value += reverse ? -step : step;\n    }\n    return i;\n  };\n\n  Range.prototype.__iterator = function __iterator (type, reverse) {\n    var size = this.size;\n    var step = this._step;\n    var value = reverse ? this._start + (size - 1) * step : this._start;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var v = value;\n      value += reverse ? -step : step;\n      return iteratorValue(type, reverse ? size - ++i : i++, v);\n    });\n  };\n\n  Range.prototype.equals = function equals (other) {\n    return other instanceof Range\n      ? this._start === other._start &&\n          this._end === other._end &&\n          this._step === other._step\n      : deepEqual(this, other);\n  };\n\n  return Range;\n}(IndexedSeq));\n\nvar EMPTY_RANGE;\n\nfunction getIn$1(collection, searchKeyPath, notSetValue) {\n  var keyPath = coerceKeyPath(searchKeyPath);\n  var i = 0;\n  while (i !== keyPath.length) {\n    collection = get(collection, keyPath[i++], NOT_SET);\n    if (collection === NOT_SET) {\n      return notSetValue;\n    }\n  }\n  return collection;\n}\n\nfunction getIn$$1(searchKeyPath, notSetValue) {\n  return getIn$1(this, searchKeyPath, notSetValue);\n}\n\nfunction hasIn$1(collection, keyPath) {\n  return getIn$1(collection, keyPath, NOT_SET) !== NOT_SET;\n}\n\nfunction hasIn$$1(searchKeyPath) {\n  return hasIn$1(this, searchKeyPath);\n}\n\nfunction toObject() {\n  assertNotInfinite(this.size);\n  var object = {};\n  this.__iterate(function (v, k) {\n    object[k] = v;\n  });\n  return object;\n}\n\n// Note: all of these methods are deprecated.\nCollection.isIterable = isCollection;\nCollection.isKeyed = isKeyed;\nCollection.isIndexed = isIndexed;\nCollection.isAssociative = isAssociative;\nCollection.isOrdered = isOrdered;\n\nCollection.Iterator = Iterator;\n\nmixin(Collection, {\n  // ### Conversion to other types\n\n  toArray: function toArray() {\n    assertNotInfinite(this.size);\n    var array = new Array(this.size || 0);\n    var useTuples = isKeyed(this);\n    var i = 0;\n    this.__iterate(function (v, k) {\n      // Keyed collections produce an array of tuples.\n      array[i++] = useTuples ? [k, v] : v;\n    });\n    return array;\n  },\n\n  toIndexedSeq: function toIndexedSeq() {\n    return new ToIndexedSequence(this);\n  },\n\n  toJS: function toJS$1() {\n    return toJS(this);\n  },\n\n  toKeyedSeq: function toKeyedSeq() {\n    return new ToKeyedSequence(this, true);\n  },\n\n  toMap: function toMap() {\n    // Use Late Binding here to solve the circular dependency.\n    return Map(this.toKeyedSeq());\n  },\n\n  toObject: toObject,\n\n  toOrderedMap: function toOrderedMap() {\n    // Use Late Binding here to solve the circular dependency.\n    return OrderedMap(this.toKeyedSeq());\n  },\n\n  toOrderedSet: function toOrderedSet() {\n    // Use Late Binding here to solve the circular dependency.\n    return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toSet: function toSet() {\n    // Use Late Binding here to solve the circular dependency.\n    return Set(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toSetSeq: function toSetSeq() {\n    return new ToSetSequence(this);\n  },\n\n  toSeq: function toSeq() {\n    return isIndexed(this)\n      ? this.toIndexedSeq()\n      : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();\n  },\n\n  toStack: function toStack() {\n    // Use Late Binding here to solve the circular dependency.\n    return Stack(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toList: function toList() {\n    // Use Late Binding here to solve the circular dependency.\n    return List(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  // ### Common JavaScript methods and properties\n\n  toString: function toString() {\n    return '[Collection]';\n  },\n\n  __toString: function __toString(head, tail) {\n    if (this.size === 0) {\n      return head + tail;\n    }\n    return (\n      head +\n      ' ' +\n      this.toSeq()\n        .map(this.__toStringMapper)\n        .join(', ') +\n      ' ' +\n      tail\n    );\n  },\n\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  concat: function concat() {\n    var values = [], len = arguments.length;\n    while ( len-- ) values[ len ] = arguments[ len ];\n\n    return reify(this, concatFactory(this, values));\n  },\n\n  includes: function includes(searchValue) {\n    return this.some(function (value) { return is(value, searchValue); });\n  },\n\n  entries: function entries() {\n    return this.__iterator(ITERATE_ENTRIES);\n  },\n\n  every: function every(predicate, context) {\n    assertNotInfinite(this.size);\n    var returnValue = true;\n    this.__iterate(function (v, k, c) {\n      if (!predicate.call(context, v, k, c)) {\n        returnValue = false;\n        return false;\n      }\n    });\n    return returnValue;\n  },\n\n  filter: function filter(predicate, context) {\n    return reify(this, filterFactory(this, predicate, context, true));\n  },\n\n  find: function find(predicate, context, notSetValue) {\n    var entry = this.findEntry(predicate, context);\n    return entry ? entry[1] : notSetValue;\n  },\n\n  forEach: function forEach(sideEffect, context) {\n    assertNotInfinite(this.size);\n    return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n  },\n\n  join: function join(separator) {\n    assertNotInfinite(this.size);\n    separator = separator !== undefined ? '' + separator : ',';\n    var joined = '';\n    var isFirst = true;\n    this.__iterate(function (v) {\n      isFirst ? (isFirst = false) : (joined += separator);\n      joined += v !== null && v !== undefined ? v.toString() : '';\n    });\n    return joined;\n  },\n\n  keys: function keys() {\n    return this.__iterator(ITERATE_KEYS);\n  },\n\n  map: function map(mapper, context) {\n    return reify(this, mapFactory(this, mapper, context));\n  },\n\n  reduce: function reduce$1(reducer, initialReduction, context) {\n    return reduce(\n      this,\n      reducer,\n      initialReduction,\n      context,\n      arguments.length < 2,\n      false\n    );\n  },\n\n  reduceRight: function reduceRight(reducer, initialReduction, context) {\n    return reduce(\n      this,\n      reducer,\n      initialReduction,\n      context,\n      arguments.length < 2,\n      true\n    );\n  },\n\n  reverse: function reverse() {\n    return reify(this, reverseFactory(this, true));\n  },\n\n  slice: function slice(begin, end) {\n    return reify(this, sliceFactory(this, begin, end, true));\n  },\n\n  some: function some(predicate, context) {\n    return !this.every(not(predicate), context);\n  },\n\n  sort: function sort(comparator) {\n    return reify(this, sortFactory(this, comparator));\n  },\n\n  values: function values() {\n    return this.__iterator(ITERATE_VALUES);\n  },\n\n  // ### More sequential methods\n\n  butLast: function butLast() {\n    return this.slice(0, -1);\n  },\n\n  isEmpty: function isEmpty() {\n    return this.size !== undefined ? this.size === 0 : !this.some(function () { return true; });\n  },\n\n  count: function count(predicate, context) {\n    return ensureSize(\n      predicate ? this.toSeq().filter(predicate, context) : this\n    );\n  },\n\n  countBy: function countBy(grouper, context) {\n    return countByFactory(this, grouper, context);\n  },\n\n  equals: function equals(other) {\n    return deepEqual(this, other);\n  },\n\n  entrySeq: function entrySeq() {\n    var collection = this;\n    if (collection._cache) {\n      // We cache as an entries array, so we can just return the cache!\n      return new ArraySeq(collection._cache);\n    }\n    var entriesSequence = collection\n      .toSeq()\n      .map(entryMapper)\n      .toIndexedSeq();\n    entriesSequence.fromEntrySeq = function () { return collection.toSeq(); };\n    return entriesSequence;\n  },\n\n  filterNot: function filterNot(predicate, context) {\n    return this.filter(not(predicate), context);\n  },\n\n  findEntry: function findEntry(predicate, context, notSetValue) {\n    var found = notSetValue;\n    this.__iterate(function (v, k, c) {\n      if (predicate.call(context, v, k, c)) {\n        found = [k, v];\n        return false;\n      }\n    });\n    return found;\n  },\n\n  findKey: function findKey(predicate, context) {\n    var entry = this.findEntry(predicate, context);\n    return entry && entry[0];\n  },\n\n  findLast: function findLast(predicate, context, notSetValue) {\n    return this.toKeyedSeq()\n      .reverse()\n      .find(predicate, context, notSetValue);\n  },\n\n  findLastEntry: function findLastEntry(predicate, context, notSetValue) {\n    return this.toKeyedSeq()\n      .reverse()\n      .findEntry(predicate, context, notSetValue);\n  },\n\n  findLastKey: function findLastKey(predicate, context) {\n    return this.toKeyedSeq()\n      .reverse()\n      .findKey(predicate, context);\n  },\n\n  first: function first() {\n    return this.find(returnTrue);\n  },\n\n  flatMap: function flatMap(mapper, context) {\n    return reify(this, flatMapFactory(this, mapper, context));\n  },\n\n  flatten: function flatten(depth) {\n    return reify(this, flattenFactory(this, depth, true));\n  },\n\n  fromEntrySeq: function fromEntrySeq() {\n    return new FromEntriesSequence(this);\n  },\n\n  get: function get(searchKey, notSetValue) {\n    return this.find(function (_, key) { return is(key, searchKey); }, undefined, notSetValue);\n  },\n\n  getIn: getIn$$1,\n\n  groupBy: function groupBy(grouper, context) {\n    return groupByFactory(this, grouper, context);\n  },\n\n  has: function has(searchKey) {\n    return this.get(searchKey, NOT_SET) !== NOT_SET;\n  },\n\n  hasIn: hasIn$$1,\n\n  isSubset: function isSubset(iter) {\n    iter = typeof iter.includes === 'function' ? iter : Collection(iter);\n    return this.every(function (value) { return iter.includes(value); });\n  },\n\n  isSuperset: function isSuperset(iter) {\n    iter = typeof iter.isSubset === 'function' ? iter : Collection(iter);\n    return iter.isSubset(this);\n  },\n\n  keyOf: function keyOf(searchValue) {\n    return this.findKey(function (value) { return is(value, searchValue); });\n  },\n\n  keySeq: function keySeq() {\n    return this.toSeq()\n      .map(keyMapper)\n      .toIndexedSeq();\n  },\n\n  last: function last() {\n    return this.toSeq()\n      .reverse()\n      .first();\n  },\n\n  lastKeyOf: function lastKeyOf(searchValue) {\n    return this.toKeyedSeq()\n      .reverse()\n      .keyOf(searchValue);\n  },\n\n  max: function max(comparator) {\n    return maxFactory(this, comparator);\n  },\n\n  maxBy: function maxBy(mapper, comparator) {\n    return maxFactory(this, comparator, mapper);\n  },\n\n  min: function min(comparator) {\n    return maxFactory(\n      this,\n      comparator ? neg(comparator) : defaultNegComparator\n    );\n  },\n\n  minBy: function minBy(mapper, comparator) {\n    return maxFactory(\n      this,\n      comparator ? neg(comparator) : defaultNegComparator,\n      mapper\n    );\n  },\n\n  rest: function rest() {\n    return this.slice(1);\n  },\n\n  skip: function skip(amount) {\n    return amount === 0 ? this : this.slice(Math.max(0, amount));\n  },\n\n  skipLast: function skipLast(amount) {\n    return amount === 0 ? this : this.slice(0, -Math.max(0, amount));\n  },\n\n  skipWhile: function skipWhile(predicate, context) {\n    return reify(this, skipWhileFactory(this, predicate, context, true));\n  },\n\n  skipUntil: function skipUntil(predicate, context) {\n    return this.skipWhile(not(predicate), context);\n  },\n\n  sortBy: function sortBy(mapper, comparator) {\n    return reify(this, sortFactory(this, comparator, mapper));\n  },\n\n  take: function take(amount) {\n    return this.slice(0, Math.max(0, amount));\n  },\n\n  takeLast: function takeLast(amount) {\n    return this.slice(-Math.max(0, amount));\n  },\n\n  takeWhile: function takeWhile(predicate, context) {\n    return reify(this, takeWhileFactory(this, predicate, context));\n  },\n\n  takeUntil: function takeUntil(predicate, context) {\n    return this.takeWhile(not(predicate), context);\n  },\n\n  update: function update(fn) {\n    return fn(this);\n  },\n\n  valueSeq: function valueSeq() {\n    return this.toIndexedSeq();\n  },\n\n  // ### Hashable Object\n\n  hashCode: function hashCode() {\n    return this.__hash || (this.__hash = hashCollection(this));\n  }\n\n  // ### Internal\n\n  // abstract __iterate(fn, reverse)\n\n  // abstract __iterator(type, reverse)\n});\n\nvar CollectionPrototype = Collection.prototype;\nCollectionPrototype[IS_ITERABLE_SENTINEL] = true;\nCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.values;\nCollectionPrototype.toJSON = CollectionPrototype.toArray;\nCollectionPrototype.__toStringMapper = quoteString;\nCollectionPrototype.inspect = CollectionPrototype.toSource = function() {\n  return this.toString();\n};\nCollectionPrototype.chain = CollectionPrototype.flatMap;\nCollectionPrototype.contains = CollectionPrototype.includes;\n\nmixin(KeyedCollection, {\n  // ### More sequential methods\n\n  flip: function flip() {\n    return reify(this, flipFactory(this));\n  },\n\n  mapEntries: function mapEntries(mapper, context) {\n    var this$1 = this;\n\n    var iterations = 0;\n    return reify(\n      this,\n      this.toSeq()\n        .map(function (v, k) { return mapper.call(context, [k, v], iterations++, this$1); })\n        .fromEntrySeq()\n    );\n  },\n\n  mapKeys: function mapKeys(mapper, context) {\n    var this$1 = this;\n\n    return reify(\n      this,\n      this.toSeq()\n        .flip()\n        .map(function (k, v) { return mapper.call(context, k, v, this$1); })\n        .flip()\n    );\n  }\n});\n\nvar KeyedCollectionPrototype = KeyedCollection.prototype;\nKeyedCollectionPrototype[IS_KEYED_SENTINEL] = true;\nKeyedCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;\nKeyedCollectionPrototype.toJSON = toObject;\nKeyedCollectionPrototype.__toStringMapper = function (v, k) { return quoteString(k) + ': ' + quoteString(v); };\n\nmixin(IndexedCollection, {\n  // ### Conversion to other types\n\n  toKeyedSeq: function toKeyedSeq() {\n    return new ToKeyedSequence(this, false);\n  },\n\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  filter: function filter(predicate, context) {\n    return reify(this, filterFactory(this, predicate, context, false));\n  },\n\n  findIndex: function findIndex(predicate, context) {\n    var entry = this.findEntry(predicate, context);\n    return entry ? entry[0] : -1;\n  },\n\n  indexOf: function indexOf(searchValue) {\n    var key = this.keyOf(searchValue);\n    return key === undefined ? -1 : key;\n  },\n\n  lastIndexOf: function lastIndexOf(searchValue) {\n    var key = this.lastKeyOf(searchValue);\n    return key === undefined ? -1 : key;\n  },\n\n  reverse: function reverse() {\n    return reify(this, reverseFactory(this, false));\n  },\n\n  slice: function slice(begin, end) {\n    return reify(this, sliceFactory(this, begin, end, false));\n  },\n\n  splice: function splice(index, removeNum /*, ...values*/) {\n    var numArgs = arguments.length;\n    removeNum = Math.max(removeNum || 0, 0);\n    if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n      return this;\n    }\n    // If index is negative, it should resolve relative to the size of the\n    // collection. However size may be expensive to compute if not cached, so\n    // only call count() if the number is in fact negative.\n    index = resolveBegin(index, index < 0 ? this.count() : this.size);\n    var spliced = this.slice(0, index);\n    return reify(\n      this,\n      numArgs === 1\n        ? spliced\n        : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n    );\n  },\n\n  // ### More collection methods\n\n  findLastIndex: function findLastIndex(predicate, context) {\n    var entry = this.findLastEntry(predicate, context);\n    return entry ? entry[0] : -1;\n  },\n\n  first: function first() {\n    return this.get(0);\n  },\n\n  flatten: function flatten(depth) {\n    return reify(this, flattenFactory(this, depth, false));\n  },\n\n  get: function get(index, notSetValue) {\n    index = wrapIndex(this, index);\n    return index < 0 ||\n      (this.size === Infinity || (this.size !== undefined && index > this.size))\n      ? notSetValue\n      : this.find(function (_, key) { return key === index; }, undefined, notSetValue);\n  },\n\n  has: function has(index) {\n    index = wrapIndex(this, index);\n    return (\n      index >= 0 &&\n      (this.size !== undefined\n        ? this.size === Infinity || index < this.size\n        : this.indexOf(index) !== -1)\n    );\n  },\n\n  interpose: function interpose(separator) {\n    return reify(this, interposeFactory(this, separator));\n  },\n\n  interleave: function interleave(/*...collections*/) {\n    var collections = [this].concat(arrCopy(arguments));\n    var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, collections);\n    var interleaved = zipped.flatten(true);\n    if (zipped.size) {\n      interleaved.size = zipped.size * collections.length;\n    }\n    return reify(this, interleaved);\n  },\n\n  keySeq: function keySeq() {\n    return Range(0, this.size);\n  },\n\n  last: function last() {\n    return this.get(-1);\n  },\n\n  skipWhile: function skipWhile(predicate, context) {\n    return reify(this, skipWhileFactory(this, predicate, context, false));\n  },\n\n  zip: function zip(/*, ...collections */) {\n    var collections = [this].concat(arrCopy(arguments));\n    return reify(this, zipWithFactory(this, defaultZipper, collections));\n  },\n\n  zipAll: function zipAll(/*, ...collections */) {\n    var collections = [this].concat(arrCopy(arguments));\n    return reify(this, zipWithFactory(this, defaultZipper, collections, true));\n  },\n\n  zipWith: function zipWith(zipper /*, ...collections */) {\n    var collections = arrCopy(arguments);\n    collections[0] = this;\n    return reify(this, zipWithFactory(this, zipper, collections));\n  }\n});\n\nvar IndexedCollectionPrototype = IndexedCollection.prototype;\nIndexedCollectionPrototype[IS_INDEXED_SENTINEL] = true;\nIndexedCollectionPrototype[IS_ORDERED_SENTINEL] = true;\n\nmixin(SetCollection, {\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  get: function get(value, notSetValue) {\n    return this.has(value) ? value : notSetValue;\n  },\n\n  includes: function includes(value) {\n    return this.has(value);\n  },\n\n  // ### More sequential methods\n\n  keySeq: function keySeq() {\n    return this.valueSeq();\n  }\n});\n\nSetCollection.prototype.has = CollectionPrototype.includes;\nSetCollection.prototype.contains = SetCollection.prototype.includes;\n\n// Mixin subclasses\n\nmixin(KeyedSeq, KeyedCollection.prototype);\nmixin(IndexedSeq, IndexedCollection.prototype);\nmixin(SetSeq, SetCollection.prototype);\n\n// #pragma Helper functions\n\nfunction reduce(collection, reducer, reduction, context, useFirst, reverse) {\n  assertNotInfinite(collection.size);\n  collection.__iterate(function (v, k, c) {\n    if (useFirst) {\n      useFirst = false;\n      reduction = v;\n    } else {\n      reduction = reducer.call(context, reduction, v, k, c);\n    }\n  }, reverse);\n  return reduction;\n}\n\nfunction keyMapper(v, k) {\n  return k;\n}\n\nfunction entryMapper(v, k) {\n  return [k, v];\n}\n\nfunction not(predicate) {\n  return function() {\n    return !predicate.apply(this, arguments);\n  };\n}\n\nfunction neg(predicate) {\n  return function() {\n    return -predicate.apply(this, arguments);\n  };\n}\n\nfunction defaultZipper() {\n  return arrCopy(arguments);\n}\n\nfunction defaultNegComparator(a, b) {\n  return a < b ? 1 : a > b ? -1 : 0;\n}\n\nfunction hashCollection(collection) {\n  if (collection.size === Infinity) {\n    return 0;\n  }\n  var ordered = isOrdered(collection);\n  var keyed = isKeyed(collection);\n  var h = ordered ? 1 : 0;\n  var size = collection.__iterate(\n    keyed\n      ? ordered\n        ? function (v, k) {\n            h = (31 * h + hashMerge(hash(v), hash(k))) | 0;\n          }\n        : function (v, k) {\n            h = (h + hashMerge(hash(v), hash(k))) | 0;\n          }\n      : ordered\n        ? function (v) {\n            h = (31 * h + hash(v)) | 0;\n          }\n        : function (v) {\n            h = (h + hash(v)) | 0;\n          }\n  );\n  return murmurHashOfSize(size, h);\n}\n\nfunction murmurHashOfSize(size, h) {\n  h = imul(h, 0xcc9e2d51);\n  h = imul((h << 15) | (h >>> -15), 0x1b873593);\n  h = imul((h << 13) | (h >>> -13), 5);\n  h = ((h + 0xe6546b64) | 0) ^ size;\n  h = imul(h ^ (h >>> 16), 0x85ebca6b);\n  h = imul(h ^ (h >>> 13), 0xc2b2ae35);\n  h = smi(h ^ (h >>> 16));\n  return h;\n}\n\nfunction hashMerge(a, b) {\n  return (a ^ (b + 0x9e3779b9 + (a << 6) + (a >> 2))) | 0; // int\n}\n\nvar OrderedSet = (function (Set$$1) {\n  function OrderedSet(value) {\n    return value === null || value === undefined\n      ? emptyOrderedSet()\n      : isOrderedSet(value)\n        ? value\n        : emptyOrderedSet().withMutations(function (set) {\n            var iter = SetCollection(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function (v) { return set.add(v); });\n          });\n  }\n\n  if ( Set$$1 ) OrderedSet.__proto__ = Set$$1;\n  OrderedSet.prototype = Object.create( Set$$1 && Set$$1.prototype );\n  OrderedSet.prototype.constructor = OrderedSet;\n\n  OrderedSet.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  OrderedSet.fromKeys = function fromKeys (value) {\n    return this(KeyedCollection(value).keySeq());\n  };\n\n  OrderedSet.prototype.toString = function toString () {\n    return this.__toString('OrderedSet {', '}');\n  };\n\n  return OrderedSet;\n}(Set));\n\nfunction isOrderedSet(maybeOrderedSet) {\n  return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n}\n\nOrderedSet.isOrderedSet = isOrderedSet;\n\nvar OrderedSetPrototype = OrderedSet.prototype;\nOrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\nOrderedSetPrototype.zip = IndexedCollectionPrototype.zip;\nOrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;\n\nOrderedSetPrototype.__empty = emptyOrderedSet;\nOrderedSetPrototype.__make = makeOrderedSet;\n\nfunction makeOrderedSet(map, ownerID) {\n  var set = Object.create(OrderedSetPrototype);\n  set.size = map ? map.size : 0;\n  set._map = map;\n  set.__ownerID = ownerID;\n  return set;\n}\n\nvar EMPTY_ORDERED_SET;\nfunction emptyOrderedSet() {\n  return (\n    EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()))\n  );\n}\n\nvar Record = function Record(defaultValues, name) {\n  var hasInitialized;\n\n  var RecordType = function Record(values) {\n    var this$1 = this;\n\n    if (values instanceof RecordType) {\n      return values;\n    }\n    if (!(this instanceof RecordType)) {\n      return new RecordType(values);\n    }\n    if (!hasInitialized) {\n      hasInitialized = true;\n      var keys = Object.keys(defaultValues);\n      var indices = (RecordTypePrototype._indices = {});\n      RecordTypePrototype._name = name;\n      RecordTypePrototype._keys = keys;\n      RecordTypePrototype._defaultValues = defaultValues;\n      for (var i = 0; i < keys.length; i++) {\n        var propName = keys[i];\n        indices[propName] = i;\n        if (RecordTypePrototype[propName]) {\n          /* eslint-disable no-console */\n          typeof console === 'object' &&\n            console.warn &&\n            console.warn(\n              'Cannot define ' +\n                recordName(this$1) +\n                ' with property \"' +\n                propName +\n                '\" since that property name is part of the Record API.'\n            );\n          /* eslint-enable no-console */\n        } else {\n          setProp(RecordTypePrototype, propName);\n        }\n      }\n    }\n    this.__ownerID = undefined;\n    this._values = List().withMutations(function (l) {\n      l.setSize(this$1._keys.length);\n      KeyedCollection(values).forEach(function (v, k) {\n        l.set(this$1._indices[k], v === this$1._defaultValues[k] ? undefined : v);\n      });\n    });\n  };\n\n  var RecordTypePrototype = (RecordType.prototype = Object.create(\n    RecordPrototype\n  ));\n  RecordTypePrototype.constructor = RecordType;\n\n  return RecordType;\n};\n\nRecord.prototype.toString = function toString () {\n    var this$1 = this;\n\n  var str = recordName(this) + ' { ';\n  var keys = this._keys;\n  var k;\n  for (var i = 0, l = keys.length; i !== l; i++) {\n    k = keys[i];\n    str += (i ? ', ' : '') + k + ': ' + quoteString(this$1.get(k));\n  }\n  return str + ' }';\n};\n\nRecord.prototype.equals = function equals (other) {\n  return (\n    this === other ||\n    (other &&\n      this._keys === other._keys &&\n      recordSeq(this).equals(recordSeq(other)))\n  );\n};\n\nRecord.prototype.hashCode = function hashCode () {\n  return recordSeq(this).hashCode();\n};\n\n// @pragma Access\n\nRecord.prototype.has = function has (k) {\n  return this._indices.hasOwnProperty(k);\n};\n\nRecord.prototype.get = function get (k, notSetValue) {\n  if (!this.has(k)) {\n    return notSetValue;\n  }\n  var index = this._indices[k];\n  var value = this._values.get(index);\n  return value === undefined ? this._defaultValues[k] : value;\n};\n\n// @pragma Modification\n\nRecord.prototype.set = function set (k, v) {\n  if (this.has(k)) {\n    var newValues = this._values.set(\n      this._indices[k],\n      v === this._defaultValues[k] ? undefined : v\n    );\n    if (newValues !== this._values && !this.__ownerID) {\n      return makeRecord(this, newValues);\n    }\n  }\n  return this;\n};\n\nRecord.prototype.remove = function remove (k) {\n  return this.set(k);\n};\n\nRecord.prototype.clear = function clear () {\n  var newValues = this._values.clear().setSize(this._keys.length);\n  return this.__ownerID ? this : makeRecord(this, newValues);\n};\n\nRecord.prototype.wasAltered = function wasAltered () {\n  return this._values.wasAltered();\n};\n\nRecord.prototype.toSeq = function toSeq () {\n  return recordSeq(this);\n};\n\nRecord.prototype.toJS = function toJS$1 () {\n  return toJS(this);\n};\n\nRecord.prototype.entries = function entries () {\n  return this.__iterator(ITERATE_ENTRIES);\n};\n\nRecord.prototype.__iterator = function __iterator (type, reverse) {\n  return recordSeq(this).__iterator(type, reverse);\n};\n\nRecord.prototype.__iterate = function __iterate (fn, reverse) {\n  return recordSeq(this).__iterate(fn, reverse);\n};\n\nRecord.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n  if (ownerID === this.__ownerID) {\n    return this;\n  }\n  var newValues = this._values.__ensureOwner(ownerID);\n  if (!ownerID) {\n    this.__ownerID = ownerID;\n    this._values = newValues;\n    return this;\n  }\n  return makeRecord(this, newValues, ownerID);\n};\n\nRecord.isRecord = isRecord;\nRecord.getDescriptiveName = recordName;\nvar RecordPrototype = Record.prototype;\nRecordPrototype[IS_RECORD_SENTINEL] = true;\nRecordPrototype[DELETE] = RecordPrototype.remove;\nRecordPrototype.deleteIn = RecordPrototype.removeIn = deleteIn;\nRecordPrototype.getIn = getIn$$1;\nRecordPrototype.hasIn = CollectionPrototype.hasIn;\nRecordPrototype.merge = merge;\nRecordPrototype.mergeWith = mergeWith;\nRecordPrototype.mergeIn = mergeIn;\nRecordPrototype.mergeDeep = mergeDeep;\nRecordPrototype.mergeDeepWith = mergeDeepWith;\nRecordPrototype.mergeDeepIn = mergeDeepIn;\nRecordPrototype.setIn = setIn$$1;\nRecordPrototype.update = update$$1;\nRecordPrototype.updateIn = updateIn$1;\nRecordPrototype.withMutations = withMutations;\nRecordPrototype.asMutable = asMutable;\nRecordPrototype.asImmutable = asImmutable;\nRecordPrototype[ITERATOR_SYMBOL] = RecordPrototype.entries;\nRecordPrototype.toJSON = RecordPrototype.toObject =\n  CollectionPrototype.toObject;\nRecordPrototype.inspect = RecordPrototype.toSource = function() {\n  return this.toString();\n};\n\nfunction makeRecord(likeRecord, values, ownerID) {\n  var record = Object.create(Object.getPrototypeOf(likeRecord));\n  record._values = values;\n  record.__ownerID = ownerID;\n  return record;\n}\n\nfunction recordName(record) {\n  return record._name || record.constructor.name || 'Record';\n}\n\nfunction recordSeq(record) {\n  return keyedSeqFromValue(record._keys.map(function (k) { return [k, record.get(k)]; }));\n}\n\nfunction setProp(prototype, name) {\n  try {\n    Object.defineProperty(prototype, name, {\n      get: function() {\n        return this.get(name);\n      },\n      set: function(value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      }\n    });\n  } catch (error) {\n    // Object.defineProperty failed. Probably IE8.\n  }\n}\n\n/**\n * Returns a lazy Seq of `value` repeated `times` times. When `times` is\n * undefined, returns an infinite sequence of `value`.\n */\nvar Repeat = (function (IndexedSeq$$1) {\n  function Repeat(value, times) {\n    if (!(this instanceof Repeat)) {\n      return new Repeat(value, times);\n    }\n    this._value = value;\n    this.size = times === undefined ? Infinity : Math.max(0, times);\n    if (this.size === 0) {\n      if (EMPTY_REPEAT) {\n        return EMPTY_REPEAT;\n      }\n      EMPTY_REPEAT = this;\n    }\n  }\n\n  if ( IndexedSeq$$1 ) Repeat.__proto__ = IndexedSeq$$1;\n  Repeat.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );\n  Repeat.prototype.constructor = Repeat;\n\n  Repeat.prototype.toString = function toString () {\n    if (this.size === 0) {\n      return 'Repeat []';\n    }\n    return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n  };\n\n  Repeat.prototype.get = function get (index, notSetValue) {\n    return this.has(index) ? this._value : notSetValue;\n  };\n\n  Repeat.prototype.includes = function includes (searchValue) {\n    return is(this._value, searchValue);\n  };\n\n  Repeat.prototype.slice = function slice (begin, end) {\n    var size = this.size;\n    return wholeSlice(begin, end, size)\n      ? this\n      : new Repeat(\n          this._value,\n          resolveEnd(end, size) - resolveBegin(begin, size)\n        );\n  };\n\n  Repeat.prototype.reverse = function reverse () {\n    return this;\n  };\n\n  Repeat.prototype.indexOf = function indexOf (searchValue) {\n    if (is(this._value, searchValue)) {\n      return 0;\n    }\n    return -1;\n  };\n\n  Repeat.prototype.lastIndexOf = function lastIndexOf (searchValue) {\n    if (is(this._value, searchValue)) {\n      return this.size;\n    }\n    return -1;\n  };\n\n  Repeat.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var size = this.size;\n    var i = 0;\n    while (i !== size) {\n      if (fn(this$1._value, reverse ? size - ++i : i++, this$1) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  Repeat.prototype.__iterator = function __iterator (type, reverse) {\n    var this$1 = this;\n\n    var size = this.size;\n    var i = 0;\n    return new Iterator(\n      function () { return i === size\n          ? iteratorDone()\n          : iteratorValue(type, reverse ? size - ++i : i++, this$1._value); }\n    );\n  };\n\n  Repeat.prototype.equals = function equals (other) {\n    return other instanceof Repeat\n      ? is(this._value, other._value)\n      : deepEqual(other);\n  };\n\n  return Repeat;\n}(IndexedSeq));\n\nvar EMPTY_REPEAT;\n\nfunction fromJS(value, converter) {\n  return fromJSWith(\n    [],\n    converter || defaultConverter,\n    value,\n    '',\n    converter && converter.length > 2 ? [] : undefined,\n    { '': value }\n  );\n}\n\nfunction fromJSWith(stack, converter, value, key, keyPath, parentValue) {\n  var toSeq = Array.isArray(value)\n    ? IndexedSeq\n    : isPlainObj(value) ? KeyedSeq : null;\n  if (toSeq) {\n    if (~stack.indexOf(value)) {\n      throw new TypeError('Cannot convert circular structure to Immutable');\n    }\n    stack.push(value);\n    keyPath && key !== '' && keyPath.push(key);\n    var converted = converter.call(\n      parentValue,\n      key,\n      toSeq(value).map(function (v, k) { return fromJSWith(stack, converter, v, k, keyPath, value); }\n      ),\n      keyPath && keyPath.slice()\n    );\n    stack.pop();\n    keyPath && keyPath.pop();\n    return converted;\n  }\n  return value;\n}\n\nfunction defaultConverter(k, v) {\n  return isKeyed(v) ? v.toMap() : v.toList();\n}\n\nvar version = \"4.0.0-rc.9\";\n\n// Functional read/write API\nvar Immutable = {\n  version: version,\n\n  Collection: Collection,\n  // Note: Iterable is deprecated\n  Iterable: Collection,\n\n  Seq: Seq,\n  Map: Map,\n  OrderedMap: OrderedMap,\n  List: List,\n  Stack: Stack,\n  Set: Set,\n  OrderedSet: OrderedSet,\n\n  Record: Record,\n  Range: Range,\n  Repeat: Repeat,\n\n  is: is,\n  fromJS: fromJS,\n  hash: hash,\n\n  isImmutable: isImmutable,\n  isCollection: isCollection,\n  isKeyed: isKeyed,\n  isIndexed: isIndexed,\n  isAssociative: isAssociative,\n  isOrdered: isOrdered,\n  isValueObject: isValueObject,\n\n  get: get,\n  getIn: getIn$1,\n  has: has,\n  hasIn: hasIn$1,\n  merge: merge$1,\n  mergeDeep: mergeDeep$1,\n  mergeWith: mergeWith$1,\n  mergeDeepWith: mergeDeepWith$1,\n  remove: remove,\n  removeIn: removeIn,\n  set: set,\n  setIn: setIn$1,\n  update: update$1,\n  updateIn: updateIn\n};\n\n// Note: Iterable is deprecated\nvar Iterable = Collection;\n\nexport { version, Collection, Iterable, Seq, Map, OrderedMap, List, Stack, Set, OrderedSet, Record, Range, Repeat, is, fromJS, hash, isImmutable, isCollection, isKeyed, isIndexed, isAssociative, isOrdered, isValueObject, get, getIn$1 as getIn, has, hasIn$1 as hasIn, merge$1 as merge, mergeDeep$1 as mergeDeep, mergeWith$1 as mergeWith, mergeDeepWith$1 as mergeDeepWith, remove, removeIn, set, setIn$1 as setIn, update$1 as update, updateIn };\nexport default Immutable;\n"
        },
        {
          "id": 2,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/error.ts",
          "name": "./src/typecheck/error.ts",
          "index": 13,
          "index2": 11,
          "size": 227,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "issuerId": 12,
          "issuerName": "./src/typecheck/programs.ts",
          "issuerPath": [
            {
              "id": 19,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "name": "./src/demo/demo.ts",
              "profile": {
                "factory": 64,
                "building": 1924
              }
            },
            {
              "id": 12,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
              "name": "./src/typecheck/programs.ts",
              "profile": {
                "factory": 288,
                "building": 665,
                "dependencies": 114
              }
            }
          ],
          "profile": {
            "factory": 703,
            "building": 8,
            "dependencies": 347
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": 3,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/types.ts",
              "module": "./src/typecheck/types.ts",
              "moduleName": "./src/typecheck/types.ts",
              "type": "cjs require",
              "userRequest": "./error",
              "loc": "4:16-34"
            },
            {
              "moduleId": 5,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/expressions.ts",
              "module": "./src/typecheck/expressions.ts",
              "moduleName": "./src/typecheck/expressions.ts",
              "type": "cjs require",
              "userRequest": "./error",
              "loc": "4:16-34"
            },
            {
              "moduleId": 10,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/flow.ts",
              "module": "./src/typecheck/flow.ts",
              "moduleName": "./src/typecheck/flow.ts",
              "type": "cjs require",
              "userRequest": "./error",
              "loc": "5:16-34"
            },
            {
              "moduleId": 11,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/statements.ts",
              "module": "./src/typecheck/statements.ts",
              "moduleName": "./src/typecheck/statements.ts",
              "type": "cjs require",
              "userRequest": "./error",
              "loc": "4:16-34"
            },
            {
              "moduleId": 12,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
              "module": "./src/typecheck/programs.ts",
              "moduleName": "./src/typecheck/programs.ts",
              "type": "cjs require",
              "userRequest": "./error",
              "loc": "5:16-34"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [
            "ModuleConcatenation bailout: Module is not an ECMAScript module"
          ],
          "depth": 2,
          "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction error(s1, s2) {\n    if (s2 === undefined)\n        throw new Error(s1);\n    throw new Error(`${s1}\\n[Hint: ${s2}]`);\n}\nexports.error = error;\n"
        },
        {
          "id": 3,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/types.ts",
          "name": "./src/typecheck/types.ts",
          "index": 15,
          "index2": 13,
          "size": 11325,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "issuerId": 12,
          "issuerName": "./src/typecheck/programs.ts",
          "issuerPath": [
            {
              "id": 19,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "name": "./src/demo/demo.ts",
              "profile": {
                "factory": 64,
                "building": 1924
              }
            },
            {
              "id": 12,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
              "name": "./src/typecheck/programs.ts",
              "profile": {
                "factory": 288,
                "building": 665,
                "dependencies": 114
              }
            }
          ],
          "profile": {
            "factory": 703,
            "building": 8,
            "dependencies": 347
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": 5,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/expressions.ts",
              "module": "./src/typecheck/expressions.ts",
              "moduleName": "./src/typecheck/expressions.ts",
              "type": "cjs require",
              "userRequest": "./types",
              "loc": "6:16-34"
            },
            {
              "moduleId": 11,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/statements.ts",
              "module": "./src/typecheck/statements.ts",
              "moduleName": "./src/typecheck/statements.ts",
              "type": "cjs require",
              "userRequest": "./types",
              "loc": "5:16-34"
            },
            {
              "moduleId": 12,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
              "module": "./src/typecheck/programs.ts",
              "moduleName": "./src/typecheck/programs.ts",
              "type": "cjs require",
              "userRequest": "./types",
              "loc": "7:16-34"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [
            "ModuleConcatenation bailout: Module is not an ECMAScript module"
          ],
          "depth": 2,
          "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst impossible_1 = require(\"@calculemus/impossible\");\nconst error_1 = require(\"./error\");\nconst globalenv_1 = require(\"./globalenv\");\nfunction actualSynthed(genv, t1) {\n    switch (t1.tag) {\n        case \"AmbiguousNullPointer\":\n        case \"NamedFunctionType\":\n        case \"AnonymousFunctionTypePointer\":\n            return t1;\n        default:\n            return globalenv_1.actualType(genv, t1);\n    }\n}\nexports.actualSynthed = actualSynthed;\nfunction equalTypes(genv, t1, t2) {\n    const actual1 = globalenv_1.actualType(genv, t1);\n    const actual2 = globalenv_1.actualType(genv, t2);\n    switch (actual1.tag) {\n        case \"IntType\":\n        case \"BoolType\":\n        case \"StringType\":\n        case \"CharType\":\n        case \"VoidType\":\n            return actual1.tag === actual2.tag;\n        case \"ArrayType\":\n        case \"PointerType\":\n            return actual1.tag === actual2.tag && equalTypes(genv, actual1.argument, actual2.argument);\n        case \"StructType\":\n            return actual1.tag === actual2.tag && actual1.id.name === actual2.id.name;\n        case \"NamedFunctionType\":\n            return actual1.tag === actual2.tag && actual1.definition.id.name === actual2.definition.id.name;\n        default:\n            return impossible_1.impossible(actual1);\n    }\n}\nexports.equalTypes = equalTypes;\nfunction equalFunctionTypes(genv, decl1, decl2) {\n    if (!equalTypes(genv, decl1.returns, decl2.returns))\n        return false;\n    if (decl1.params.length !== decl2.params.length)\n        return false;\n    for (let i = 0; i < decl1.params.length; i++) {\n        if (!equalTypes(genv, decl1.params[i].kind, decl2.params[i].kind))\n            return false;\n    }\n    return true;\n}\nexports.equalFunctionTypes = equalFunctionTypes;\n/**\n * Least upper bound is only used by e ? e1 : e2, to determine the type of e1 and e2 from the type of e\n */\nfunction leastUpperBoundType(genv, t1, t2) {\n    const actual1 = globalenv_1.actualType(genv, t1);\n    const actual2 = globalenv_1.actualType(genv, t2);\n    switch (actual1.tag) {\n        case \"IntType\":\n        case \"BoolType\":\n        case \"StringType\":\n        case \"CharType\":\n        case \"VoidType\":\n            return actual1.tag === actual2.tag ? t1 : null;\n        case \"ArrayType\":\n        case \"PointerType\": {\n            if (actual1.tag !== actual2.tag)\n                return null;\n            const sublub = leastUpperBoundType(genv, actual1.argument, actual2.argument);\n            if (sublub === null)\n                return null;\n            return actual1.tag === \"ArrayType\"\n                ? { tag: actual1.tag, argument: sublub }\n                : { tag: actual1.tag, argument: sublub };\n        }\n        case \"StructType\":\n            return actual1.tag === actual2.tag && actual1.id.name === actual2.id.name ? t1 : null;\n        case \"NamedFunctionType\":\n            return actual1.tag === actual2.tag && actual1.definition.id.name === actual2.definition.id.name\n                ? t1\n                : null;\n        default:\n            return impossible_1.impossible(actual1);\n    }\n}\n/**\n * Almost entirely here to deal with the mess that is functions, and only (seemingly) because of conditionals.\n * (Perhaps this function can be reused for equality comparisions?)\n */\nfunction leastUpperBoundSynthedType(genv, t1, t2) {\n    if (t1.tag === \"AmbiguousNullPointer\" || t2.tag === \"AmbiguousNullPointer\") {\n        if (t1.tag === t2.tag)\n            return t1;\n        if (t1.tag === \"AnonymousFunctionTypePointer\")\n            return t1;\n        if (t2.tag === \"AnonymousFunctionTypePointer\")\n            return t2;\n        if (t1.tag === \"NamedFunctionType\")\n            return null;\n        if (t2.tag === \"NamedFunctionType\")\n            return null;\n        if (t1.tag !== \"AmbiguousNullPointer\" && globalenv_1.actualType(genv, t1).tag === \"PointerType\")\n            return t1;\n        if (t2.tag !== \"AmbiguousNullPointer\" && globalenv_1.actualType(genv, t2).tag === \"PointerType\")\n            return t2;\n        return null;\n    }\n    if (t1.tag === \"AnonymousFunctionTypePointer\") {\n        if (t2.tag === \"AnonymousFunctionTypePointer\") {\n            return equalFunctionTypes(genv, t1.definition, t2.definition) ? t1 : null;\n        }\n        else if (t2.tag === \"NamedFunctionType\") {\n            return error_1.error(`Named function type ${t2.definition.id.name} is not equal to a function pointer`, \"don't dereference the function pointer\");\n        }\n        else {\n            const actual2 = globalenv_1.actualType(genv, t2);\n            if (actual2.tag !== \"PointerType\")\n                return null;\n            const actual2arg = globalenv_1.actualType(genv, actual2.argument);\n            if (actual2arg.tag !== \"NamedFunctionType\")\n                return null;\n            return equalFunctionTypes(genv, t1.definition, actual2arg.definition) ? t1 : null;\n        }\n    }\n    else if (t2.tag === \"AnonymousFunctionTypePointer\") {\n        if (t1.tag === \"NamedFunctionType\") {\n            return error_1.error(`Named function type ${t1.definition.id.name} is not equal to a function pointer`, `try not dereferencing ${t1.definition.id.name}`);\n        }\n        else {\n            const actual1 = globalenv_1.actualType(genv, t1);\n            if (actual1.tag !== \"PointerType\")\n                return null;\n            const actual1arg = globalenv_1.actualType(genv, actual1.argument);\n            if (actual1arg.tag !== \"NamedFunctionType\")\n                return null;\n            return equalFunctionTypes(genv, actual1arg.definition, t2.definition) ? t2 : null;\n        }\n    }\n    else if (t1.tag === \"NamedFunctionType\" || t2.tag === \"NamedFunctionType\") {\n        return t1.tag === \"NamedFunctionType\" &&\n            t2.tag === \"NamedFunctionType\" &&\n            t1.definition.id.name == t2.definition.id.name\n            ? t1\n            : null;\n    }\n    else {\n        return leastUpperBoundType(genv, t1, t2);\n    }\n}\nexports.leastUpperBoundSynthedType = leastUpperBoundSynthedType;\n/**\n * Checks that a value of the abstract type is usable in a hole requiring the concrete type:\n * in other words, checks that abstract <: concrete, where \"<:\" is the usual subtyping relationship.\n */\nfunction isSubtype(genv, abstract, concrete) {\n    const actualConcrete = globalenv_1.actualType(genv, concrete);\n    const actualAbstract = actualSynthed(genv, abstract);\n    switch (actualAbstract.tag) {\n        case \"IntType\":\n        case \"BoolType\":\n        case \"StringType\":\n        case \"CharType\":\n        case \"VoidType\":\n            return actualAbstract.tag === actualConcrete.tag;\n        case \"PointerType\":\n            return (actualConcrete.tag === \"PointerType\" &&\n                isSubtype(genv, actualAbstract.argument, actualConcrete.argument));\n        case \"ArrayType\":\n            return (actualConcrete.tag === \"ArrayType\" &&\n                isSubtype(genv, actualAbstract.argument, actualConcrete.argument));\n        case \"StructType\":\n            return actualConcrete.tag === \"StructType\" && actualAbstract.id.name === actualConcrete.id.name;\n        case \"NamedFunctionType\":\n            return (actualConcrete.tag === \"NamedFunctionType\" &&\n                actualAbstract.definition.id.name === actualConcrete.definition.id.name);\n        case \"AmbiguousNullPointer\":\n            return actualConcrete.tag === \"PointerType\";\n        case \"NamedFunctionType\":\n            return (actualConcrete.tag === \"NamedFunctionType\" &&\n                actualAbstract.definition.id.name === actualConcrete.definition.id.name);\n        case \"AnonymousFunctionTypePointer\":\n            if (actualConcrete.tag !== \"PointerType\")\n                return false;\n            const concreteFunctionType = globalenv_1.actualType(genv, actualConcrete.argument);\n            return (concreteFunctionType.tag === \"NamedFunctionType\" &&\n                equalFunctionTypes(genv, actualAbstract.definition, concreteFunctionType.definition));\n        default:\n            return impossible_1.impossible(actualAbstract);\n    }\n}\nexports.isSubtype = isSubtype;\n/**\n * Ensures that a type is not void or (recursively) void[]\n */\nfunction checkTypeIsNotVoid(genv, tp) {\n    const actual = globalenv_1.actualType(genv, tp);\n    switch (actual.tag) {\n        case \"VoidType\":\n            return error_1.error(\"illegal use of type 'void'\", \"'void' can only be used as a return type for functions\");\n        case \"PointerType\": {\n            if (actual.argument.tag === \"VoidType\")\n                return;\n            return checkTypeIsNotVoid(genv, actual.argument);\n        }\n        case \"ArrayType\":\n            return checkTypeIsNotVoid(genv, actual.argument);\n        case \"IntType\":\n        case \"BoolType\":\n        case \"StringType\":\n        case \"CharType\":\n        case \"StructType\": // Always okay, even if not defined\n        case \"NamedFunctionType\": // This case is actually impossible\n            return;\n        default:\n            return impossible_1.impossible(actual);\n    }\n}\nexports.checkTypeIsNotVoid = checkTypeIsNotVoid;\n/**\n * Asserts type mentioned in variable declaration or function argument has small type\n */\nfunction checkTypeInDeclaration(genv, tp, isFunctionArg) {\n    const actual = globalenv_1.actualType(genv, tp);\n    switch (actual.tag) {\n        case \"StructType\": {\n            return error_1.error(`type struct ${actual.id.name} not small`, isFunctionArg\n                ? \"cannot pass structs to or from functions; use pointers\"\n                : \"cannot store structs as locals; use pointers\");\n        }\n        case \"NamedFunctionType\": {\n            return error_1.error(`Function type ${actual.definition.id.name} is not small`, isFunctionArg\n                ? \"cannot pass functions directly to or from functions; use pointers\"\n                : \"cannot store functions as locals; store a function pointer\");\n        }\n        default:\n            return checkTypeIsNotVoid(genv, tp);\n    }\n}\nexports.checkTypeInDeclaration = checkTypeInDeclaration;\n/**\n * Checks that a function return type is valid (void or small)\n */\nfunction checkFunctionReturnType(genv, t) {\n    switch (t.tag) {\n        case \"VoidType\":\n            return;\n        default:\n            return checkTypeInDeclaration(genv, t, true);\n    }\n}\nexports.checkFunctionReturnType = checkFunctionReturnType;\n/**\n * Checks whether a type is fully defined - whether all its constituent struct parts are\n * Returns the undefined struct as a string if the type is not fully defined (for the error message)\n */\nfunction typeSizeFullyDefined(genv, t) {\n    const actual = globalenv_1.actualType(genv, t);\n    switch (actual.tag) {\n        case \"IntType\":\n        case \"BoolType\":\n        case \"StringType\":\n        case \"CharType\":\n        case \"VoidType\":\n        case \"ArrayType\":\n        case \"PointerType\":\n        case \"NamedFunctionType\":\n            return null;\n        case \"StructType\": {\n            const defn = globalenv_1.getStructDefinition(genv, actual.id.name);\n            if (defn === null || defn.definitions === null)\n                return actual.id.name;\n            return null;\n        }\n        default:\n            return impossible_1.impossible(actual);\n    }\n}\nexports.typeSizeFullyDefined = typeSizeFullyDefined;\n"
        },
        {
          "id": 4,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/globalenv.ts",
          "name": "./src/typecheck/globalenv.ts",
          "index": 14,
          "index2": 12,
          "size": 3042,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "issuerId": 12,
          "issuerName": "./src/typecheck/programs.ts",
          "issuerPath": [
            {
              "id": 19,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "name": "./src/demo/demo.ts",
              "profile": {
                "factory": 64,
                "building": 1924
              }
            },
            {
              "id": 12,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
              "name": "./src/typecheck/programs.ts",
              "profile": {
                "factory": 288,
                "building": 665,
                "dependencies": 114
              }
            }
          ],
          "profile": {
            "factory": 703,
            "building": 8,
            "dependencies": 347
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": 3,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/types.ts",
              "module": "./src/typecheck/types.ts",
              "moduleName": "./src/typecheck/types.ts",
              "type": "cjs require",
              "userRequest": "./globalenv",
              "loc": "5:20-42"
            },
            {
              "moduleId": 5,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/expressions.ts",
              "module": "./src/typecheck/expressions.ts",
              "moduleName": "./src/typecheck/expressions.ts",
              "type": "cjs require",
              "userRequest": "./globalenv",
              "loc": "5:20-42"
            },
            {
              "moduleId": 12,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
              "module": "./src/typecheck/programs.ts",
              "moduleName": "./src/typecheck/programs.ts",
              "type": "cjs require",
              "userRequest": "./globalenv",
              "loc": "6:20-42"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [
            "ModuleConcatenation bailout: Module is not an ECMAScript module"
          ],
          "depth": 2,
          "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst immutable_1 = require(\"immutable\");\nfunction getTypeDef(genv, t) {\n    for (let decl of genv.decls) {\n        if (decl.tag === \"TypeDefinition\" && decl.definition.id.name === t) {\n            return decl.definition.kind;\n        }\n        else if (decl.tag === \"FunctionTypeDefinition\" && decl.definition.id.name === t) {\n            return {\n                tag: \"NamedFunctionType\",\n                definition: decl.definition\n            };\n        }\n    }\n    return null;\n}\nexports.getTypeDef = getTypeDef;\nexports.initMain = {\n    libstructs: immutable_1.Set(),\n    libfuncs: immutable_1.Set(),\n    decls: immutable_1.List([\n        {\n            tag: \"FunctionDeclaration\",\n            returns: { tag: \"IntType\" },\n            id: { tag: \"Identifier\", name: \"main\" },\n            params: [],\n            preconditions: [],\n            postconditions: [],\n            body: null\n        }\n    ])\n};\nfunction addDecl(library, genv, decl) {\n    return {\n        libstructs: library && decl.tag == \"StructDeclaration\" ? genv.libstructs.add(decl.id.name) : genv.libstructs,\n        libfuncs: library && decl.tag == \"FunctionDeclaration\" ? genv.libfuncs.add(decl.id.name) : genv.libfuncs,\n        decls: genv.decls.push(decl)\n    };\n}\nexports.addDecl = addDecl;\nfunction isLibraryFunction(genv, t) {\n    return genv.libfuncs.has(t);\n}\nexports.isLibraryFunction = isLibraryFunction;\nfunction isLibraryStruct(genv, t) {\n    return genv.libfuncs.has(t);\n}\nexports.isLibraryStruct = isLibraryStruct;\nfunction getFunctionDeclaration(genv, t) {\n    let result = null;\n    for (let decl of genv.decls) {\n        if (decl.tag === \"FunctionDeclaration\" && decl.id.name === t) {\n            if (result === null)\n                result = decl;\n            if (decl.body !== null)\n                return decl;\n        }\n    }\n    return result;\n}\nexports.getFunctionDeclaration = getFunctionDeclaration;\nfunction getStructDefinition(genv, t) {\n    let result = null;\n    for (let decl of genv.decls) {\n        if (decl.tag === \"StructDeclaration\" && decl.id.name === t) {\n            if (result === null)\n                result = decl;\n            if (decl.definitions !== null)\n                return decl;\n        }\n    }\n    return result;\n}\nexports.getStructDefinition = getStructDefinition;\n/**\n * Returns a non-Identifier Type based on a type name\n * If parsing is done correctly, this function should only be given type Identifiers,\n * which must have a previous definition.\n */\nfunction expandTypeDef(genv, t) {\n    let tp = getTypeDef(genv, t.name);\n    /* instanbul ignore if */\n    if (tp === null) {\n        throw new Error(`Could not lookup ${t.name} (this should be impossible, please report)`);\n    }\n    else if (tp.tag === \"Identifier\") {\n        return expandTypeDef(genv, tp);\n    }\n    else {\n        return tp;\n    }\n}\nfunction actualType(genv, t) {\n    return t.tag === \"Identifier\" ? expandTypeDef(genv, t) : t;\n}\nexports.actualType = actualType;\n"
        },
        {
          "id": 5,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/expressions.ts",
          "name": "./src/typecheck/expressions.ts",
          "index": 16,
          "index2": 14,
          "size": 20634,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "issuerId": 12,
          "issuerName": "./src/typecheck/programs.ts",
          "issuerPath": [
            {
              "id": 19,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "name": "./src/demo/demo.ts",
              "profile": {
                "factory": 64,
                "building": 1924
              }
            },
            {
              "id": 12,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
              "name": "./src/typecheck/programs.ts",
              "profile": {
                "factory": 288,
                "building": 665,
                "dependencies": 114
              }
            }
          ],
          "profile": {
            "factory": 703,
            "building": 8,
            "dependencies": 347
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": 11,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/statements.ts",
              "module": "./src/typecheck/statements.ts",
              "moduleName": "./src/typecheck/statements.ts",
              "type": "cjs require",
              "userRequest": "./expressions",
              "loc": "6:22-46"
            },
            {
              "moduleId": 12,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
              "module": "./src/typecheck/programs.ts",
              "moduleName": "./src/typecheck/programs.ts",
              "type": "cjs require",
              "userRequest": "./expressions",
              "loc": "8:22-46"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [
            "ModuleConcatenation bailout: Module is not an ECMAScript module"
          ],
          "depth": 2,
          "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst impossible_1 = require(\"@calculemus/impossible\");\nconst error_1 = require(\"./error\");\nconst globalenv_1 = require(\"./globalenv\");\nconst types_1 = require(\"./types\");\n/** Asserts that a synthesized type has small type */\nfunction synthLValue(genv, env, mode, exp) {\n    let synthedType = synthExpression(genv, env, mode, exp);\n    switch (synthedType.tag) {\n        case \"AmbiguousNullPointer\":\n            return error_1.error(`LValue cannot be null (should be impossible, please report)`);\n        case \"AnonymousFunctionTypePointer\":\n            return error_1.error(`LValue cannot be address-of (should be impossible, please report)`);\n        case \"NamedFunctionType\":\n            return error_1.error(`LValue has function type ${synthedType.definition.id.name}, which is not small`);\n        case \"VoidType\":\n            return error_1.error(`LValue cannot have void type`);\n    }\n    let actualSynthedType = globalenv_1.actualType(genv, synthedType);\n    switch (actualSynthedType.tag) {\n        case \"StructType\": {\n            return error_1.error(`assignment uses has type 'struct ${actualSynthedType.id.name}', which is not small`, \"Assign the parts of the struct individually\");\n        }\n        case \"NamedFunctionType\":\n            return error_1.error(`LValue has function type ${actualSynthedType.definition.id.name}, which is not small`);\n        default:\n            return synthedType;\n    }\n}\nexports.synthLValue = synthLValue;\nfunction synthExpression(genv, env, mode, exp) {\n    switch (exp.tag) {\n        case \"Identifier\": {\n            const t = env.get(exp.name);\n            if (t === undefined) {\n                return error_1.error(`Undeclared variable ${exp.name}`);\n            }\n            else {\n                return t;\n            }\n        }\n        case \"IntLiteral\":\n            return { tag: \"IntType\" };\n        case \"StringLiteral\":\n            return { tag: \"StringType\" };\n        case \"CharLiteral\":\n            return { tag: \"CharType\" };\n        case \"BoolLiteral\":\n            return { tag: \"BoolType\" };\n        case \"NullLiteral\":\n            return { tag: \"AmbiguousNullPointer\" };\n        case \"ArrayMemberExpression\": {\n            let objectType = synthExpression(genv, env, mode, exp.object);\n            if (objectType.tag === \"AmbiguousNullPointer\" ||\n                objectType.tag === \"AnonymousFunctionTypePointer\" ||\n                objectType.tag === \"NamedFunctionType\")\n                return error_1.error(\"subject of indexing '[...]' not an array\"); // TODO: \"inferred type t1\"\n            let actualObjectType = globalenv_1.actualType(genv, objectType);\n            if (actualObjectType.tag !== \"ArrayType\") {\n                return error_1.error(\"subject of indexing '[...]' not an array\"); // TODO: \"inferred type t1\"\n            }\n            else {\n                checkExpression(genv, env, mode, exp.index, { tag: \"IntType\" });\n                return actualObjectType.argument;\n            }\n        }\n        case \"StructMemberExpression\": {\n            let objectType = synthExpression(genv, env, mode, exp.object);\n            if (objectType.tag === \"AmbiguousNullPointer\" ||\n                objectType.tag === \"AnonymousFunctionTypePointer\" ||\n                objectType.tag === \"NamedFunctionType\")\n                return error_1.error(`can only dereference structs and pointers to structs`);\n            let actualObjectType = globalenv_1.actualType(genv, objectType);\n            if (exp.deref) {\n                if (actualObjectType.tag === \"StructType\")\n                    return error_1.error(`cannot dereference non-pointer struct with e->${exp.field.name}`, `try e.${exp.field.name}`);\n                if (actualObjectType.tag !== \"PointerType\")\n                    return error_1.error(\"can only dereference structs and pointers to structs\");\n                actualObjectType = globalenv_1.actualType(genv, actualObjectType.argument);\n            }\n            if (actualObjectType.tag !== \"StructType\")\n                return error_1.error(`subject of ${exp.deref ? \"->\" : \".\"}${exp.field.name} not a struct${exp.deref ? \" pointer\" : \"\"}`); // TODO add inferred type\n            let structDef = globalenv_1.getStructDefinition(genv, actualObjectType.id.name);\n            if (structDef === null)\n                return error_1.error(`'struct ${actualObjectType.id.name}' not defined`);\n            if (structDef.definitions === null)\n                return error_1.error(`'struct ${actualObjectType.id.name}' declared but not defined`);\n            for (let field of structDef.definitions) {\n                if (field.id.name === exp.field.name)\n                    return field.kind;\n            }\n            return error_1.error(`field '${exp.field.name}' not declared in 'struct ${actualObjectType.id.name}'`);\n        }\n        case \"CallExpression\": {\n            if (env.has(exp.callee.name))\n                return error_1.error(`variable ${exp.callee.name} used as function`, `if ${exp.callee.name} is a function pointer, try try (*${exp.callee.name})(...)  instead of ${exp.callee.name}(...)`);\n            const func = globalenv_1.getFunctionDeclaration(genv, exp.callee.name);\n            if (func === null)\n                return error_1.error(`undeclared function ${exp.callee.name}`);\n            if (exp.arguments.length !== func.params.length)\n                return error_1.error(`function ${exp.callee.name} requires ${func.params.length} argument${func.params.length === 1 ? \"\" : \"s\"} but was given ${exp.arguments.length}`);\n            exp.arguments.forEach((exp, i) => checkExpression(genv, env, mode, exp, func.params[i].kind));\n            return func.returns;\n        }\n        case \"IndirectCallExpression\": {\n            const callType = synthExpression(genv, env, mode, exp.callee);\n            if (callType.tag === \"AnonymousFunctionTypePointer\")\n                return error_1.error(\"Functions pointers must be stored in locals before they are called\");\n            if (callType.tag === \"AmbiguousNullPointer\")\n                return error_1.error(\"Cannot call NULL as a function\");\n            if (callType.tag === \"NamedFunctionType\")\n                return error_1.error(`Can only call pointers to functions, the function type '${callType.definition.id.name}' is not a pointer`);\n            const actualCallType = globalenv_1.actualType(genv, callType);\n            if (actualCallType.tag !== \"PointerType\")\n                return error_1.error(\"Only pointers to functions can be called\");\n            const actualFunctionType = globalenv_1.actualType(genv, actualCallType.argument);\n            if (actualFunctionType.tag !== \"NamedFunctionType\")\n                return error_1.error(\"Only pointers to functions can be called\");\n            if (exp.arguments.length !== actualFunctionType.definition.params.length)\n                return error_1.error(`function pointer call requires ${actualFunctionType.definition.params.length} argument${actualFunctionType.definition.params.length === 1 ? \"\" : \"s\"} but was given ${exp.arguments.length}`);\n            exp.arguments.forEach((exp, i) => checkExpression(genv, env, mode, exp, actualFunctionType.definition.params[i].kind));\n            return actualFunctionType.definition.returns;\n        }\n        case \"CastExpression\": {\n            const castType = globalenv_1.actualType(genv, exp.kind);\n            if (castType.tag !== \"PointerType\")\n                return error_1.error(\"Type of cast must be a pointer or void*\"); // TODO what was the type\n            const argumentType = synthExpression(genv, env, mode, exp.argument);\n            if (argumentType.tag === \"AmbiguousNullPointer\")\n                return exp.kind; // NULL cast always ok\n            if (argumentType.tag === \"NamedFunctionType\" ||\n                argumentType.tag == \"AnonymousFunctionTypePointer\")\n                return error_1.error(\"Only function pointers with assigned types can be cast to 'void*'\", \"assign to a variable and then cast to 'void*'\");\n            const expandedArgumentType = globalenv_1.actualType(genv, argumentType);\n            if (expandedArgumentType.tag !== \"PointerType\")\n                return error_1.error(\"Only pointer and void* types can be cast\"); // TODO what was the type\n            if (castType.argument.tag === \"VoidType\") {\n                if (expandedArgumentType.argument.tag === \"VoidType\")\n                    return error_1.error(\"Casting a void* as a void* not permitted\\n\");\n            }\n            else if (expandedArgumentType.argument.tag !== \"VoidType\") {\n                return error_1.error(\"Only casts to or from void* allowed\");\n            }\n            return exp.kind;\n        }\n        case \"UnaryExpression\": {\n            switch (exp.operator) {\n                case \"!\": {\n                    checkExpression(genv, env, mode, exp.argument, { tag: \"BoolType\" });\n                    return { tag: \"BoolType\" };\n                }\n                case \"&\": {\n                    if (exp.argument.tag !== \"Identifier\")\n                        return error_1.error(\"Address-of operation '&' can only be applied directly to a function name\");\n                    const definition = globalenv_1.getFunctionDeclaration(genv, exp.argument.name);\n                    if (definition === null)\n                        return error_1.error(`There is no function named ${exp.argument.name}`);\n                    if (env.has(exp.argument.name))\n                        return error_1.error(`Cannot take the address of function ${exp.argument.name} when it is also the name of a local`);\n                    return { tag: \"AnonymousFunctionTypePointer\", definition: definition };\n                }\n                case \"~\":\n                case \"-\": {\n                    checkExpression(genv, env, mode, exp.argument, { tag: \"IntType\" });\n                    return { tag: \"IntType\" };\n                }\n                case \"*\": {\n                    const pointerType = synthExpression(genv, env, mode, exp.argument);\n                    if (pointerType.tag === \"AmbiguousNullPointer\")\n                        return error_1.error(\"cannot dereference NULL\");\n                    if (pointerType.tag === \"AnonymousFunctionTypePointer\")\n                        return error_1.error(\"Cannot dereference a pointer\", \"assign it to a variable first\");\n                    if (pointerType.tag === \"NamedFunctionType\")\n                        return error_1.error(\"You only dereference a function pointer when that function is being called\");\n                    const actualPointerType = globalenv_1.actualType(genv, pointerType);\n                    switch (actualPointerType.tag) {\n                        case \"PointerType\": {\n                            if (actualPointerType.argument.tag === \"VoidType\") {\n                                return error_1.error(\"cannot dereference value of type 'void*'\", \"cast to another pointer type with '(t*)'\");\n                            }\n                            else {\n                                return actualPointerType.argument;\n                            }\n                        }\n                        default:\n                            return error_1.error(\"subject of '*' not a pointer\"); // TODO: inferred type\n                    }\n                }\n                default:\n                    return impossible_1.impossible(exp.operator);\n            }\n        }\n        case \"BinaryExpression\": {\n            switch (exp.operator) {\n                case \"*\":\n                case \"/\":\n                case \"%\":\n                case \"+\":\n                case \"-\":\n                case \"<<\":\n                case \">>\":\n                case \"&\":\n                case \"^\":\n                case \"|\": {\n                    checkExpression(genv, env, mode, exp.left, { tag: \"IntType\" });\n                    checkExpression(genv, env, mode, exp.right, { tag: \"IntType\" });\n                    return { tag: \"IntType\" };\n                }\n                case \"<\":\n                case \"<=\":\n                case \">=\":\n                case \">\": {\n                    const leftType = synthExpression(genv, env, mode, exp.left);\n                    if (leftType.tag === \"AmbiguousNullPointer\")\n                        return error_1.error(`Cannot compare pointers with ${exp.operator}`);\n                    if (leftType.tag === \"AnonymousFunctionTypePointer\")\n                        return error_1.error(`Cannot compare function pointers with ${exp.operator}`);\n                    if (leftType.tag === \"NamedFunctionType\")\n                        return error_1.error(\"Cannot compare functions for inequality\");\n                    switch (globalenv_1.actualType(genv, leftType).tag) {\n                        case \"IntType\":\n                        case \"CharType\": {\n                            checkExpression(genv, env, mode, exp.right, leftType);\n                            return { tag: \"BoolType\" };\n                        }\n                        case \"StringType\": {\n                            return error_1.error(`cannot compare strings with '${exp.operator}'`, \"use string_compare in library <string>\");\n                        }\n                        default: {\n                            return error_1.error(`cannot compare with '${exp.operator}' at this type`, `only values of type 'int' and 'char' can be used with '${exp.operator}'`); // TODO which type\n                        }\n                    }\n                }\n                case \"==\":\n                case \"!=\": {\n                    const left = synthExpression(genv, env, mode, exp.left);\n                    switch (left.tag) {\n                        case \"AmbiguousNullPointer\": {\n                            const right = synthExpression(genv, env, mode, exp.right);\n                            if (right.tag === \"AmbiguousNullPointer\")\n                                return { tag: \"BoolType\" };\n                            if (right.tag === \"AnonymousFunctionTypePointer\")\n                                return { tag: \"BoolType\" };\n                            if (right.tag === \"NamedFunctionType\")\n                                return error_1.error(\"cannot compare NULL and a function\");\n                            if (globalenv_1.actualType(genv, right).tag === \"PointerType\")\n                                return { tag: \"BoolType\" };\n                            else\n                                return error_1.error(`cannot compare 'NULL' to a non-pointer type with ${exp.operator}`);\n                        }\n                        case \"AnonymousFunctionTypePointer\": {\n                            const right = synthExpression(genv, env, mode, exp.right);\n                            if (right.tag === \"AmbiguousNullPointer\")\n                                return { tag: \"BoolType\" };\n                            return error_1.error(\"can only compare an function pointer '&f' against NULL\");\n                        }\n                    }\n                    const actualLeft = globalenv_1.actualType(genv, left);\n                    switch (actualLeft.tag) {\n                        case \"NamedFunctionType\":\n                            return error_1.error(`cannot compare functions for equality directly with ${exp.operator}`);\n                        case \"StructType\":\n                            return error_1.error(`cannot compare structs for equality directly with ${exp.operator}`, \"pointers to struts can be compared\");\n                        case \"VoidType\":\n                            return error_1.error(`cannot compare void expressions for equality`);\n                        case \"StringType\":\n                            return error_1.error(`cannot compare strings with '${exp.operator}'`, \"try using string_equal in library <string>\");\n                    }\n                    checkExpression(genv, env, mode, exp.right, actualLeft);\n                    return { tag: \"BoolType\" };\n                }\n                default:\n                    return impossible_1.impossible(exp.operator);\n            }\n        }\n        case \"LogicalExpression\": {\n            checkExpression(genv, env, mode, exp.left, { tag: \"BoolType\" });\n            checkExpression(genv, env, mode, exp.right, { tag: \"BoolType\" });\n            return { tag: \"BoolType\" };\n        }\n        case \"ConditionalExpression\": {\n            checkExpression(genv, env, mode, exp.test, { tag: \"BoolType\" });\n            const left = synthExpression(genv, env, mode, exp.consequent);\n            const right = synthExpression(genv, env, mode, exp.alternate);\n            const lub = types_1.leastUpperBoundSynthedType(genv, left, right);\n            if (lub === null)\n                return error_1.error(\"Branches of ternary expression 'e ? e1 : e2' have incompatible types\"); // todo types\n            const actualLub = types_1.actualSynthed(genv, lub);\n            switch (actualLub.tag) {\n                case \"VoidType\":\n                    return error_1.error(\"condition expression branches cannot have void type\");\n                case \"NamedFunctionType\":\n                    return error_1.error(`functions with type ${actualLub.definition.id.name} cannot be returned from a conditional`, \"use function pointers\");\n                case \"StructType\":\n                    return error_1.error(`values of type 'struct${actualLub.id.name}' cannot be used in a conditional`, \"use struct pointers\");\n            }\n            return lub;\n        }\n        case \"AllocExpression\": {\n            const undefinedTypePart = types_1.typeSizeFullyDefined(genv, exp.kind);\n            if (undefinedTypePart !== null)\n                return error_1.error(\"cannot allocate an undefined type\", `give a definition for 'struct ${undefinedTypePart}`);\n            return { tag: \"PointerType\", argument: exp.kind };\n        }\n        case \"AllocArrayExpression\": {\n            const undefinedTypePart = types_1.typeSizeFullyDefined(genv, exp.kind);\n            if (undefinedTypePart !== null)\n                return error_1.error(\"cannot allocate an undefined type\", `give a definition for 'struct ${undefinedTypePart}`);\n            checkExpression(genv, env, mode, exp.size, { tag: \"IntType\" });\n            return { tag: \"ArrayType\", argument: exp.kind };\n        }\n        case \"ResultExpression\": {\n            if (mode === null)\n                return error_1.error(\"\\\\result illegal in ordinary expressions\", \"use only in @ensures annotations\");\n            else if (mode.tag === \"@ensures\") {\n                if (mode.returns.tag === \"VoidType\") {\n                    return error_1.error(\"\\\\result illegal in functions that return 'void'\");\n                }\n                else {\n                    return mode.returns;\n                }\n            }\n            else {\n                return error_1.error(`\\\\result illegal in ${mode.tag} annotations`, \"use only in @ensures annotations\");\n            }\n        }\n        case \"LengthExpression\": {\n            if (mode === null)\n                return error_1.error(\"\\\\length illegal in ordinary expressions\", \"use only in annotations\");\n            const tp = synthExpression(genv, env, mode, exp.argument);\n            if (tp.tag !== \"ArrayType\") {\n                return error_1.error(\"argument to \\\\length not an array\");\n            }\n            else {\n                return { tag: \"IntType\" };\n            }\n        }\n        case \"HasTagExpression\": {\n            if (mode === null)\n                return error_1.error(\"\\\\hastag illegal in ordinary expressions\", \"use only in annotations\");\n            if (exp.kind.tag !== \"PointerType\")\n                return error_1.error(\"tag must be a pointer type\"); // TODO prettyprint;\n            if (exp.kind.argument.tag === \"VoidType\")\n                return error_1.error(\"tag can never be 'void*'\");\n            const tp = synthExpression(genv, env, mode, exp.argument);\n            if (tp.tag !== \"PointerType\" || tp.argument.tag !== \"VoidType\") {\n                return error_1.error(\"tagged expression must have type void*\"); // TODO inferred\n            }\n        }\n        default:\n            return impossible_1.impossible(exp);\n    }\n}\nexports.synthExpression = synthExpression;\nfunction checkExpression(genv, env, mode, exp, tp) {\n    const synthed = synthExpression(genv, env, mode, exp);\n    if (!types_1.isSubtype(genv, synthed, tp)) {\n        return error_1.error(\"type mismatch\"); // TODO: expected/found\n    }\n}\nexports.checkExpression = checkExpression;\n"
        },
        {
          "id": 6,
          "identifier": "/Users/robs/r/jaco/lib/parser-util.js",
          "name": "./lib/parser-util.js",
          "index": 10,
          "index2": 7,
          "size": 12120,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "issuer": "/Users/robs/r/jaco/lib/expression-rules.js",
          "issuerId": 14,
          "issuerName": "./lib/expression-rules.js",
          "issuerPath": [
            {
              "id": 19,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "name": "./src/demo/demo.ts",
              "profile": {
                "factory": 64,
                "building": 1924
              }
            },
            {
              "id": 18,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
              "name": "./src/parse.ts",
              "profile": {
                "factory": 288,
                "building": 665,
                "dependencies": 114
              }
            },
            {
              "id": 14,
              "identifier": "/Users/robs/r/jaco/lib/expression-rules.js",
              "name": "./lib/expression-rules.js",
              "profile": {
                "factory": 808,
                "building": 8,
                "dependencies": 637
              }
            }
          ],
          "profile": {
            "factory": 30,
            "building": 12,
            "dependencies": 21
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": 13,
              "moduleIdentifier": "/Users/robs/r/jaco/lib/program-rules.js",
              "module": "./lib/program-rules.js",
              "moduleName": "./lib/program-rules.js",
              "type": "cjs require",
              "userRequest": "./parser-util",
              "loc": "7:13-37"
            },
            {
              "moduleId": 14,
              "moduleIdentifier": "/Users/robs/r/jaco/lib/expression-rules.js",
              "module": "./lib/expression-rules.js",
              "moduleName": "./lib/expression-rules.js",
              "type": "cjs require",
              "userRequest": "./parser-util",
              "loc": "7:13-37"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [
            "ModuleConcatenation bailout: Module is not an ECMAScript module"
          ],
          "depth": 3,
          "source": "\"use strict\";\n/**\n * Consumes (and documents) the messy output produced by the parser, and turns it into parsedsyntax.ts types.\n * This file could easily produce garbage output if there's a mismatch between the documented types and the types\n * that the parser produces. This file should only throw errors to document invariants of the parser; user\n * errors should be thrown in restrictsyntax.ts.\n *\n * The structure of this file should match parsedsyntax.ts as much as practical.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction Identifier([{ value, text, offset, lineBreaks, line, col }]) {\n    return {\n        tag: \"Identifier\",\n        name: text\n    };\n}\nexports.Identifier = Identifier;\nfunction IntType([tok]) {\n    return {\n        tag: \"IntType\"\n    };\n}\nexports.IntType = IntType;\nfunction BoolType([tok]) {\n    return {\n        tag: \"BoolType\"\n    };\n}\nexports.BoolType = BoolType;\nfunction StringType([tok]) {\n    return {\n        tag: \"StringType\"\n    };\n}\nexports.StringType = StringType;\nfunction CharType([tok]) {\n    return {\n        tag: \"CharType\"\n    };\n}\nexports.CharType = CharType;\nfunction VoidType([tok]) {\n    return {\n        tag: \"VoidType\"\n    };\n}\nexports.VoidType = VoidType;\nfunction PointerType([tp, s, tok]) {\n    return {\n        tag: \"PointerType\",\n        argument: tp\n    };\n}\nexports.PointerType = PointerType;\nfunction ArrayType([tp, s1, l, s2, r]) {\n    return {\n        tag: \"ArrayType\",\n        argument: tp\n    };\n}\nexports.ArrayType = ArrayType;\nfunction StructType([str, s, id]) {\n    return {\n        tag: \"StructType\",\n        id: id\n    };\n}\nexports.StructType = StructType;\nfunction IntLiteral([{ value, text, offset, lineBreaks, line, col }]) {\n    return {\n        tag: \"IntLiteral\",\n        raw: text\n    };\n}\nexports.IntLiteral = IntLiteral;\nfunction CharLiteral([[start, [tok], end]]) {\n    return {\n        tag: \"CharLiteral\",\n        raw: tok.value\n    };\n}\nexports.CharLiteral = CharLiteral;\nfunction StringLiteral([[start, toks, end]]) {\n    return {\n        tag: \"StringLiteral\",\n        raw: toks.map(x => x[0].value)\n    };\n}\nexports.StringLiteral = StringLiteral;\nfunction BoolLiteral([t]) {\n    return {\n        tag: \"BoolLiteral\",\n        value: t.value === \"true\"\n    };\n}\nexports.BoolLiteral = BoolLiteral;\nfunction NullLiteral() {\n    return {\n        tag: \"NullLiteral\"\n    };\n}\nexports.NullLiteral = NullLiteral;\nfunction ArrayMemberExpression([object, s1, l, s2, index, s3, r]) {\n    return {\n        tag: \"ArrayMemberExpression\",\n        object: object,\n        index: index\n    };\n}\nexports.ArrayMemberExpression = ArrayMemberExpression;\nfunction Arguments([l, s1, args, r]) {\n    if (args === null)\n        return [];\n    return [args[0]].concat(args[1].map(x => x[3]));\n}\nexports.Arguments = Arguments;\nfunction StructMemberExpression([object, s1, deref, s2, field]) {\n    return {\n        tag: \"StructMemberExpression\",\n        deref: deref instanceof Array,\n        object: object,\n        field: field\n    };\n}\nexports.StructMemberExpression = StructMemberExpression;\nfunction CallExpression([f, ws, args]) {\n    return {\n        tag: \"CallExpression\",\n        callee: f,\n        arguments: Arguments(args)\n    };\n}\nexports.CallExpression = CallExpression;\nfunction IndirectCallExpression([l, s1, s, s2, f, s3, r, s4, args]) {\n    return {\n        tag: \"IndirectCallExpression\",\n        callee: f,\n        arguments: Arguments(args)\n    };\n}\nexports.IndirectCallExpression = IndirectCallExpression;\nfunction UnaryExpression([operator, s, argument]) {\n    if (operator.length == 1) {\n        switch (operator[0].value) {\n            case \"&\":\n            case \"!\":\n            case \"~\":\n            case \"-\":\n            case \"*\":\n                return {\n                    tag: \"UnaryExpression\",\n                    operator: operator[0].value,\n                    argument: argument\n                };\n            default:\n                throw new Error(operator[0].value);\n        }\n    }\n    else {\n        return {\n            tag: \"CastExpression\",\n            kind: operator[2],\n            argument: argument\n        };\n    }\n}\nexports.UnaryExpression = UnaryExpression;\nfunction BinaryExpression([left, s1, opertoks, s2, right]) {\n    const operator = opertoks.map((tok) => tok.text).join(\"\");\n    switch (operator) {\n        case \"*\":\n        case \"/\":\n        case \"%\":\n        case \"+\":\n        case \"-\":\n        case \"<<\":\n        case \">>\":\n        case \"<\":\n        case \"<=\":\n        case \">=\":\n        case \">\":\n        case \"==\":\n        case \"!=\":\n        case \"&\":\n        case \"^\":\n        case \"|\":\n            return {\n                tag: \"BinaryExpression\",\n                operator: operator,\n                left: left,\n                right: right\n            };\n        case \"&&\":\n        case \"||\":\n            return {\n                tag: \"LogicalExpression\",\n                operator: operator,\n                left: left,\n                right: right\n            };\n        case \"=\":\n        case \"+=\":\n        case \"-=\":\n        case \"*=\":\n        case \"/=\":\n        case \"%=\":\n        case \"&=\":\n        case \"^=\":\n        case \"|=\":\n        case \"<<=\":\n        case \">>=\":\n            return {\n                tag: \"AssignmentExpression\",\n                operator: operator,\n                left: left,\n                right: right\n            };\n        default:\n            throw new Error(operator);\n    }\n}\nexports.BinaryExpression = BinaryExpression;\nfunction ConditionalExpression([test, s1, op1, s2, consequent, s3, op2, s4, alternate]) {\n    return {\n        tag: \"ConditionalExpression\",\n        test: test,\n        consequent: consequent,\n        alternate: alternate\n    };\n}\nexports.ConditionalExpression = ConditionalExpression;\nfunction AllocExpression([alloc, s1, l, s2, typ, s3, r]) {\n    return {\n        tag: \"AllocExpression\",\n        kind: typ\n    };\n}\nexports.AllocExpression = AllocExpression;\nfunction AllocArrayExpression([alloc, s1, l, s2, typ, s3, c, s4, size, sp, r]) {\n    return {\n        tag: \"AllocArrayExpression\",\n        kind: typ,\n        size: size\n    };\n}\nexports.AllocArrayExpression = AllocArrayExpression;\nfunction ResultExpression([b, res]) {\n    return {\n        tag: \"ResultExpression\"\n    };\n}\nexports.ResultExpression = ResultExpression;\nfunction LengthExpression([b, length, s1, l, s2, argument, s3, r]) {\n    return {\n        tag: \"LengthExpression\",\n        argument: argument\n    };\n}\nexports.LengthExpression = LengthExpression;\nfunction HasTagExpression([b, hastag, s1, l, s2, typ, s3, c, s4, argument, s5, r]) {\n    return {\n        tag: \"HasTagExpression\",\n        kind: typ,\n        argument: argument\n    };\n}\nexports.HasTagExpression = HasTagExpression;\nfunction UpdateExpression([argument, s1, op1, op2]) {\n    return {\n        tag: \"UpdateExpression\",\n        argument: argument,\n        operator: op1.value === \"+\" ? \"++\" : \"--\"\n    };\n}\nexports.UpdateExpression = UpdateExpression;\nfunction AssertExpression([assert, s1, l, s2, test, s3, r]) {\n    return {\n        tag: \"AssertExpression\",\n        test: test\n    };\n}\nexports.AssertExpression = AssertExpression;\nfunction ErrorExpression([error, s1, l, s2, argument, s3, r]) {\n    return {\n        tag: \"ErrorExpression\",\n        argument: argument\n    };\n}\nexports.ErrorExpression = ErrorExpression;\nfunction SimpleStatement([stm, s1, semi]) {\n    if (stm instanceof Array) {\n        const init = stm[3];\n        return {\n            tag: \"VariableDeclaration\",\n            kind: stm[0],\n            id: stm[2],\n            init: init === null ? null : init[3]\n        };\n    }\n    else {\n        return {\n            tag: \"ExpressionStatement\",\n            expression: stm\n        };\n    }\n}\nexports.SimpleStatement = SimpleStatement;\nfunction IfStatement([i, s1, l, s2, test, s3, r, s4, [annos, consequent]]) {\n    return {\n        tag: \"IfStatement\",\n        test: test,\n        consequent: [annos, consequent]\n    };\n}\nexports.IfStatement = IfStatement;\nfunction IfElseStatement([i, s1, l1, s2, test, s3, r, annos1, s4, consequent, s5, e, annos2, s6, alternate]) {\n    return {\n        tag: \"IfStatement\",\n        test: test,\n        consequent: [annos1, consequent],\n        alternate: [annos2, alternate]\n    };\n}\nexports.IfElseStatement = IfElseStatement;\nfunction WhileStatement([w, s1, l, s2, test, s3, r, annos, s4, body]) {\n    return {\n        tag: \"WhileStatement\",\n        test: test,\n        annos: annos,\n        body: body\n    };\n}\nexports.WhileStatement = WhileStatement;\nfunction ForStatement([f, s1, l, init, s2, semi1, s3, test, s4, semi2, update, s5, r, annos, s6, body]) {\n    return {\n        tag: \"ForStatement\",\n        init: init === null ? null : SimpleStatement([init[1], s2, semi1]),\n        test: test,\n        update: update === null ? null : update[1],\n        annos: annos,\n        body: body\n    };\n}\nexports.ForStatement = ForStatement;\nfunction ReturnStatement([r, argument, s1, semi]) {\n    return {\n        tag: \"ReturnStatement\",\n        argument: argument === null ? null : argument[1]\n    };\n}\nexports.ReturnStatement = ReturnStatement;\nfunction BlockStatement([l, stms, annos, s, r]) {\n    const stms1 = stms.map(x => x[1][0].map((y) => ({ tag: \"AnnoStatement\", anno: y })).concat([x[1][1]]));\n    const stms2 = annos.map((x) => ({\n        tag: \"AnnoStatement\",\n        anno: x[1][0]\n    }));\n    const stmsAll = stms1\n        .concat([stms2])\n        .reduce((collect, stms) => collect.concat(stms), []);\n    return {\n        tag: \"BlockStatement\",\n        body: stmsAll\n    };\n}\nexports.BlockStatement = BlockStatement;\nfunction BreakStatement([stm, s1, semi]) {\n    return { tag: \"BreakStatement\" };\n}\nexports.BreakStatement = BreakStatement;\nfunction ContinueStatement([stm, s1, semi]) {\n    return { tag: \"ContinueStatement\" };\n}\nexports.ContinueStatement = ContinueStatement;\nfunction Anno1(annos) {\n    const start = annos[0];\n    const end = annos[5] ? annos[5] : annos[3];\n    if (start.type === \"anno_line_start\" && start.line !== end.line)\n        throw new Error(`Single-line annotations cannot be extended onto multiple lines with multiline comments.`);\n    return annos[2];\n}\nexports.Anno1 = Anno1;\nfunction FunctionDeclarationArgs([l, s1, params, r]) {\n    if (params === null)\n        return [];\n    const first = {\n        tag: \"VariableDeclaration\",\n        kind: params[0],\n        id: params[2]\n    };\n    return [first].concat(params[4].map((x) => ({\n        tag: \"VariableDeclaration\",\n        kind: x[2],\n        id: x[4]\n    })));\n}\nexports.FunctionDeclarationArgs = FunctionDeclarationArgs;\nfunction StructDeclaration([struct, s1, s, s2, semi]) {\n    return {\n        tag: \"StructDeclaration\",\n        id: s,\n        definitions: null\n    };\n}\nexports.StructDeclaration = StructDeclaration;\nfunction StructDefinition([struct, s1, s, s2, l, s3, defs, r, s5, semi]) {\n    return {\n        tag: \"StructDeclaration\",\n        id: s,\n        definitions: defs.map((value) => ({\n            tag: \"VariableDeclaration\",\n            id: value[2],\n            kind: value[0]\n        }))\n    };\n}\nexports.StructDefinition = StructDefinition;\nfunction TypeDefinition([typedef, s1, tp, s2, id]) {\n    return {\n        tag: \"TypeDefinition\",\n        definition: {\n            tag: \"VariableDeclaration\",\n            id: id,\n            kind: tp\n        }\n    };\n}\nexports.TypeDefinition = TypeDefinition;\nfunction FunctionTypeDefinition([typedef, s1, ty, s2, f, s3, args, annos]) {\n    return {\n        tag: \"FunctionTypeDefinition\",\n        definition: {\n            tag: \"FunctionDeclaration\",\n            returns: ty,\n            id: f,\n            params: args,\n            annos: annos,\n            body: null\n        }\n    };\n}\nexports.FunctionTypeDefinition = FunctionTypeDefinition;\nfunction FunctionDeclaration([ty, s1, f, s2, args, annos, s3, def]) {\n    return {\n        tag: \"FunctionDeclaration\",\n        returns: ty,\n        id: f,\n        params: args,\n        annos: annos,\n        body: def\n    };\n}\nexports.FunctionDeclaration = FunctionDeclaration;\n//# sourceMappingURL=parser-util.js.map"
        },
        {
          "id": 7,
          "identifier": "/Users/robs/r/jaco/lib/lex.js",
          "name": "./lib/lex.js",
          "index": 9,
          "index2": 6,
          "size": 7510,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "issuer": "/Users/robs/r/jaco/lib/expression-rules.js",
          "issuerId": 14,
          "issuerName": "./lib/expression-rules.js",
          "issuerPath": [
            {
              "id": 19,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "name": "./src/demo/demo.ts",
              "profile": {
                "factory": 64,
                "building": 1924
              }
            },
            {
              "id": 18,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
              "name": "./src/parse.ts",
              "profile": {
                "factory": 288,
                "building": 665,
                "dependencies": 114
              }
            },
            {
              "id": 14,
              "identifier": "/Users/robs/r/jaco/lib/expression-rules.js",
              "name": "./lib/expression-rules.js",
              "profile": {
                "factory": 808,
                "building": 8,
                "dependencies": 637
              }
            }
          ],
          "profile": {
            "factory": 30,
            "building": 12,
            "dependencies": 21
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": 13,
              "moduleIdentifier": "/Users/robs/r/jaco/lib/program-rules.js",
              "module": "./lib/program-rules.js",
              "moduleName": "./lib/program-rules.js",
              "type": "cjs require",
              "userRequest": "./lex",
              "loc": "6:14-30"
            },
            {
              "moduleId": 14,
              "moduleIdentifier": "/Users/robs/r/jaco/lib/expression-rules.js",
              "module": "./lib/expression-rules.js",
              "moduleName": "./lib/expression-rules.js",
              "type": "cjs require",
              "userRequest": "./lex",
              "loc": "6:14-30"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [
            "ModuleConcatenation bailout: Module is not an ECMAScript module"
          ],
          "depth": 3,
          "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst moo_1 = require(\"moo\");\nconst immutable_1 = require(\"immutable\");\nconst impossible_1 = require(\"../node_modules/@calculemus/impossible\");\n/**\n * Ambitious Goal: \"invalid syntax\" errors from the lexer are unclear. Can we take errors out of the lexer to\n * the point we can clearly enumerate all files that will _not_ be accepted by the lexer? This would also\n * facilitate.\n *\n * Desired spec:\n * All UTF-8 strings should lex, unless they:\n *  1. Contain non-printable characters.\n *  2. Contain the character ` outside of a string/char/comment.\n *  3. Contain characters outside of the UTF-8 range.\n */\nconst basicLexing = {\n    identifier: {\n        match: /[A-Za-z_][A-Za-z0-9_]*/,\n        keywords: {\n            keyword: [\n                \"int\",\n                \"bool\",\n                \"string\",\n                \"char\",\n                \"void\",\n                \"struct\",\n                \"typedef\",\n                \"if\",\n                \"else\",\n                \"while\",\n                \"for\",\n                \"continue\",\n                \"break\",\n                \"return\",\n                \"assert\",\n                \"error\",\n                \"true\",\n                \"false\",\n                \"NULL\",\n                \"alloc\",\n                \"alloc_array\"\n            ]\n        }\n    },\n    numeric_literal: { match: /(?:0[0-9a-zA-Z_]+)|(?:[1-9][A-Za-z0-9_]*)|0/ },\n    char_delimiter: { match: /'/, push: \"charComponents\" },\n    string_delimiter: { match: /\\\"/, push: \"stringComponents\" },\n    logical_and: \"&&\",\n    decrement: \"--\",\n    increment: \"++\",\n    symbol: /[!$%&\\(\\)*+,\\-.\\/:;<=>?\\[\\\\\\]^{\\|}~]/,\n    unexpected_unicode_character: { match: /[\\x00-\\u{10FFFF}]/, lineBreaks: true },\n    invalid_character: { match: /./, lineBreaks: true },\n    type_identifier: \"<placeholder>\",\n    space: \"<placeholder>\"\n};\nfunction createLexer() {\n    return moo_1.states({\n        main: Object.assign({\n            newline: { match: /\\r?\\n/, lineBreaks: true },\n            whitespace: { match: /[ \\t\\v\\f\\r]+/ },\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            comment_line_start: { match: \"//\", push: \"lineComment\" },\n            pragma: /#.*/\n        }, basicLexing),\n        stringComponents: {\n            string_delimiter: { match: /\"/, pop: 1 },\n            characters: { match: /[^\\\\\\n\\r\"]+/, lineBreaks: false },\n            special_character: { match: /\\\\[^\\n\\r]/, lineBreaks: false },\n            invalid_string_character: { match: /[\\x00-xFF]/, lineBreaks: true }\n        },\n        charComponents: {\n            char_delimiter: { match: /'/, pop: 1 },\n            special_character: { match: /\\\\./, lineBreaks: true },\n            character: { match: /./, lineBreaks: false },\n            invalid_string_character: { match: /[\\x00-xFF]/, lineBreaks: true, pop: 1 }\n        },\n        multiLineComment: {\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            comment_end: { match: \"*/\", pop: 1 },\n            comment: { match: /\\*|\\/|[^*\\/\\n]+/, lineBreaks: false },\n            newline: { match: /\\r?\\n/, lineBreaks: true }\n        },\n        lineComment: {\n            comment: { match: /[^\\n]/, lineBreaks: false },\n            comment_line_end: { match: /\\r?\\n/, lineBreaks: true, pop: 1 }\n        }\n    }, \"main\");\n}\nexports.createLexer = createLexer;\nfunction createAnnoLexer() {\n    return moo_1.states({\n        main: Object.assign({\n            newline: { match: /\\r?\\n/, lineBreaks: true },\n            whitespace: { match: /[ \\t\\v\\f\\r]+/ },\n            anno_start: { match: \"/*@\", push: \"multiLineAnno\" },\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            anno_line_start: { match: \"//@\", push: \"lineAnno\" },\n            comment_line_start: { match: \"//\", push: \"lineComment\" },\n            pragma: /#.*/\n        }, basicLexing),\n        multiLineAnno: Object.assign({\n            newline: { match: /\\r?\\n/, lineBreaks: true },\n            whitespace: { match: /[ \\t\\v\\f\\r]+/ },\n            anno_end: { match: \"@*/\", pop: 1 },\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            comment_line_start: { match: \"//\", push: \"lineComment\" },\n            annospace: { match: \"@\" }\n        }, basicLexing),\n        lineAnno: Object.assign({\n            anno_end: { match: /\\r?\\n/, pop: 1, lineBreaks: true },\n            whitespace: { match: /[ \\t\\v\\f]+/ },\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            comment_line_start: { match: \"//\", next: \"lineComment\" },\n            annospace: { match: \"@\" }\n        }, basicLexing),\n        stringComponents: {\n            string_delimiter: { match: /\"/, pop: 1 },\n            characters: { match: /[^\\\\\\n\\r\"]+/, lineBreaks: false },\n            special_character: { match: /\\\\[^\\n\\r]/, lineBreaks: false },\n            invalid_string_character: { match: /[\\x00-xFF]/, lineBreaks: true }\n        },\n        charComponents: {\n            char_delimiter: { match: /'/, pop: 1 },\n            special_character: { match: /\\\\./, lineBreaks: true },\n            character: { match: /./, lineBreaks: false },\n            invalid_string_character: { match: /[\\x00-xFF]/, lineBreaks: true, pop: 1 }\n        },\n        multiLineComment: {\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            comment_end: { match: \"*/\", pop: 1 },\n            comment: { match: /\\*|\\/|[^*\\/\\n]+/, lineBreaks: false },\n            newline: { match: /\\r?\\n/, lineBreaks: true }\n        },\n        lineComment: {\n            comment: { match: /[^\\n]/, lineBreaks: false },\n            comment_line_end: { match: /\\r?\\n/, lineBreaks: true, pop: 1 }\n        }\n    }, \"main\");\n}\nexports.createAnnoLexer = createAnnoLexer;\nclass TypeLexer {\n    constructor(lang, typeIds, parsePragma) {\n        this.typeIds = typeIds;\n        switch (lang) {\n            case \"L1\":\n            case \"L2\":\n            case \"L3\":\n            case \"L4\": {\n                this.coreLexer = createLexer();\n                break;\n            }\n            case \"C0\":\n            case \"C1\": {\n                this.coreLexer = createAnnoLexer();\n                break;\n            }\n            default: {\n                this.coreLexer = impossible_1.impossible(lang);\n            }\n        }\n        this.parsePragma = parsePragma || (() => immutable_1.Set());\n    }\n    addIdentifier(typeIdentifier) {\n        this.typeIds = this.typeIds.add(typeIdentifier);\n    }\n    next() {\n        const tok = this.coreLexer.next();\n        if (!tok)\n            return undefined;\n        else if (tok[\"type\"] === \"pragma\") {\n            this.typeIds = this.typeIds.union(this.parsePragma(tok.text));\n            return tok;\n        }\n        else if (tok[\"type\"] === \"identifier\" && this.typeIds.has(tok.value)) {\n            tok[\"type\"] = \"type_identifier\";\n            return tok;\n        }\n        else if (tok[\"type\"] === \"identifier\") {\n            return tok;\n        }\n        else {\n            return tok;\n        }\n    }\n    save() {\n        return this.coreLexer.save();\n    }\n    reset(chunk, state) {\n        this.coreLexer.reset(chunk, state);\n    }\n    formatError(token, message) {\n        return this.coreLexer.formatError(token, message);\n    }\n    has(tokenType) {\n        return this.coreLexer.has(tokenType);\n    }\n}\nexports.TypeLexer = TypeLexer;\nexports.lexer = new TypeLexer(\"C1\", immutable_1.Set());\n//# sourceMappingURL=lex.js.map"
        },
        {
          "id": 8,
          "identifier": "/Users/robs/r/jaco/node_modules/moo/moo.js",
          "name": "./node_modules/moo/moo.js",
          "index": 4,
          "index2": 1,
          "size": 12745,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/lex.ts",
          "issuerId": 17,
          "issuerName": "./src/lex.ts",
          "issuerPath": [
            {
              "id": 19,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "name": "./src/demo/demo.ts",
              "profile": {
                "factory": 64,
                "building": 1924
              }
            },
            {
              "id": 18,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
              "name": "./src/parse.ts",
              "profile": {
                "factory": 288,
                "building": 665,
                "dependencies": 114
              }
            },
            {
              "id": 17,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/lex.ts",
              "name": "./src/lex.ts",
              "profile": {
                "factory": 808,
                "building": 8,
                "dependencies": 637
              }
            }
          ],
          "profile": {
            "factory": 646,
            "building": 24
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": 7,
              "moduleIdentifier": "/Users/robs/r/jaco/lib/lex.js",
              "module": "./lib/lex.js",
              "moduleName": "./lib/lex.js",
              "type": "cjs require",
              "userRequest": "moo",
              "loc": "3:14-28"
            },
            {
              "moduleId": 17,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/lex.ts",
              "module": "./src/lex.ts",
              "moduleName": "./src/lex.ts",
              "type": "cjs require",
              "userRequest": "moo",
              "loc": "3:14-28"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [
            "ModuleConcatenation bailout: Module is not an ECMAScript module"
          ],
          "depth": 3,
          "source": "(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory) /* global define */\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory()\n  } else {\n    root.moo = factory()\n  }\n}(this, function() {\n  'use strict';\n\n  var hasOwnProperty = Object.prototype.hasOwnProperty\n\n  // polyfill assign(), so we support IE9+\n  var assign = typeof Object.assign === 'function' ? Object.assign :\n    // https://tc39.github.io/ecma262/#sec-object.assign\n    function(target, sources) {\n      if (target == null) {\n        throw new TypeError('Target cannot be null or undefined');\n      }\n      target = Object(target)\n\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i]\n        if (source == null) continue\n\n        for (var key in source) {\n          if (hasOwnProperty.call(source, key)) {\n            target[key] = source[key]\n          }\n        }\n      }\n      return target\n    }\n\n  var hasSticky = typeof new RegExp().sticky === 'boolean'\n\n  /***************************************************************************/\n\n  function isRegExp(o) { return o && o.constructor === RegExp }\n  function isObject(o) { return o && typeof o === 'object' && o.constructor !== RegExp && !Array.isArray(o) }\n\n  function reEscape(s) {\n    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n  }\n  function reGroups(s) {\n    var re = new RegExp('|' + s)\n    return re.exec('').length - 1\n  }\n  function reCapture(s) {\n    return '(' + s + ')'\n  }\n  function reUnion(regexps) {\n    var source =  regexps.map(function(s) {\n      return \"(?:\" + s + \")\"\n    }).join('|')\n    return \"(?:\" + source + \")\"\n  }\n\n  function regexpOrLiteral(obj) {\n    if (typeof obj === 'string') {\n      return '(?:' + reEscape(obj) + ')'\n\n    } else if (isRegExp(obj)) {\n      // TODO: consider /u support\n      if (obj.ignoreCase) { throw new Error('RegExp /i flag not allowed') }\n      if (obj.global) { throw new Error('RegExp /g flag is implied') }\n      if (obj.sticky) { throw new Error('RegExp /y flag is implied') }\n      if (obj.multiline) { throw new Error('RegExp /m flag is implied') }\n      return obj.source\n\n    } else {\n      throw new Error('not a pattern: ' + obj)\n    }\n  }\n\n  function objectToRules(object) {\n    var keys = Object.getOwnPropertyNames(object)\n    var result = []\n    for (var i=0; i<keys.length; i++) {\n      var key = keys[i]\n      var thing = object[key]\n      var rules = Array.isArray(thing) ? thing : [thing]\n      var match = []\n      rules.forEach(function(rule) {\n        if (isObject(rule)) {\n          if (match.length) result.push(ruleOptions(key, match))\n          result.push(ruleOptions(key, rule))\n          match = []\n        } else {\n          match.push(rule)\n        }\n      })\n      if (match.length) result.push(ruleOptions(key, match))\n    }\n    return result\n  }\n\n  function arrayToRules(array) {\n    var result = []\n    for (var i=0; i<array.length; i++) {\n      var obj = array[i]\n      if (!obj.name) {\n        throw new Error('Rule has no name: ' + JSON.stringify(obj))\n      }\n      result.push(ruleOptions(obj.name, obj))\n    }\n    return result\n  }\n\n  function ruleOptions(name, obj) {\n    if (typeof obj !== 'object' || Array.isArray(obj) || isRegExp(obj)) {\n      obj = { match: obj }\n    }\n\n    // nb. error implies lineBreaks\n    var options = assign({\n      tokenType: name,\n      lineBreaks: !!obj.error,\n      pop: false,\n      next: null,\n      push: null,\n      error: false,\n      value: null,\n      getType: null,\n    }, obj)\n\n    // convert to array\n    var match = options.match\n    options.match = Array.isArray(match) ? match : match ? [match] : []\n    options.match.sort(function(a, b) {\n      return isRegExp(a) && isRegExp(b) ? 0\n           : isRegExp(b) ? -1 : isRegExp(a) ? +1 : b.length - a.length\n    })\n    if (options.keywords) {\n      options.getType = keywordTransform(options.keywords)\n    }\n    return options\n  }\n\n  function compileRules(rules, hasStates) {\n    rules = Array.isArray(rules) ? arrayToRules(rules) : objectToRules(rules)\n\n    var errorRule = null\n    var groups = []\n    var parts = []\n    for (var i=0; i<rules.length; i++) {\n      var options = rules[i]\n\n      if (options.error) {\n        if (errorRule) {\n          throw new Error(\"Multiple error rules not allowed: (for token '\" + options.tokenType + \"')\")\n        }\n        errorRule = options\n      }\n\n      // skip rules with no match\n      if (options.match.length === 0) {\n        continue\n      }\n      groups.push(options)\n\n      // convert to RegExp\n      var pat = reUnion(options.match.map(regexpOrLiteral))\n\n      // validate\n      var regexp = new RegExp(pat)\n      if (regexp.test(\"\")) {\n        throw new Error(\"RegExp matches empty string: \" + regexp)\n      }\n      var groupCount = reGroups(pat)\n      if (groupCount > 0) {\n        throw new Error(\"RegExp has capture groups: \" + regexp + \"\\nUse (?: … ) instead\")\n      }\n      if (!hasStates && (options.pop || options.push || options.next)) {\n        throw new Error(\"State-switching options are not allowed in stateless lexers (for token '\" + options.tokenType + \"')\")\n      }\n\n      // try and detect rules matching newlines\n      if (!options.lineBreaks && regexp.test('\\n')) {\n        throw new Error('Rule should declare lineBreaks: ' + regexp)\n      }\n\n      // store regex\n      parts.push(reCapture(pat))\n    }\n\n    var suffix = hasSticky ? '' : '|(?:)'\n    var flags = hasSticky ? 'ym' : 'gm'\n    var combined = new RegExp(reUnion(parts) + suffix, flags)\n\n    return {regexp: combined, groups: groups, error: errorRule}\n  }\n\n  function compile(rules) {\n    var result = compileRules(rules)\n    return new Lexer({start: result}, 'start')\n  }\n\n  function compileStates(states, start) {\n    var keys = Object.getOwnPropertyNames(states)\n    if (!start) start = keys[0]\n\n    var map = Object.create(null)\n    for (var i=0; i<keys.length; i++) {\n      var key = keys[i]\n      map[key] = compileRules(states[key], true)\n    }\n\n    for (var i=0; i<keys.length; i++) {\n      var groups = map[keys[i]].groups\n      for (var j=0; j<groups.length; j++) {\n        var g = groups[j]\n        var state = g && (g.push || g.next)\n        if (state && !map[state]) {\n          throw new Error(\"Missing state '\" + state + \"' (in token '\" + g.tokenType + \"' of state '\" + keys[i] + \"')\")\n        }\n        if (g && g.pop && +g.pop !== 1) {\n          throw new Error(\"pop must be 1 (in token '\" + g.tokenType + \"' of state '\" + keys[i] + \"')\")\n        }\n      }\n    }\n\n    return new Lexer(map, start)\n  }\n\n  function keywordTransform(map) {\n    var reverseMap = Object.create(null)\n    var byLength = Object.create(null)\n    var types = Object.getOwnPropertyNames(map)\n    for (var i=0; i<types.length; i++) {\n      var tokenType = types[i]\n      var item = map[tokenType]\n      var keywordList = Array.isArray(item) ? item : [item]\n      keywordList.forEach(function(keyword) {\n        (byLength[keyword.length] = byLength[keyword.length] || []).push(keyword)\n        if (typeof keyword !== 'string') {\n          throw new Error(\"keyword must be string (in keyword '\" + tokenType + \"')\")\n        }\n        reverseMap[keyword] = tokenType\n      })\n    }\n\n    // fast string lookup\n    // https://jsperf.com/string-lookups\n    function str(x) { return JSON.stringify(x) }\n    var source = ''\n    source += '(function(value) {\\n'\n    source += 'switch (value.length) {\\n'\n    for (var length in byLength) {\n      var keywords = byLength[length]\n      source += 'case ' + length + ':\\n'\n      source += 'switch (value) {\\n'\n      keywords.forEach(function(keyword) {\n        var tokenType = reverseMap[keyword]\n        source += 'case ' + str(keyword) + ': return ' + str(tokenType) + '\\n'\n      })\n      source += '}\\n'\n    }\n    source += '}\\n'\n    source += '})'\n    return eval(source) // getType\n  }\n\n  /***************************************************************************/\n\n  var Lexer = function(states, state) {\n    this.startState = state\n    this.states = states\n    this.buffer = ''\n    this.stack = []\n    this.reset()\n  }\n\n  Lexer.prototype.reset = function(data, info) {\n    this.buffer = data || ''\n    this.index = 0\n    this.line = info ? info.line : 1\n    this.col = info ? info.col : 1\n    this.setState(info ? info.state : this.startState)\n    return this\n  }\n\n  Lexer.prototype.save = function() {\n    return {\n      line: this.line,\n      col: this.col,\n      state: this.state,\n    }\n  }\n\n  Lexer.prototype.setState = function(state) {\n    if (!state || this.state === state) return\n    this.state = state\n    var info = this.states[state]\n    this.groups = info.groups\n    this.error = info.error || {lineBreaks: true, shouldThrow: true}\n    this.re = info.regexp\n  }\n\n  Lexer.prototype.popState = function() {\n    this.setState(this.stack.pop())\n  }\n\n  Lexer.prototype.pushState = function(state) {\n    this.stack.push(this.state)\n    this.setState(state)\n  }\n\n  Lexer.prototype._eat = hasSticky ? function(re) { // assume re is /y\n    return re.exec(this.buffer)\n  } : function(re) { // assume re is /g\n    var match = re.exec(this.buffer)\n    // will always match, since we used the |(?:) trick\n    if (match[0].length === 0) {\n      return null\n    }\n    return match\n  }\n\n  Lexer.prototype._getGroup = function(match) {\n    if (match === null) {\n      return -1\n    }\n\n    var groupCount = this.groups.length\n    for (var i = 0; i < groupCount; i++) {\n      if (match[i + 1] !== undefined) {\n        return i\n      }\n    }\n    throw new Error('oops')\n  }\n\n  function tokenToString() {\n    return this.value\n  }\n\n  Lexer.prototype.next = function() {\n    var re = this.re\n    var buffer = this.buffer\n\n    var index = re.lastIndex = this.index\n    if (index === buffer.length) {\n      return // EOF\n    }\n\n    var match = this._eat(re)\n    var i = this._getGroup(match)\n\n    var group, text\n    if (i === -1) {\n      group = this.error\n\n      // consume rest of buffer\n      text = buffer.slice(index)\n\n    } else {\n      text = match[0]\n      group = this.groups[i]\n    }\n\n    // count line breaks\n    var lineBreaks = 0\n    if (group.lineBreaks) {\n      var matchNL = /\\n/g\n      var nl = 1\n      if (text === '\\n') {\n        lineBreaks = 1\n      } else {\n        while (matchNL.exec(text)) { lineBreaks++; nl = matchNL.lastIndex }\n      }\n    }\n\n    var token = {\n      type: (group.getType && group.getType(text)) || group.tokenType,\n      value: group.value ? group.value(text) : text,\n      text: text,\n      toString: tokenToString,\n      offset: index,\n      lineBreaks: lineBreaks,\n      line: this.line,\n      col: this.col,\n    }\n    // nb. adding more props to token object will make V8 sad!\n\n    var size = text.length\n    this.index += size\n    this.line += lineBreaks\n    if (lineBreaks !== 0) {\n      this.col = size - nl + 1\n    } else {\n      this.col += size\n    }\n    // throw, if no rule with {error: true}\n    if (group.shouldThrow) {\n      throw new Error(this.formatError(token, \"invalid syntax\"))\n    }\n\n    if (group.pop) this.popState()\n    else if (group.push) this.pushState(group.push)\n    else if (group.next) this.setState(group.next)\n    return token\n  }\n\n  if (typeof Symbol !== 'undefined' && Symbol.iterator) {\n    var LexerIterator = function(lexer) {\n      this.lexer = lexer\n    }\n\n    LexerIterator.prototype.next = function() {\n      var token = this.lexer.next()\n      return {value: token, done: !token}\n    }\n\n    LexerIterator.prototype[Symbol.iterator] = function() {\n      return this\n    }\n\n    Lexer.prototype[Symbol.iterator] = function() {\n      return new LexerIterator(this)\n    }\n  }\n\n  Lexer.prototype.formatError = function(token, message) {\n    var value = token.value\n    var index = token.offset\n    var eol = token.lineBreaks ? value.indexOf('\\n') : value.length\n    var start = Math.max(0, index - token.col + 1)\n    var firstLine = this.buffer.substring(start, index + eol)\n    message += \" at line \" + token.line + \" col \" + token.col + \":\\n\\n\"\n    message += \"  \" + firstLine + \"\\n\"\n    message += \"  \" + Array(token.col).join(\" \") + \"^\"\n    return message\n  }\n\n  Lexer.prototype.clone = function() {\n    return new Lexer(this.states, this.state)\n  }\n\n  Lexer.prototype.has = function(tokenType) {\n    for (var s in this.states) {\n      var groups = this.states[s].groups\n      for (var i=0; i<groups.length; i++) {\n        var group = groups[i]\n        if (group.tokenType === tokenType) return true\n        if (group.keywords && hasOwnProperty.call(group.keywords, tokenType)) {\n          return true\n        }\n      }\n    }\n    return false\n  }\n\n\n  return {\n    compile: compile,\n    states: compileStates,\n    error: Object.freeze({error: true}),\n  }\n\n}))\n"
        },
        {
          "id": 9,
          "identifier": "external \"CodeMirror\"",
          "name": "external \"CodeMirror\"",
          "index": 19,
          "index2": 18,
          "size": 42,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "issuerId": 19,
          "issuerName": "./src/demo/demo.ts",
          "issuerPath": [
            {
              "id": 19,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "name": "./src/demo/demo.ts",
              "profile": {
                "factory": 64,
                "building": 1924
              }
            }
          ],
          "profile": {
            "factory": 288,
            "building": 665,
            "dependencies": 114
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": 19,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "module": "./src/demo/demo.ts",
              "moduleName": "./src/demo/demo.ts",
              "type": "cjs require",
              "userRequest": "codemirror",
              "loc": "5:19-40"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [
            "ModuleConcatenation bailout: Module is not an ECMAScript module"
          ],
          "depth": 1
        },
        {
          "id": 10,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/flow.ts",
          "name": "./src/typecheck/flow.ts",
          "index": 18,
          "index2": 16,
          "size": 9676,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "issuerId": 12,
          "issuerName": "./src/typecheck/programs.ts",
          "issuerPath": [
            {
              "id": 19,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "name": "./src/demo/demo.ts",
              "profile": {
                "factory": 64,
                "building": 1924
              }
            },
            {
              "id": 12,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
              "name": "./src/typecheck/programs.ts",
              "profile": {
                "factory": 288,
                "building": 665,
                "dependencies": 114
              }
            }
          ],
          "profile": {
            "factory": 703,
            "building": 8,
            "dependencies": 347
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": 12,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
              "module": "./src/typecheck/programs.ts",
              "moduleName": "./src/typecheck/programs.ts",
              "type": "cjs require",
              "userRequest": "./flow",
              "loc": "10:15-32"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [
            "ModuleConcatenation bailout: Module is not an ECMAScript module"
          ],
          "depth": 2,
          "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst impossible_1 = require(\"@calculemus/impossible\");\nconst immutable_1 = require(\"immutable\");\nconst error_1 = require(\"./error\");\n/**\n * Returns the free locals and free functions of an expression. (The type system ensures these are\n * disjoint within any top-level declaration.)\n */\nfunction expressionFreeVars(exp) {\n    switch (exp.tag) {\n        case \"Identifier\":\n            return immutable_1.Set([exp.name]);\n        case \"IntLiteral\":\n        case \"StringLiteral\":\n        case \"CharLiteral\":\n        case \"BoolLiteral\":\n        case \"NullLiteral\":\n        case \"AllocExpression\":\n        case \"ResultExpression\":\n            return immutable_1.Set();\n        case \"ArrayMemberExpression\":\n            return expressionFreeVars(exp.object).union(expressionFreeVars(exp.index));\n        case \"StructMemberExpression\":\n            return expressionFreeVars(exp.object);\n        case \"CallExpression\":\n        case \"IndirectCallExpression\":\n            return exp.arguments.reduce((fv, arg) => fv.union(expressionFreeVars(arg)), expressionFreeVars(exp.callee));\n        case \"UnaryExpression\":\n        case \"CastExpression\":\n        case \"LengthExpression\":\n        case \"HasTagExpression\":\n            return expressionFreeVars(exp.argument);\n        case \"BinaryExpression\":\n        case \"LogicalExpression\":\n            return expressionFreeVars(exp.left).union(expressionFreeVars(exp.right));\n        case \"ConditionalExpression\":\n            return expressionFreeVars(exp.test)\n                .union(expressionFreeVars(exp.consequent))\n                .union(expressionFreeVars(exp.alternate));\n        case \"AllocArrayExpression\":\n            return expressionFreeVars(exp.size);\n        default:\n            return impossible_1.impossible(exp);\n    }\n}\nexports.expressionFreeVars = expressionFreeVars;\n/**\n * Ensures that the free locals of an expression have been defined along every control path\n * Raises an error if there are potentially un-initialized stack locals\n *  - Precondition: the expression must have passed typechecking\n *  - Precondition: all the current stack locals must be in [locals]\n *  - Precondition: [defined] is the subset of [locals] defined on every\n *  - Returns the free functions (the free locals that are not stack-allocated locals)\n */\nfunction checkExpressionUsesGetFreeFunctions(locals, defined, exp) {\n    const freeVars = expressionFreeVars(exp);\n    const freeLocals = freeVars.intersect(locals);\n    const undefinedFreeLocals = freeLocals.subtract(defined);\n    for (let badLocal of undefinedFreeLocals.values()) {\n        return error_1.error(`local ${badLocal} used without necessarily being defined`);\n    }\n    return freeVars.subtract(locals);\n}\nexports.checkExpressionUsesGetFreeFunctions = checkExpressionUsesGetFreeFunctions;\n/**\n *\n * @param locals All locals valid at this point in the program\n * @param constants Locals that are free in the postcondition and so must not be modified\n * @param defined Locals that have been previously defined on all control paths to this point\n * @param stm The statement being analyized\n * @returns\n *   - locals: locals valid after running this statement (changes when the statement is a declaration)\n *   - defined: definitely-defined locals after running this statement\n *   - functions: free functions in this statement\n *   - returns: does\n */\nfunction checkStatementFlow(locals, constants, defined, stm) {\n    switch (stm.tag) {\n        case \"AssignmentStatement\": {\n            let functions = checkExpressionUsesGetFreeFunctions(locals, defined, stm.right);\n            if (stm.operator === \"=\" && stm.left.tag === \"Identifier\") {\n                if (constants.has(stm.left.name)) {\n                    error_1.error(`assigning to ${stm.left.name} is not permitted when ${stm.left.name} is used in postcondition`);\n                }\n                defined = defined.add(stm.left.name);\n            }\n            else {\n                functions = functions.union(checkExpressionUsesGetFreeFunctions(locals, defined, stm.left));\n            }\n            return { locals: locals, defined: defined, functions: functions, returns: false };\n        }\n        case \"UpdateStatement\": {\n            return {\n                locals: locals,\n                defined: defined,\n                functions: checkExpressionUsesGetFreeFunctions(locals, defined, stm.argument),\n                returns: false\n            };\n        }\n        case \"ExpressionStatement\": {\n            return {\n                locals: locals,\n                defined: defined,\n                functions: checkExpressionUsesGetFreeFunctions(locals, defined, stm.expression),\n                returns: false\n            };\n        }\n        case \"VariableDeclaration\": {\n            if (stm.init === null)\n                return {\n                    locals: locals.add(stm.id.name),\n                    defined: defined,\n                    functions: immutable_1.Set(),\n                    returns: false\n                };\n            return {\n                locals: locals.add(stm.id.name),\n                defined: defined.add(stm.id.name),\n                functions: checkExpressionUsesGetFreeFunctions(locals, defined, stm.init),\n                returns: false\n            };\n        }\n        case \"IfStatement\": {\n            const test = checkExpressionUsesGetFreeFunctions(locals, defined, stm.test);\n            const consequent = checkStatementFlow(locals, constants, defined, stm.consequent);\n            if (stm.alternate) {\n                const alternate = checkStatementFlow(locals, constants, defined, stm.alternate);\n                return {\n                    locals: locals,\n                    defined: consequent.defined.intersect(alternate.defined),\n                    functions: test.union(consequent.functions).union(alternate.functions),\n                    returns: consequent.returns && alternate.returns\n                };\n            }\n            else {\n                return {\n                    locals: locals,\n                    defined: defined,\n                    functions: test.union(consequent.functions),\n                    returns: false\n                };\n            }\n        }\n        case \"WhileStatement\": {\n            const test = stm.invariants.reduce((set, exp) => set.union(checkExpressionUsesGetFreeFunctions(locals, defined, exp)), checkExpressionUsesGetFreeFunctions(locals, defined, stm.test));\n            const body = checkStatementFlow(locals, constants, defined, stm.body);\n            return {\n                locals: locals,\n                defined: defined,\n                functions: test.union(body.functions),\n                returns: false\n            };\n        }\n        case \"ForStatement\": {\n            const init = checkStatementFlow(locals, constants, defined, stm.init || { tag: \"BlockStatement\", body: [] });\n            const test = stm.invariants.reduce((set, exp) => set.union(checkExpressionUsesGetFreeFunctions(init.locals, init.defined, exp)), checkExpressionUsesGetFreeFunctions(init.locals, init.defined, stm.test));\n            const body = checkStatementFlow(init.locals, constants, init.defined, stm.body);\n            const update = checkStatementFlow(init.locals, constants, body.defined, stm.update || { tag: \"BlockStatement\", body: [] });\n            return {\n                locals: locals,\n                defined: init.defined,\n                functions: init.functions\n                    .union(test)\n                    .union(body.functions)\n                    .union(update.functions),\n                returns: false\n            };\n        }\n        case \"ReturnStatement\": {\n            return {\n                locals: locals,\n                defined: locals,\n                functions: stm.argument === null\n                    ? immutable_1.Set()\n                    : checkExpressionUsesGetFreeFunctions(locals, defined, stm.argument),\n                returns: true\n            };\n        }\n        case \"BlockStatement\": {\n            const body = stm.body.reduce(({ locals, defined, functions, returns }, stm) => {\n                const result = checkStatementFlow(locals, constants, defined, stm);\n                return {\n                    locals: result.locals,\n                    defined: result.defined,\n                    functions: functions.union(result.functions),\n                    returns: returns || result.returns\n                };\n            }, { locals: locals, defined: defined, functions: immutable_1.Set(), returns: false });\n            return {\n                locals: locals,\n                defined: body.defined.intersect(locals),\n                functions: body.functions,\n                returns: body.returns\n            };\n        }\n        case \"AssertStatement\": {\n            return {\n                locals: locals,\n                defined: defined,\n                functions: checkExpressionUsesGetFreeFunctions(locals, defined, stm.test),\n                returns: false\n            };\n        }\n        case \"ErrorStatement\": {\n            return {\n                locals: locals,\n                defined: defined,\n                functions: checkExpressionUsesGetFreeFunctions(locals, defined, stm.argument),\n                returns: true\n            };\n        }\n        case \"BreakStatement\":\n        case \"ContinueStatement\": {\n            return { locals: locals, defined: locals, functions: immutable_1.Set(), returns: false };\n        }\n        default:\n            return impossible_1.impossible(stm);\n    }\n}\nexports.checkStatementFlow = checkStatementFlow;\n"
        },
        {
          "id": 11,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/statements.ts",
          "name": "./src/typecheck/statements.ts",
          "index": 17,
          "index2": 15,
          "size": 5497,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "issuerId": 12,
          "issuerName": "./src/typecheck/programs.ts",
          "issuerPath": [
            {
              "id": 19,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "name": "./src/demo/demo.ts",
              "profile": {
                "factory": 64,
                "building": 1924
              }
            },
            {
              "id": 12,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
              "name": "./src/typecheck/programs.ts",
              "profile": {
                "factory": 288,
                "building": 665,
                "dependencies": 114
              }
            }
          ],
          "profile": {
            "factory": 703,
            "building": 8,
            "dependencies": 347
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": 12,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
              "module": "./src/typecheck/programs.ts",
              "moduleName": "./src/typecheck/programs.ts",
              "type": "cjs require",
              "userRequest": "./statements",
              "loc": "9:21-44"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [
            "ModuleConcatenation bailout: Module is not an ECMAScript module"
          ],
          "depth": 2,
          "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst impossible_1 = require(\"@calculemus/impossible\");\nconst error_1 = require(\"./error\");\nconst types_1 = require(\"./types\");\nconst expressions_1 = require(\"./expressions\");\nfunction checkStatements(genv, env, stms, returning, inLoop) {\n    stms.reduce((env, stm) => checkStatement(genv, env, stm, returning, inLoop), env);\n}\nexports.checkStatements = checkStatements;\nfunction checkStatement(genv, env, stm, returning, inLoop) {\n    switch (stm.tag) {\n        case \"AssignmentStatement\": {\n            const left = expressions_1.synthLValue(genv, env, null, stm.left);\n            const right = expressions_1.checkExpression(genv, env, null, stm.right, left);\n            left;\n            right; // TODO bogus\n            return env;\n            /*\n            if (left.tag === \"AmbiguousNullPointer\") {\n                throw new Error(\n                    \"LValue cannot have ambiguous pointer type (should be impossible, please report)\"\n                );\n            } else if (!isSubtype(genv, right, left)) {\n                return error(\"sides of assignment have different type\"); // TODO: types\n            } else {\n                return env;\n            }\n            */\n        }\n        case \"UpdateStatement\": {\n            expressions_1.checkExpression(genv, env, null, stm.argument, { tag: \"IntType\" });\n            return env;\n        }\n        case \"ExpressionStatement\": {\n            const expType = types_1.actualSynthed(genv, expressions_1.synthExpression(genv, env, null, stm.expression));\n            if (expType.tag === \"StructType\")\n                return error_1.error(`expression used as statements cannot have type 'struct ${expType.id.name}'`);\n            if (expType.tag === \"NamedFunctionType\")\n                return error_1.error(`expression used as statements cannot have function type '${expType.definition.id.name}'`);\n            return env;\n        }\n        case \"VariableDeclaration\": {\n            types_1.checkTypeInDeclaration(genv, stm.kind);\n            if (env.has(stm.id.name)) {\n                return error_1.error(`variable '${stm.id.name}' declared twice`);\n            }\n            else if (stm.init !== null) {\n                expressions_1.checkExpression(genv, env, null, stm.init, stm.kind);\n            }\n            return env.set(stm.id.name, stm.kind);\n        }\n        case \"IfStatement\": {\n            expressions_1.checkExpression(genv, env, null, stm.test, { tag: \"BoolType\" });\n            checkStatement(genv, env, stm.consequent, returning, inLoop);\n            if (stm.alternate)\n                checkStatement(genv, env, stm.alternate, returning, inLoop);\n            return env;\n        }\n        case \"WhileStatement\": {\n            expressions_1.checkExpression(genv, env, null, stm.test, { tag: \"BoolType\" });\n            stm.invariants.forEach(anno => expressions_1.checkExpression(genv, env, { tag: \"@loop_invariant\" }, anno, { tag: \"BoolType\" }));\n            checkStatement(genv, env, stm.body, returning, true);\n            return env;\n        }\n        case \"ForStatement\": {\n            const env0 = stm.init ? checkStatement(genv, env, stm.init, null, false) : env;\n            expressions_1.checkExpression(genv, env0, null, stm.test, { tag: \"BoolType\" });\n            if (stm.update)\n                checkStatement(genv, env0, stm.update, null, false);\n            stm.invariants.forEach(anno => expressions_1.checkExpression(genv, env0, { tag: \"@loop_invariant\" }, anno, { tag: \"BoolType\" }));\n            checkStatement(genv, env0, stm.body, returning, true);\n            return env;\n        }\n        case \"ReturnStatement\": {\n            if (returning === null) {\n                return error_1.error(`return statements not allowed`);\n            }\n            else if (returning.tag === \"VoidType\") {\n                if (stm.argument !== null) {\n                    return error_1.error(\"function returning void must invoke 'return', not 'return e'\");\n                }\n            }\n            else {\n                if (stm.argument === null) {\n                    return error_1.error(\"type mismatch, expected a return type found void\");\n                }\n                else {\n                    expressions_1.checkExpression(genv, env, null, stm.argument, returning);\n                }\n            }\n            return env;\n        }\n        case \"BlockStatement\": {\n            checkStatements(genv, env, stm.body, returning, inLoop);\n            return env;\n        }\n        case \"AssertStatement\": {\n            expressions_1.checkExpression(genv, env, stm.contract ? { tag: \"@assert\" } : null, stm.test, {\n                tag: \"BoolType\"\n            });\n            return env;\n        }\n        case \"ErrorStatement\": {\n            expressions_1.checkExpression(genv, env, null, stm.argument, { tag: \"StringType\" });\n            return env;\n        }\n        case \"BreakStatement\": {\n            if (!inLoop)\n                return error_1.error(\"break statement not allowed\", \"break statements must be inside the body of a for-loop or while-loop\");\n            return env;\n        }\n        case \"ContinueStatement\": {\n            if (!inLoop)\n                return error_1.error(\"continue statement not allowed\", \"continue statements must be inside the body of a for-loop or while-loop\");\n            return env;\n        }\n        default: {\n            return impossible_1.impossible(stm);\n        }\n    }\n}\n"
        },
        {
          "id": 12,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "name": "./src/typecheck/programs.ts",
          "index": 12,
          "index2": 17,
          "size": 9016,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "issuerId": 19,
          "issuerName": "./src/demo/demo.ts",
          "issuerPath": [
            {
              "id": 19,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "name": "./src/demo/demo.ts",
              "profile": {
                "factory": 64,
                "building": 1924
              }
            }
          ],
          "profile": {
            "factory": 288,
            "building": 665,
            "dependencies": 114
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": 19,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "module": "./src/demo/demo.ts",
              "moduleName": "./src/demo/demo.ts",
              "type": "cjs require",
              "userRequest": "../typecheck/programs",
              "loc": "4:19-51"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [
            "ModuleConcatenation bailout: Module is not an ECMAScript module"
          ],
          "depth": 1,
          "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst impossible_1 = require(\"@calculemus/impossible\");\nconst immutable_1 = require(\"immutable\");\nconst error_1 = require(\"./error\");\nconst globalenv_1 = require(\"./globalenv\");\nconst types_1 = require(\"./types\");\nconst expressions_1 = require(\"./expressions\");\nconst statements_1 = require(\"./statements\");\nconst flow_1 = require(\"./flow\");\nfunction getDefinedFromParams(params) {\n    return params.reduce((set, param) => set.add(param.id.name), immutable_1.Set());\n}\nfunction getEnvironmentFromParams(genv, params) {\n    return params.reduce((env, param) => {\n        types_1.checkTypeInDeclaration(genv, param.kind, true);\n        if (env.has(param.id.name)) {\n            return error_1.error(`variable ${param.id.name} declared twice`);\n        }\n        else {\n            return env.set(param.id.name, param.kind);\n        }\n    }, immutable_1.Map());\n}\nfunction checkDeclaration(library, genv, decl) {\n    switch (decl.tag) {\n        case \"Pragma\": {\n            return immutable_1.Set();\n        }\n        case \"StructDeclaration\": {\n            if (decl.definitions === null)\n                return immutable_1.Set();\n            if (!library && globalenv_1.isLibraryStruct(genv, decl.id.name))\n                return error_1.error(`struct ${decl.id.name} is declared in a library and cannot be defined here`);\n            const previousStruct = globalenv_1.getStructDefinition(genv, decl.id.name);\n            if (previousStruct !== null && previousStruct.definitions !== null)\n                return error_1.error(`struct ${decl.id.name} is defined twice`, \"structs can only be defined once\");\n            decl.definitions.reduce((set, definition) => {\n                if (set.has(definition.id.name))\n                    error_1.error(`field '${definition.id.name}' used more than once in definition of struct '${decl.id.name}'`);\n                const undefinedTypePart = types_1.typeSizeFullyDefined(genv, definition.kind);\n                if (undefinedTypePart !== null) {\n                    return error_1.error(`cannot define struct ${decl.id.name} because component struct ${undefinedTypePart} is not fully defined`);\n                }\n                return set.add(definition.id.name);\n            }, immutable_1.Set());\n            return immutable_1.Set();\n        }\n        case \"TypeDefinition\": {\n            const previousTypeDef = globalenv_1.getTypeDef(genv, decl.definition.id.name);\n            const previousFunction = globalenv_1.getFunctionDeclaration(genv, decl.definition.id.name);\n            if (previousTypeDef !== null)\n                return error_1.error(`type name '${decl.definition.id.name}' already defined as a type`);\n            if (previousFunction !== null)\n                return error_1.error(`type name '${decl.definition.id.name}' already used in a function ${previousFunction.body === null ? \"declaration\" : \"definition\"}`);\n            return immutable_1.Set();\n        }\n        case \"FunctionTypeDefinition\": {\n            const previousTypeDef = globalenv_1.getTypeDef(genv, decl.definition.id.name);\n            const previousFunction = globalenv_1.getFunctionDeclaration(genv, decl.definition.id.name);\n            if (previousTypeDef !== null)\n                return error_1.error(`function type name '${decl.definition.id.name}' already defined as a type`);\n            if (previousFunction !== null)\n                return error_1.error(`function type name '${decl.definition.id.name}' already used in a function ${previousFunction.body === null ? \"declaration\" : \"definition\"}`);\n            types_1.checkFunctionReturnType(genv, decl.definition.returns);\n            const env = getEnvironmentFromParams(genv, decl.definition.params);\n            const defined = getDefinedFromParams(decl.definition.params);\n            let functionsUsed = decl.definition.preconditions.reduce((functionsUsed, anno) => {\n                expressions_1.checkExpression(genv, env, { tag: \"@requires\" }, anno, { tag: \"BoolType\" });\n                return functionsUsed.union(flow_1.checkExpressionUsesGetFreeFunctions(defined, defined, anno));\n            }, decl.definition.postconditions.reduce((functionsUsed, anno) => {\n                expressions_1.checkExpression(genv, env, { tag: \"@ensures\", returns: decl.definition.returns }, anno, {\n                    tag: \"BoolType\"\n                });\n                return functionsUsed.union(flow_1.checkExpressionUsesGetFreeFunctions(defined, defined, anno));\n            }, immutable_1.Set()));\n            return functionsUsed;\n        }\n        case \"FunctionDeclaration\": {\n            types_1.checkFunctionReturnType(genv, decl.returns);\n            const env = getEnvironmentFromParams(genv, decl.params);\n            const defined = getDefinedFromParams(decl.params);\n            let functionsUsed = decl.preconditions.reduce((functionsUsed, anno) => {\n                expressions_1.checkExpression(genv, env, { tag: \"@requires\" }, anno, { tag: \"BoolType\" });\n                return functionsUsed.union(flow_1.checkExpressionUsesGetFreeFunctions(defined, defined, anno));\n            }, decl.postconditions.reduce((functionsUsed, anno) => {\n                expressions_1.checkExpression(genv, env, { tag: \"@ensures\", returns: decl.returns }, anno, {\n                    tag: \"BoolType\"\n                });\n                return functionsUsed.union(flow_1.checkExpressionUsesGetFreeFunctions(defined, defined, anno));\n            }, immutable_1.Set()));\n            const previousFunction = globalenv_1.getFunctionDeclaration(genv, decl.id.name);\n            if (previousFunction !== null) {\n                if (previousFunction.body !== null && decl.body !== null)\n                    error_1.error(`function ${decl.id.name} defined more than once`);\n                if (!types_1.equalFunctionTypes(genv, previousFunction, decl)) {\n                    const oldone = previousFunction.body === null ? \"declaration\" : \"definition\";\n                    const newone = decl.body === null ? \"declaration\" : \"definition\";\n                    error_1.error(`function ${newone} for '${decl.id.name}' does not match previous function ${oldone}`);\n                }\n            }\n            if (decl.body !== null) {\n                if (library)\n                    error_1.error(`functions cannot be defined in a library header file`);\n                if (globalenv_1.isLibraryFunction(genv, decl.id.name))\n                    error_1.error(`function ${decl.id.name} is declared in a library header and cannot be defined`);\n                const recursiveGlobalEnv = globalenv_1.addDecl(false, genv, {\n                    tag: \"FunctionDeclaration\",\n                    id: decl.id,\n                    returns: decl.returns,\n                    params: decl.params,\n                    preconditions: [],\n                    postconditions: [],\n                    body: null\n                });\n                statements_1.checkStatements(recursiveGlobalEnv, env, decl.body.body, decl.returns, false);\n                let constants = decl.postconditions.reduce((constants, anno) => constants.union(flow_1.expressionFreeVars(anno).intersect(defined)), immutable_1.Set());\n                const functionAnalysis = flow_1.checkStatementFlow(defined, constants, defined, decl.body);\n                if (decl.returns.tag !== \"VoidType\" && !functionAnalysis.returns)\n                    return error_1.error(`function ${decl.id.name} has non-void return type but does not return along every path`);\n                functionsUsed = functionAnalysis.functions.union(functionsUsed);\n            }\n            return functionsUsed;\n        }\n        /* instanbul ignore next */\n        default: {\n            return impossible_1.impossible(decl);\n        }\n    }\n}\nfunction checkProgram(libs, decls) {\n    const libenv = libs.reduce(({ genv, functionsUsed }, decl) => {\n        const newFunctions = checkDeclaration(true, genv, decl);\n        return {\n            genv: globalenv_1.addDecl(true, genv, decl),\n            functionsUsed: newFunctions.union(functionsUsed)\n        };\n    }, { genv: globalenv_1.initMain, functionsUsed: immutable_1.Set() });\n    const progenv = decls.reduce(({ genv, functionsUsed }, decl) => {\n        const newFunctions = checkDeclaration(false, genv, decl);\n        return {\n            genv: globalenv_1.addDecl(false, genv, decl),\n            functionsUsed: newFunctions.union(functionsUsed)\n        };\n    }, libenv);\n    progenv.functionsUsed.union(immutable_1.Set([\"main\"])).forEach((name) => {\n        const def = globalenv_1.getFunctionDeclaration(progenv.genv, name);\n        if (def === null)\n            return error_1.error(`No definition for ${name} (should be impossible, please report)`);\n        if (def.body === null && !globalenv_1.isLibraryFunction(progenv.genv, def.id.name))\n            return error_1.error(`function ${name} is never defined`);\n    });\n}\nexports.checkProgram = checkProgram;\n"
        },
        {
          "id": 13,
          "identifier": "/Users/robs/r/jaco/lib/program-rules.js",
          "name": "./lib/program-rules.js",
          "index": 11,
          "index2": 9,
          "size": 24128,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
          "issuerId": 18,
          "issuerName": "./src/parse.ts",
          "issuerPath": [
            {
              "id": 19,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "name": "./src/demo/demo.ts",
              "profile": {
                "factory": 64,
                "building": 1924
              }
            },
            {
              "id": 18,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
              "name": "./src/parse.ts",
              "profile": {
                "factory": 288,
                "building": 665,
                "dependencies": 114
              }
            }
          ],
          "profile": {
            "factory": 808,
            "building": 8,
            "dependencies": 637
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": 18,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
              "module": "./src/parse.ts",
              "moduleName": "./src/parse.ts",
              "type": "cjs require",
              "userRequest": "../lib/program-rules",
              "loc": "9:21-52"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [
            "ModuleConcatenation bailout: Module is not an ECMAScript module"
          ],
          "depth": 2,
          "source": "// Generated automatically by nearley, version 2.13.0\n// http://github.com/Hardmath123/nearley\n(function () {\nfunction id(x) { return x[0]; }\n\nconst lexer = require('./lex').lexer;\nconst util = require('./parser-util');\nvar grammar = {\n    Lexer: lexer,\n    ParserRules: [\n    {\"name\": \"Expression\", \"symbols\": [\"Exp0\"], \"postprocess\": id},\n    {\"name\": \"Identifier\", \"symbols\": [(lexer.has(\"identifier\") ? {type: \"identifier\"} : identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"TypeIdentifier\", \"symbols\": [(lexer.has(\"type_identifier\") ? {type: \"type_identifier\"} : type_identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"StructName\", \"symbols\": [(lexer.has(\"identifier\") ? {type: \"identifier\"} : identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"StructName\", \"symbols\": [(lexer.has(\"type_identifier\") ? {type: \"type_identifier\"} : type_identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"FieldName\", \"symbols\": [(lexer.has(\"identifier\") ? {type: \"identifier\"} : identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"FieldName\", \"symbols\": [(lexer.has(\"type_identifier\") ? {type: \"type_identifier\"} : type_identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"!\"}]},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"~\"}]},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"-\"}]},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"*\"}]},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"&\"}]},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"(\"}, \"_\", \"Tp\", \"_\", {\"literal\":\")\"}]},\n    {\"name\": \"BinopB\", \"symbols\": [{\"literal\":\"*\"}]},\n    {\"name\": \"BinopB\", \"symbols\": [{\"literal\":\"/\"}]},\n    {\"name\": \"BinopB\", \"symbols\": [{\"literal\":\"%\"}]},\n    {\"name\": \"BinopA\", \"symbols\": [{\"literal\":\"+\"}]},\n    {\"name\": \"BinopA\", \"symbols\": [{\"literal\":\"-\"}]},\n    {\"name\": \"Binop9\", \"symbols\": [{\"literal\":\"<\"}, {\"literal\":\"<\"}]},\n    {\"name\": \"Binop9\", \"symbols\": [{\"literal\":\">\"}, {\"literal\":\">\"}]},\n    {\"name\": \"Binop8\", \"symbols\": [{\"literal\":\"<\"}]},\n    {\"name\": \"Binop8\", \"symbols\": [{\"literal\":\"<\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop8\", \"symbols\": [{\"literal\":\">\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop8\", \"symbols\": [{\"literal\":\">\"}]},\n    {\"name\": \"Binop7\", \"symbols\": [{\"literal\":\"=\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop7\", \"symbols\": [{\"literal\":\"!\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop6\", \"symbols\": [{\"literal\":\"&\"}]},\n    {\"name\": \"Binop5\", \"symbols\": [{\"literal\":\"^\"}]},\n    {\"name\": \"Binop4\", \"symbols\": [{\"literal\":\"|\"}]},\n    {\"name\": \"Binop3\", \"symbols\": [{\"literal\":\"&&\"}]},\n    {\"name\": \"Binop2\", \"symbols\": [{\"literal\":\"|\"}, {\"literal\":\"|\"}]},\n    {\"name\": \"Binop1\", \"symbols\": [{\"literal\":\"?\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"+\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"-\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"*\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"/\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"%\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"&\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"^\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"|\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"<\"}, {\"literal\":\"<\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\">\"}, {\"literal\":\">\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": x => x[2]},\n    {\"name\": \"ExpD\", \"symbols\": [(lexer.has(\"numeric_literal\") ? {type: \"numeric_literal\"} : numeric_literal)], \"postprocess\": util.IntLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [\"StringLiteral\"], \"postprocess\": util.StringLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [\"CharLiteral\"], \"postprocess\": util.CharLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"true\"}], \"postprocess\": util.BoolLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"false\"}], \"postprocess\": util.BoolLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"NULL\"}], \"postprocess\": util.NullLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [\"Identifier\"], \"postprocess\": id},\n    {\"name\": \"ExpD\", \"symbols\": [\"Identifier\", \"_\", \"Funargs\"], \"postprocess\": util.CallExpression},\n    {\"name\": \"ExpD\", \"symbols\": [\"ExpD\", \"_\", {\"literal\":\".\"}, \"_\", \"FieldName\"], \"postprocess\": util.StructMemberExpression},\n    {\"name\": \"ExpD$subexpression$1\", \"symbols\": [{\"literal\":\"-\"}, {\"literal\":\">\"}]},\n    {\"name\": \"ExpD\", \"symbols\": [\"ExpD\", \"_\", \"ExpD$subexpression$1\", \"_\", \"FieldName\"], \"postprocess\": util.StructMemberExpression},\n    {\"name\": \"ExpD\", \"symbols\": [\"ExpD\", \"_\", {\"literal\":\"[\"}, \"_\", \"Expression\", \"_\", {\"literal\":\"]\"}], \"postprocess\": util.ArrayMemberExpression},\n    {\"name\": \"ExpD\", \"symbols\": [\"ExpD\", \"_\", {\"literal\":\"++\"}], \"postprocess\": util.UpdateExpression},\n    {\"name\": \"ExpD\", \"symbols\": [\"ExpD\", \"_\", {\"literal\":\"--\"}], \"postprocess\": util.UpdateExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"alloc\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Tp\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.AllocExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"alloc_array\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Tp\", \"_\", {\"literal\":\",\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.AllocArrayExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"assert\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.AssertExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"error\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.ErrorExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"\\\\\"}, {\"literal\":\"result\"}], \"postprocess\": util.ResultExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"\\\\\"}, {\"literal\":\"length\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.LengthExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"\\\\\"}, {\"literal\":\"hastag\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Tp\", \"_\", {\"literal\":\",\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.HasTagExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"(\"}, \"_\", {\"literal\":\"*\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}, \"_\", \"Funargs\"], \"postprocess\": util.IndirectCallExpression},\n    {\"name\": \"ExpC\", \"symbols\": [\"ExpD\"], \"postprocess\": id},\n    {\"name\": \"ExpC\", \"symbols\": [\"Unop\", \"_\", \"ExpC\"], \"postprocess\": util.UnaryExpression},\n    {\"name\": \"ExpB\", \"symbols\": [\"ExpC\"], \"postprocess\": id},\n    {\"name\": \"ExpB\", \"symbols\": [\"ExpB\", \"_\", \"BinopB\", \"_\", \"ExpC\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"ExpA\", \"symbols\": [\"ExpB\"], \"postprocess\": id},\n    {\"name\": \"ExpA\", \"symbols\": [\"ExpA\", \"_\", \"BinopA\", \"_\", \"ExpB\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp9\", \"symbols\": [\"ExpA\"], \"postprocess\": id},\n    {\"name\": \"Exp9\", \"symbols\": [\"Exp9\", \"_\", \"Binop9\", \"_\", \"ExpA\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp8\", \"symbols\": [\"Exp9\"], \"postprocess\": id},\n    {\"name\": \"Exp8\", \"symbols\": [\"Exp8\", \"_\", \"Binop8\", \"_\", \"Exp9\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp7\", \"symbols\": [\"Exp8\"], \"postprocess\": id},\n    {\"name\": \"Exp7\", \"symbols\": [\"Exp7\", \"_\", \"Binop7\", \"_\", \"Exp8\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp6\", \"symbols\": [\"Exp7\"], \"postprocess\": id},\n    {\"name\": \"Exp6\", \"symbols\": [\"Exp6\", \"_\", \"Binop6\", \"_\", \"Exp7\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp5\", \"symbols\": [\"Exp6\"], \"postprocess\": id},\n    {\"name\": \"Exp5\", \"symbols\": [\"Exp5\", \"_\", \"Binop5\", \"_\", \"Exp6\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp4\", \"symbols\": [\"Exp5\"], \"postprocess\": id},\n    {\"name\": \"Exp4\", \"symbols\": [\"Exp4\", \"_\", \"Binop4\", \"_\", \"Exp5\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp3\", \"symbols\": [\"Exp4\"], \"postprocess\": id},\n    {\"name\": \"Exp3\", \"symbols\": [\"Exp3\", \"_\", \"Binop3\", \"_\", \"Exp4\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp2\", \"symbols\": [\"Exp3\"], \"postprocess\": id},\n    {\"name\": \"Exp2\", \"symbols\": [\"Exp2\", \"_\", \"Binop2\", \"_\", \"Exp3\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp1\", \"symbols\": [\"Exp2\"], \"postprocess\": id},\n    {\"name\": \"Exp1\", \"symbols\": [\"Exp2\", \"_\", \"Binop1\", \"_\", \"Expression\", \"_\", {\"literal\":\":\"}, \"_\", \"Exp1\"], \"postprocess\": util.ConditionalExpression},\n    {\"name\": \"Exp0\", \"symbols\": [\"Exp1\"], \"postprocess\": id},\n    {\"name\": \"Exp0\", \"symbols\": [\"Exp1\", \"_\", \"Binop0\", \"_\", \"Exp0\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Funargs$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"Funargs$ebnf$1$subexpression$1$ebnf$1$subexpression$1\", \"symbols\": [\"_\", {\"literal\":\",\"}, \"_\", \"Expression\"]},\n    {\"name\": \"Funargs$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": [\"Funargs$ebnf$1$subexpression$1$ebnf$1\", \"Funargs$ebnf$1$subexpression$1$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"Funargs$ebnf$1$subexpression$1\", \"symbols\": [\"Expression\", \"Funargs$ebnf$1$subexpression$1$ebnf$1\", \"_\"]},\n    {\"name\": \"Funargs$ebnf$1\", \"symbols\": [\"Funargs$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"Funargs$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"Funargs\", \"symbols\": [{\"literal\":\"(\"}, \"_\", \"Funargs$ebnf$1\", {\"literal\":\")\"}]},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"int\"}], \"postprocess\": util.IntType},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"bool\"}], \"postprocess\": util.BoolType},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"string\"}], \"postprocess\": util.StringType},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"char\"}], \"postprocess\": util.CharType},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"void\"}], \"postprocess\": util.VoidType},\n    {\"name\": \"Tp\", \"symbols\": [\"Tp\", \"_\", {\"literal\":\"*\"}], \"postprocess\": util.PointerType},\n    {\"name\": \"Tp\", \"symbols\": [\"Tp\", \"_\", {\"literal\":\"[\"}, \"_\", {\"literal\":\"]\"}], \"postprocess\": util.ArrayType},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"struct\"}, \"_\", \"StructName\"], \"postprocess\": util.StructType},\n    {\"name\": \"Tp\", \"symbols\": [\"TypeIdentifier\"], \"postprocess\": id},\n    {\"name\": \"StringLiteral$ebnf$1\", \"symbols\": []},\n    {\"name\": \"StringLiteral$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"special_character\") ? {type: \"special_character\"} : special_character)]},\n    {\"name\": \"StringLiteral$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"characters\") ? {type: \"characters\"} : characters)]},\n    {\"name\": \"StringLiteral$ebnf$1\", \"symbols\": [\"StringLiteral$ebnf$1\", \"StringLiteral$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"StringLiteral\", \"symbols\": [(lexer.has(\"string_delimiter\") ? {type: \"string_delimiter\"} : string_delimiter), \"StringLiteral$ebnf$1\", (lexer.has(\"string_delimiter\") ? {type: \"string_delimiter\"} : string_delimiter)]},\n    {\"name\": \"CharLiteral$subexpression$1\", \"symbols\": [(lexer.has(\"special_character\") ? {type: \"special_character\"} : special_character)]},\n    {\"name\": \"CharLiteral$subexpression$1\", \"symbols\": [(lexer.has(\"character\") ? {type: \"character\"} : character)]},\n    {\"name\": \"CharLiteral\", \"symbols\": [(lexer.has(\"char_delimiter\") ? {type: \"char_delimiter\"} : char_delimiter), \"CharLiteral$subexpression$1\", (lexer.has(\"char_delimiter\") ? {type: \"char_delimiter\"} : char_delimiter)]},\n    {\"name\": \"_$ebnf$1\", \"symbols\": []},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"whitespace\") ? {type: \"whitespace\"} : whitespace)]},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"newline\") ? {type: \"newline\"} : newline)]},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"annospace\") ? {type: \"annospace\"} : annospace)]},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [\"LineComment\"]},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [\"MultiComment\"]},\n    {\"name\": \"_$ebnf$1\", \"symbols\": [\"_$ebnf$1\", \"_$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"_\", \"symbols\": [\"_$ebnf$1\"]},\n    {\"name\": \"LineComment$ebnf$1\", \"symbols\": []},\n    {\"name\": \"LineComment$ebnf$1\", \"symbols\": [\"LineComment$ebnf$1\", (lexer.has(\"comment\") ? {type: \"comment\"} : comment)], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"LineComment\", \"symbols\": [(lexer.has(\"comment_line_start\") ? {type: \"comment_line_start\"} : comment_line_start), \"LineComment$ebnf$1\", (lexer.has(\"comment_line_end\") ? {type: \"comment_line_end\"} : comment_line_end)]},\n    {\"name\": \"MultiComment$ebnf$1\", \"symbols\": []},\n    {\"name\": \"MultiComment$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"comment\") ? {type: \"comment\"} : comment)]},\n    {\"name\": \"MultiComment$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"newline\") ? {type: \"newline\"} : newline)]},\n    {\"name\": \"MultiComment$ebnf$1$subexpression$1\", \"symbols\": [\"MultiComment\"]},\n    {\"name\": \"MultiComment$ebnf$1\", \"symbols\": [\"MultiComment$ebnf$1\", \"MultiComment$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"MultiComment\", \"symbols\": [(lexer.has(\"comment_start\") ? {type: \"comment_start\"} : comment_start), \"MultiComment$ebnf$1\", (lexer.has(\"comment_end\") ? {type: \"comment_end\"} : comment_end)]},\n    {\"name\": \"Statement\", \"symbols\": [\"Annos_\", \"DanglingIf\"]},\n    {\"name\": \"Statement\", \"symbols\": [\"Annos_\", \"NoDanglingIf\"]},\n    {\"name\": \"NoDanglingIf\", \"symbols\": [\"Simple\", \"_\", {\"literal\":\";\"}], \"postprocess\": util.SimpleStatement},\n    {\"name\": \"NoDanglingIf\", \"symbols\": [{\"literal\":\"while\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}, \"_Annos\", \"_\", \"NoDanglingIf\"], \"postprocess\": util.WhileStatement},\n    {\"name\": \"NoDanglingIf$ebnf$1$subexpression$1\", \"symbols\": [\"_\", \"Simple\"]},\n    {\"name\": \"NoDanglingIf$ebnf$1\", \"symbols\": [\"NoDanglingIf$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"NoDanglingIf$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"NoDanglingIf$ebnf$2$subexpression$1\", \"symbols\": [\"_\", \"Expression\"]},\n    {\"name\": \"NoDanglingIf$ebnf$2\", \"symbols\": [\"NoDanglingIf$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"NoDanglingIf$ebnf$2\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"NoDanglingIf\", \"symbols\": [{\"literal\":\"for\"}, \"_\", {\"literal\":\"(\"}, \"NoDanglingIf$ebnf$1\", \"_\", {\"literal\":\";\"}, \"_\", \"Expression\", \"_\", {\"literal\":\";\"}, \"NoDanglingIf$ebnf$2\", \"_\", {\"literal\":\")\"}, \"_Annos\", \"_\", \"NoDanglingIf\"], \"postprocess\": util.ForStatement},\n    {\"name\": \"NoDanglingIf\", \"symbols\": [{\"literal\":\"if\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}, \"_Annos\", \"_\", \"NoDanglingIf\", \"_\", {\"literal\":\"else\"}, \"_Annos\", \"_\", \"NoDanglingIf\"], \"postprocess\": util.IfElseStatement},\n    {\"name\": \"NoDanglingIf$ebnf$3$subexpression$1\", \"symbols\": [\"_\", \"Expression\"]},\n    {\"name\": \"NoDanglingIf$ebnf$3\", \"symbols\": [\"NoDanglingIf$ebnf$3$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"NoDanglingIf$ebnf$3\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"NoDanglingIf\", \"symbols\": [{\"literal\":\"return\"}, \"NoDanglingIf$ebnf$3\", \"_\", {\"literal\":\";\"}], \"postprocess\": util.ReturnStatement},\n    {\"name\": \"NoDanglingIf\", \"symbols\": [\"StatementBlock\"], \"postprocess\": id},\n    {\"name\": \"NoDanglingIf\", \"symbols\": [{\"literal\":\"break\"}, \"_\", {\"literal\":\";\"}], \"postprocess\": util.BreakStatement},\n    {\"name\": \"NoDanglingIf\", \"symbols\": [{\"literal\":\"continue\"}, \"_\", {\"literal\":\";\"}], \"postprocess\": util.ContinueStatement},\n    {\"name\": \"DanglingIf\", \"symbols\": [{\"literal\":\"while\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}, \"_Annos\", \"_\", \"DanglingIf\"], \"postprocess\": util.WhileStatement},\n    {\"name\": \"DanglingIf$ebnf$1$subexpression$1\", \"symbols\": [\"_\", \"Simple\"]},\n    {\"name\": \"DanglingIf$ebnf$1\", \"symbols\": [\"DanglingIf$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"DanglingIf$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"DanglingIf$ebnf$2$subexpression$1\", \"symbols\": [\"_\", \"Expression\"]},\n    {\"name\": \"DanglingIf$ebnf$2\", \"symbols\": [\"DanglingIf$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"DanglingIf$ebnf$2\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"DanglingIf\", \"symbols\": [{\"literal\":\"for\"}, \"_\", {\"literal\":\"(\"}, \"DanglingIf$ebnf$1\", \"_\", {\"literal\":\";\"}, \"_\", \"Expression\", \"_\", {\"literal\":\";\"}, \"DanglingIf$ebnf$2\", \"_\", {\"literal\":\")\"}, \"_Annos\", \"_\", \"DanglingIf\"], \"postprocess\": util.ForStatement},\n    {\"name\": \"DanglingIf\", \"symbols\": [{\"literal\":\"if\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}, \"_\", \"Statement\"], \"postprocess\": util.IfStatement},\n    {\"name\": \"DanglingIf\", \"symbols\": [{\"literal\":\"if\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}, \"_Annos\", \"_\", \"NoDanglingIf\", \"_\", {\"literal\":\"else\"}, \"_Annos\", \"_\", \"DanglingIf\"], \"postprocess\": util.IfElseStatement},\n    {\"name\": \"Simple$ebnf$1$subexpression$1\", \"symbols\": [\"_\", {\"literal\":\"=\"}, \"_\", \"Expression\"]},\n    {\"name\": \"Simple$ebnf$1\", \"symbols\": [\"Simple$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"Simple$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"Simple\", \"symbols\": [\"Tp\", \"_\", \"Identifier\", \"Simple$ebnf$1\"]},\n    {\"name\": \"Simple\", \"symbols\": [\"Expression\"], \"postprocess\": id},\n    {\"name\": \"StatementBlock$ebnf$1\", \"symbols\": []},\n    {\"name\": \"StatementBlock$ebnf$1$subexpression$1\", \"symbols\": [\"_\", \"Statement\"]},\n    {\"name\": \"StatementBlock$ebnf$1\", \"symbols\": [\"StatementBlock$ebnf$1\", \"StatementBlock$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"StatementBlock$ebnf$2\", \"symbols\": []},\n    {\"name\": \"StatementBlock$ebnf$2$subexpression$1\", \"symbols\": [\"_\", \"Anno1\"]},\n    {\"name\": \"StatementBlock$ebnf$2\", \"symbols\": [\"StatementBlock$ebnf$2\", \"StatementBlock$ebnf$2$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"StatementBlock\", \"symbols\": [{\"literal\":\"{\"}, \"StatementBlock$ebnf$1\", \"StatementBlock$ebnf$2\", \"_\", {\"literal\":\"}\"}], \"postprocess\": util.BlockStatement},\n    {\"name\": \"Anno_$subexpression$1\", \"symbols\": [{\"literal\":\"loop_invariant\"}]},\n    {\"name\": \"Anno_$subexpression$1\", \"symbols\": [{\"literal\":\"assert\"}]},\n    {\"name\": \"Anno_$subexpression$1\", \"symbols\": [{\"literal\":\"requires\"}]},\n    {\"name\": \"Anno_$subexpression$1\", \"symbols\": [{\"literal\":\"ensures\"}]},\n    {\"name\": \"Anno_\", \"symbols\": [\"Anno_$subexpression$1\", \"_\", \"Expression\", \"_\", {\"literal\":\";\"}, \"_\"], \"postprocess\": x => ({ tag: x[0][0].value, test: x[2] })},\n    {\"name\": \"Anno1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"Anno1$ebnf$1\", \"symbols\": [\"Anno1$ebnf$1\", \"Anno_\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"Anno1\", \"symbols\": [(lexer.has(\"anno_start\") ? {type: \"anno_start\"} : anno_start), \"_\", \"Anno1$ebnf$1\", (lexer.has(\"anno_end\") ? {type: \"anno_end\"} : anno_end)], \"postprocess\": util.Anno1},\n    {\"name\": \"Anno1$ebnf$2\", \"symbols\": []},\n    {\"name\": \"Anno1$ebnf$2\", \"symbols\": [\"Anno1$ebnf$2\", \"Anno_\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"Anno1\", \"symbols\": [(lexer.has(\"anno_line_start\") ? {type: \"anno_line_start\"} : anno_line_start), \"_\", \"Anno1$ebnf$2\", (lexer.has(\"anno_end\") ? {type: \"anno_end\"} : anno_end)], \"postprocess\": util.Anno1},\n    {\"name\": \"Anno1$ebnf$3\", \"symbols\": []},\n    {\"name\": \"Anno1$ebnf$3\", \"symbols\": [\"Anno1$ebnf$3\", \"Anno_\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"Anno1$ebnf$4\", \"symbols\": []},\n    {\"name\": \"Anno1$ebnf$4\", \"symbols\": [\"Anno1$ebnf$4\", (lexer.has(\"comment\") ? {type: \"comment\"} : comment)], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"Anno1\", \"symbols\": [(lexer.has(\"anno_line_start\") ? {type: \"anno_line_start\"} : anno_line_start), \"_\", \"Anno1$ebnf$3\", (lexer.has(\"comment_line_start\") ? {type: \"comment_line_start\"} : comment_line_start), \"Anno1$ebnf$4\", (lexer.has(\"comment_line_end\") ? {type: \"comment_line_end\"} : comment_line_end)], \"postprocess\": util.Anno1},\n    {\"name\": \"Annos_$ebnf$1\", \"symbols\": []},\n    {\"name\": \"Annos_$ebnf$1$subexpression$1\", \"symbols\": [\"Anno1\", \"_\"]},\n    {\"name\": \"Annos_$ebnf$1\", \"symbols\": [\"Annos_$ebnf$1\", \"Annos_$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"Annos_\", \"symbols\": [\"Annos_$ebnf$1\"], \"postprocess\": x => x[0].reduce((xs, y) => xs.concat(y[0]), [])},\n    {\"name\": \"_Annos$ebnf$1\", \"symbols\": []},\n    {\"name\": \"_Annos$ebnf$1$subexpression$1\", \"symbols\": [\"_\", \"Anno1\"]},\n    {\"name\": \"_Annos$ebnf$1\", \"symbols\": [\"_Annos$ebnf$1\", \"_Annos$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"_Annos\", \"symbols\": [\"_Annos$ebnf$1\"], \"postprocess\": x => x[0].reduce((xs, y) => xs.concat(y[1]), [])},\n    {\"name\": \"Program$ebnf$1\", \"symbols\": []},\n    {\"name\": \"Program$ebnf$1\", \"symbols\": [\"Program$ebnf$1\", \"_GlobalDecl\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"Program\", \"symbols\": [\"Program$ebnf$1\", \"_\"], \"postprocess\": x => x[0]},\n    {\"name\": \"_GlobalDecl\", \"symbols\": [\"_\", \"GlobalDecl\"], \"postprocess\": x => x[1]},\n    {\"name\": \"GlobalDecl\", \"symbols\": [(lexer.has(\"pragma\") ? {type: \"pragma\"} : pragma)]},\n    {\"name\": \"GlobalDecl\", \"symbols\": [{\"literal\":\"struct\"}, \"_\", \"StructName\", \"_\", {\"literal\":\";\"}], \"postprocess\": util.StructDeclaration},\n    {\"name\": \"GlobalDecl$ebnf$1\", \"symbols\": []},\n    {\"name\": \"GlobalDecl$ebnf$1$subexpression$1\", \"symbols\": [\"Tp\", \"_\", \"FieldName\", \"_\", {\"literal\":\";\"}, \"_\"]},\n    {\"name\": \"GlobalDecl$ebnf$1\", \"symbols\": [\"GlobalDecl$ebnf$1\", \"GlobalDecl$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"GlobalDecl\", \"symbols\": [{\"literal\":\"struct\"}, \"_\", \"StructName\", \"_\", {\"literal\":\"{\"}, \"_\", \"GlobalDecl$ebnf$1\", {\"literal\":\"}\"}, \"_\", {\"literal\":\";\"}], \"postprocess\": util.StructDefinition},\n    {\"name\": \"GlobalDecl\", \"symbols\": [\"Tp\", \"_\", \"Identifier\", \"_\", \"FunDeclArgs\", \"_Annos\", \"_\", \"FunDeclEnd\"], \"postprocess\": util.FunctionDeclaration},\n    {\"name\": \"GlobalDecl\", \"symbols\": [{\"literal\":\"typedef\"}, \"_\", \"Tp\", \"_\", \"Identifier\"], \"postprocess\": util.TypeDefinition},\n    {\"name\": \"GlobalDecl\", \"symbols\": [{\"literal\":\"typedef\"}, \"_\", \"Tp\", \"_\", \"Identifier\", \"_\", \"FunDeclArgs\", \"_Annos\"], \"postprocess\": util.FunctionTypeDefinition},\n    {\"name\": \"FunDeclArgs$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"FunDeclArgs$ebnf$1$subexpression$1$ebnf$1$subexpression$1\", \"symbols\": [{\"literal\":\",\"}, \"_\", \"Tp\", \"_\", \"Identifier\", \"_\"]},\n    {\"name\": \"FunDeclArgs$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": [\"FunDeclArgs$ebnf$1$subexpression$1$ebnf$1\", \"FunDeclArgs$ebnf$1$subexpression$1$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"FunDeclArgs$ebnf$1$subexpression$1\", \"symbols\": [\"Tp\", \"_\", \"Identifier\", \"_\", \"FunDeclArgs$ebnf$1$subexpression$1$ebnf$1\"]},\n    {\"name\": \"FunDeclArgs$ebnf$1\", \"symbols\": [\"FunDeclArgs$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"FunDeclArgs$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"FunDeclArgs\", \"symbols\": [{\"literal\":\"(\"}, \"_\", \"FunDeclArgs$ebnf$1\", {\"literal\":\")\"}], \"postprocess\": util.FunctionDeclarationArgs},\n    {\"name\": \"FunDeclEnd\", \"symbols\": [{\"literal\":\";\"}], \"postprocess\": x => null},\n    {\"name\": \"FunDeclEnd\", \"symbols\": [\"StatementBlock\"], \"postprocess\": id}\n]\n  , ParserStart: \"Program\"\n}\nif (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {\n   module.exports = grammar;\n} else {\n   window.grammar = grammar;\n}\n})();\n"
        },
        {
          "id": 14,
          "identifier": "/Users/robs/r/jaco/lib/expression-rules.js",
          "name": "./lib/expression-rules.js",
          "index": 8,
          "index2": 8,
          "size": 13640,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
          "issuerId": 18,
          "issuerName": "./src/parse.ts",
          "issuerPath": [
            {
              "id": 19,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "name": "./src/demo/demo.ts",
              "profile": {
                "factory": 64,
                "building": 1924
              }
            },
            {
              "id": 18,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
              "name": "./src/parse.ts",
              "profile": {
                "factory": 288,
                "building": 665,
                "dependencies": 114
              }
            }
          ],
          "profile": {
            "factory": 808,
            "building": 8,
            "dependencies": 637
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": 18,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
              "module": "./src/parse.ts",
              "moduleName": "./src/parse.ts",
              "type": "cjs require",
              "userRequest": "../lib/expression-rules",
              "loc": "7:24-58"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [
            "ModuleConcatenation bailout: Module is not an ECMAScript module"
          ],
          "depth": 2,
          "source": "// Generated automatically by nearley, version 2.13.0\n// http://github.com/Hardmath123/nearley\n(function () {\nfunction id(x) { return x[0]; }\n\nconst lexer = require('./lex').lexer;\nconst util = require('./parser-util');\nvar grammar = {\n    Lexer: lexer,\n    ParserRules: [\n    {\"name\": \"Expression\", \"symbols\": [\"Exp0\"], \"postprocess\": id},\n    {\"name\": \"Identifier\", \"symbols\": [(lexer.has(\"identifier\") ? {type: \"identifier\"} : identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"TypeIdentifier\", \"symbols\": [(lexer.has(\"type_identifier\") ? {type: \"type_identifier\"} : type_identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"StructName\", \"symbols\": [(lexer.has(\"identifier\") ? {type: \"identifier\"} : identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"StructName\", \"symbols\": [(lexer.has(\"type_identifier\") ? {type: \"type_identifier\"} : type_identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"FieldName\", \"symbols\": [(lexer.has(\"identifier\") ? {type: \"identifier\"} : identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"FieldName\", \"symbols\": [(lexer.has(\"type_identifier\") ? {type: \"type_identifier\"} : type_identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"!\"}]},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"~\"}]},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"-\"}]},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"*\"}]},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"&\"}]},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"(\"}, \"_\", \"Tp\", \"_\", {\"literal\":\")\"}]},\n    {\"name\": \"BinopB\", \"symbols\": [{\"literal\":\"*\"}]},\n    {\"name\": \"BinopB\", \"symbols\": [{\"literal\":\"/\"}]},\n    {\"name\": \"BinopB\", \"symbols\": [{\"literal\":\"%\"}]},\n    {\"name\": \"BinopA\", \"symbols\": [{\"literal\":\"+\"}]},\n    {\"name\": \"BinopA\", \"symbols\": [{\"literal\":\"-\"}]},\n    {\"name\": \"Binop9\", \"symbols\": [{\"literal\":\"<\"}, {\"literal\":\"<\"}]},\n    {\"name\": \"Binop9\", \"symbols\": [{\"literal\":\">\"}, {\"literal\":\">\"}]},\n    {\"name\": \"Binop8\", \"symbols\": [{\"literal\":\"<\"}]},\n    {\"name\": \"Binop8\", \"symbols\": [{\"literal\":\"<\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop8\", \"symbols\": [{\"literal\":\">\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop8\", \"symbols\": [{\"literal\":\">\"}]},\n    {\"name\": \"Binop7\", \"symbols\": [{\"literal\":\"=\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop7\", \"symbols\": [{\"literal\":\"!\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop6\", \"symbols\": [{\"literal\":\"&\"}]},\n    {\"name\": \"Binop5\", \"symbols\": [{\"literal\":\"^\"}]},\n    {\"name\": \"Binop4\", \"symbols\": [{\"literal\":\"|\"}]},\n    {\"name\": \"Binop3\", \"symbols\": [{\"literal\":\"&&\"}]},\n    {\"name\": \"Binop2\", \"symbols\": [{\"literal\":\"|\"}, {\"literal\":\"|\"}]},\n    {\"name\": \"Binop1\", \"symbols\": [{\"literal\":\"?\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"+\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"-\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"*\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"/\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"%\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"&\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"^\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"|\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"<\"}, {\"literal\":\"<\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\">\"}, {\"literal\":\">\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": x => x[2]},\n    {\"name\": \"ExpD\", \"symbols\": [(lexer.has(\"numeric_literal\") ? {type: \"numeric_literal\"} : numeric_literal)], \"postprocess\": util.IntLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [\"StringLiteral\"], \"postprocess\": util.StringLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [\"CharLiteral\"], \"postprocess\": util.CharLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"true\"}], \"postprocess\": util.BoolLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"false\"}], \"postprocess\": util.BoolLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"NULL\"}], \"postprocess\": util.NullLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [\"Identifier\"], \"postprocess\": id},\n    {\"name\": \"ExpD\", \"symbols\": [\"Identifier\", \"_\", \"Funargs\"], \"postprocess\": util.CallExpression},\n    {\"name\": \"ExpD\", \"symbols\": [\"ExpD\", \"_\", {\"literal\":\".\"}, \"_\", \"FieldName\"], \"postprocess\": util.StructMemberExpression},\n    {\"name\": \"ExpD$subexpression$1\", \"symbols\": [{\"literal\":\"-\"}, {\"literal\":\">\"}]},\n    {\"name\": \"ExpD\", \"symbols\": [\"ExpD\", \"_\", \"ExpD$subexpression$1\", \"_\", \"FieldName\"], \"postprocess\": util.StructMemberExpression},\n    {\"name\": \"ExpD\", \"symbols\": [\"ExpD\", \"_\", {\"literal\":\"[\"}, \"_\", \"Expression\", \"_\", {\"literal\":\"]\"}], \"postprocess\": util.ArrayMemberExpression},\n    {\"name\": \"ExpD\", \"symbols\": [\"ExpD\", \"_\", {\"literal\":\"++\"}], \"postprocess\": util.UpdateExpression},\n    {\"name\": \"ExpD\", \"symbols\": [\"ExpD\", \"_\", {\"literal\":\"--\"}], \"postprocess\": util.UpdateExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"alloc\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Tp\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.AllocExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"alloc_array\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Tp\", \"_\", {\"literal\":\",\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.AllocArrayExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"assert\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.AssertExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"error\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.ErrorExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"\\\\\"}, {\"literal\":\"result\"}], \"postprocess\": util.ResultExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"\\\\\"}, {\"literal\":\"length\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.LengthExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"\\\\\"}, {\"literal\":\"hastag\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Tp\", \"_\", {\"literal\":\",\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.HasTagExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"(\"}, \"_\", {\"literal\":\"*\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}, \"_\", \"Funargs\"], \"postprocess\": util.IndirectCallExpression},\n    {\"name\": \"ExpC\", \"symbols\": [\"ExpD\"], \"postprocess\": id},\n    {\"name\": \"ExpC\", \"symbols\": [\"Unop\", \"_\", \"ExpC\"], \"postprocess\": util.UnaryExpression},\n    {\"name\": \"ExpB\", \"symbols\": [\"ExpC\"], \"postprocess\": id},\n    {\"name\": \"ExpB\", \"symbols\": [\"ExpB\", \"_\", \"BinopB\", \"_\", \"ExpC\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"ExpA\", \"symbols\": [\"ExpB\"], \"postprocess\": id},\n    {\"name\": \"ExpA\", \"symbols\": [\"ExpA\", \"_\", \"BinopA\", \"_\", \"ExpB\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp9\", \"symbols\": [\"ExpA\"], \"postprocess\": id},\n    {\"name\": \"Exp9\", \"symbols\": [\"Exp9\", \"_\", \"Binop9\", \"_\", \"ExpA\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp8\", \"symbols\": [\"Exp9\"], \"postprocess\": id},\n    {\"name\": \"Exp8\", \"symbols\": [\"Exp8\", \"_\", \"Binop8\", \"_\", \"Exp9\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp7\", \"symbols\": [\"Exp8\"], \"postprocess\": id},\n    {\"name\": \"Exp7\", \"symbols\": [\"Exp7\", \"_\", \"Binop7\", \"_\", \"Exp8\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp6\", \"symbols\": [\"Exp7\"], \"postprocess\": id},\n    {\"name\": \"Exp6\", \"symbols\": [\"Exp6\", \"_\", \"Binop6\", \"_\", \"Exp7\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp5\", \"symbols\": [\"Exp6\"], \"postprocess\": id},\n    {\"name\": \"Exp5\", \"symbols\": [\"Exp5\", \"_\", \"Binop5\", \"_\", \"Exp6\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp4\", \"symbols\": [\"Exp5\"], \"postprocess\": id},\n    {\"name\": \"Exp4\", \"symbols\": [\"Exp4\", \"_\", \"Binop4\", \"_\", \"Exp5\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp3\", \"symbols\": [\"Exp4\"], \"postprocess\": id},\n    {\"name\": \"Exp3\", \"symbols\": [\"Exp3\", \"_\", \"Binop3\", \"_\", \"Exp4\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp2\", \"symbols\": [\"Exp3\"], \"postprocess\": id},\n    {\"name\": \"Exp2\", \"symbols\": [\"Exp2\", \"_\", \"Binop2\", \"_\", \"Exp3\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp1\", \"symbols\": [\"Exp2\"], \"postprocess\": id},\n    {\"name\": \"Exp1\", \"symbols\": [\"Exp2\", \"_\", \"Binop1\", \"_\", \"Expression\", \"_\", {\"literal\":\":\"}, \"_\", \"Exp1\"], \"postprocess\": util.ConditionalExpression},\n    {\"name\": \"Exp0\", \"symbols\": [\"Exp1\"], \"postprocess\": id},\n    {\"name\": \"Exp0\", \"symbols\": [\"Exp1\", \"_\", \"Binop0\", \"_\", \"Exp0\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Funargs$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"Funargs$ebnf$1$subexpression$1$ebnf$1$subexpression$1\", \"symbols\": [\"_\", {\"literal\":\",\"}, \"_\", \"Expression\"]},\n    {\"name\": \"Funargs$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": [\"Funargs$ebnf$1$subexpression$1$ebnf$1\", \"Funargs$ebnf$1$subexpression$1$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"Funargs$ebnf$1$subexpression$1\", \"symbols\": [\"Expression\", \"Funargs$ebnf$1$subexpression$1$ebnf$1\", \"_\"]},\n    {\"name\": \"Funargs$ebnf$1\", \"symbols\": [\"Funargs$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"Funargs$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"Funargs\", \"symbols\": [{\"literal\":\"(\"}, \"_\", \"Funargs$ebnf$1\", {\"literal\":\")\"}]},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"int\"}], \"postprocess\": util.IntType},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"bool\"}], \"postprocess\": util.BoolType},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"string\"}], \"postprocess\": util.StringType},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"char\"}], \"postprocess\": util.CharType},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"void\"}], \"postprocess\": util.VoidType},\n    {\"name\": \"Tp\", \"symbols\": [\"Tp\", \"_\", {\"literal\":\"*\"}], \"postprocess\": util.PointerType},\n    {\"name\": \"Tp\", \"symbols\": [\"Tp\", \"_\", {\"literal\":\"[\"}, \"_\", {\"literal\":\"]\"}], \"postprocess\": util.ArrayType},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"struct\"}, \"_\", \"StructName\"], \"postprocess\": util.StructType},\n    {\"name\": \"Tp\", \"symbols\": [\"TypeIdentifier\"], \"postprocess\": id},\n    {\"name\": \"StringLiteral$ebnf$1\", \"symbols\": []},\n    {\"name\": \"StringLiteral$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"special_character\") ? {type: \"special_character\"} : special_character)]},\n    {\"name\": \"StringLiteral$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"characters\") ? {type: \"characters\"} : characters)]},\n    {\"name\": \"StringLiteral$ebnf$1\", \"symbols\": [\"StringLiteral$ebnf$1\", \"StringLiteral$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"StringLiteral\", \"symbols\": [(lexer.has(\"string_delimiter\") ? {type: \"string_delimiter\"} : string_delimiter), \"StringLiteral$ebnf$1\", (lexer.has(\"string_delimiter\") ? {type: \"string_delimiter\"} : string_delimiter)]},\n    {\"name\": \"CharLiteral$subexpression$1\", \"symbols\": [(lexer.has(\"special_character\") ? {type: \"special_character\"} : special_character)]},\n    {\"name\": \"CharLiteral$subexpression$1\", \"symbols\": [(lexer.has(\"character\") ? {type: \"character\"} : character)]},\n    {\"name\": \"CharLiteral\", \"symbols\": [(lexer.has(\"char_delimiter\") ? {type: \"char_delimiter\"} : char_delimiter), \"CharLiteral$subexpression$1\", (lexer.has(\"char_delimiter\") ? {type: \"char_delimiter\"} : char_delimiter)]},\n    {\"name\": \"_$ebnf$1\", \"symbols\": []},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"whitespace\") ? {type: \"whitespace\"} : whitespace)]},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"newline\") ? {type: \"newline\"} : newline)]},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"annospace\") ? {type: \"annospace\"} : annospace)]},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [\"LineComment\"]},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [\"MultiComment\"]},\n    {\"name\": \"_$ebnf$1\", \"symbols\": [\"_$ebnf$1\", \"_$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"_\", \"symbols\": [\"_$ebnf$1\"]},\n    {\"name\": \"LineComment$ebnf$1\", \"symbols\": []},\n    {\"name\": \"LineComment$ebnf$1\", \"symbols\": [\"LineComment$ebnf$1\", (lexer.has(\"comment\") ? {type: \"comment\"} : comment)], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"LineComment\", \"symbols\": [(lexer.has(\"comment_line_start\") ? {type: \"comment_line_start\"} : comment_line_start), \"LineComment$ebnf$1\", (lexer.has(\"comment_line_end\") ? {type: \"comment_line_end\"} : comment_line_end)]},\n    {\"name\": \"MultiComment$ebnf$1\", \"symbols\": []},\n    {\"name\": \"MultiComment$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"comment\") ? {type: \"comment\"} : comment)]},\n    {\"name\": \"MultiComment$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"newline\") ? {type: \"newline\"} : newline)]},\n    {\"name\": \"MultiComment$ebnf$1$subexpression$1\", \"symbols\": [\"MultiComment\"]},\n    {\"name\": \"MultiComment$ebnf$1\", \"symbols\": [\"MultiComment$ebnf$1\", \"MultiComment$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"MultiComment\", \"symbols\": [(lexer.has(\"comment_start\") ? {type: \"comment_start\"} : comment_start), \"MultiComment$ebnf$1\", (lexer.has(\"comment_end\") ? {type: \"comment_end\"} : comment_end)]}\n]\n  , ParserStart: \"Expression\"\n}\nif (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {\n   module.exports = grammar;\n} else {\n   window.grammar = grammar;\n}\n})();\n"
        },
        {
          "id": 15,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/restrictsyntax.ts",
          "name": "./src/restrictsyntax.ts",
          "index": 7,
          "index2": 5,
          "size": 26455,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
          "issuerId": 18,
          "issuerName": "./src/parse.ts",
          "issuerPath": [
            {
              "id": 19,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "name": "./src/demo/demo.ts",
              "profile": {
                "factory": 64,
                "building": 1924
              }
            },
            {
              "id": 18,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
              "name": "./src/parse.ts",
              "profile": {
                "factory": 288,
                "building": 665,
                "dependencies": 114
              }
            }
          ],
          "profile": {
            "factory": 808,
            "building": 8,
            "dependencies": 637
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": 18,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
              "module": "./src/parse.ts",
              "moduleName": "./src/parse.ts",
              "type": "cjs require",
              "userRequest": "./restrictsyntax",
              "loc": "6:25-52"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [
            "ModuleConcatenation bailout: Module is not an ECMAScript module"
          ],
          "depth": 2,
          "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst impossible_1 = require(\"@calculemus/impossible\");\nfunction restrictType(lang, syn) {\n    switch (syn.tag) {\n        case \"IntType\":\n            return syn;\n        case \"BoolType\":\n            if (lang === \"L1\")\n                throw new Error(`The type 'bool' is not a part of ${lang}`);\n            return syn;\n        case \"StringType\":\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\" || lang === \"L4\")\n                throw new Error(`The type 'string' is not a part of ${lang}`);\n            return syn;\n        case \"CharType\":\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\" || lang === \"L4\")\n                throw new Error(`The type 'char' is not a part of ${lang}`);\n        case \"VoidType\":\n            if (lang === \"L1\" || lang === \"L2\")\n                throw new Error(`The type 'void' is not a part of ${lang}`);\n            return syn;\n        case \"PointerType\":\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`Pointer types are not a part of ${lang}`);\n            const argument = restrictType(lang, syn.argument);\n            if ((lang === \"L4\" || lang === \"C0\") && argument.tag === \"VoidType\")\n                throw new Error(`The type 'void*' is not a part of ${lang}`);\n            return {\n                tag: \"PointerType\",\n                argument: argument\n            };\n        case \"ArrayType\":\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`Array types are not a part of ${lang}`);\n            return {\n                tag: \"ArrayType\",\n                argument: restrictType(lang, syn.argument)\n            };\n        case \"StructType\":\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`Struct types are not a part of ${lang}`);\n            return syn;\n        case \"Identifier\":\n            if (lang === \"L1\" || lang === \"L2\")\n                throw new Error(`Defined types are not a part of ${lang}`);\n            return syn;\n        default:\n            return impossible_1.impossible(syn);\n    }\n}\nexports.restrictType = restrictType;\nfunction restrictValueType(lang, syn) {\n    const type = restrictType(lang, syn);\n    if (type.tag === \"VoidType\") {\n        throw new Error(`Type 'void' can only be used as the return type of a function.`);\n    }\n    return type;\n}\nexports.restrictValueType = restrictValueType;\nfunction restrictExpression(lang, syn) {\n    switch (syn.tag) {\n        case \"StringLiteral\": {\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\" || lang === \"L4\")\n                throw new Error(`String and char literals are not a part of ${lang}`);\n            syn.raw.map(x => {\n                if (x.length === 2 && x[0] === \"\\\\\") {\n                    if (!x.match(/\\\\[ntvbrfa\\\\'\"]/))\n                        throw new Error(`Invalid escape '${x}' in string`);\n                }\n                else if (!x.match(/\\\\[ntvbrfa\\\\'\"]+/)) {\n                    if (!x.match(/[ !#-~]+/))\n                        throw new Error(`Invalid character in string '${x}'`);\n                }\n            });\n            return {\n                tag: \"StringLiteral\",\n                value: syn.raw.join(\"\"),\n                raw: `\"${syn.raw.join(\"\")}\"`\n            };\n        }\n        case \"CharLiteral\": {\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\" || lang === \"L4\")\n                throw new Error(`String and char literals are not a part of ${lang}`);\n            if (syn.raw.length === 1) {\n                if (!syn.raw.match(/[ !#-~]/))\n                    throw new Error(`Invalid character '${syn.raw}'`);\n            }\n            else {\n                if (!syn.raw.match(/\\\\[ntvbrfa\\\\'\"0]/))\n                    throw new Error(`Invalid escape character '${syn.raw}'`);\n            }\n            return {\n                tag: \"CharLiteral\",\n                value: syn.raw,\n                raw: `'${syn.raw}'`\n            };\n        }\n        case \"BoolLiteral\":\n            if (lang === \"L1\")\n                throw new Error(`Boolean literals 'true' and 'false' are not part of ${lang}`);\n            return { tag: \"BoolLiteral\", value: syn.value };\n        case \"NullLiteral\":\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`'NULL' is not a part of ${lang}`);\n            return { tag: \"NullLiteral\" };\n        case \"Identifier\":\n            return syn;\n        case \"IntLiteral\":\n            if (syn.raw === \"0\") {\n                return { tag: \"IntLiteral\", raw: \"0\", value: 0 };\n            }\n            else if (syn.raw.startsWith(\"0\") || syn.raw.startsWith(\"0\")) {\n                const match = syn.raw.match(/^0[xX](0*)([0-9a-fA-F]+)$/);\n                if (match === null) {\n                    if (syn.raw[1].toLowerCase() !== \"x\")\n                        throw new Error(`Bad numeric constant: ${syn.raw}\\nIdentifiers beginning with '0' must be hex constants starting as '0X' or '0x'`);\n                    throw new Error(`Invalid hex constant: ${syn.raw}\\nHex constants must only have the characters '0123456789abcdefABCDEF'`);\n                }\n                const hex = match[2];\n                if (hex.length > 8)\n                    throw new Error(`Hex constant too large: ${syn.raw}`);\n                const value = parseInt(hex, 16);\n                return {\n                    tag: \"IntLiteral\",\n                    raw: syn.raw,\n                    value: value < 0x80000000 ? value : value - 0x100000000\n                };\n            }\n            else {\n                const match = syn.raw.match(/^[0-9]+$/);\n                if (match === null)\n                    throw new Error(`Invalid integer constant: ${syn.raw}`);\n                if (syn.raw.length > 10)\n                    throw new Error(`Decimal constant too large: ${syn.raw}`);\n                const dec = parseInt(syn.raw, 10);\n                if (dec > 2147483648)\n                    throw new Error(`Decimal constant too large: ${syn.raw}`);\n                return {\n                    tag: \"IntLiteral\",\n                    raw: syn.raw,\n                    value: dec < 2147483648 ? dec : -2147483648\n                };\n            }\n        case \"ArrayMemberExpression\": {\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`Array access is not a part of ${lang}`);\n            return {\n                tag: \"ArrayMemberExpression\",\n                object: restrictExpression(lang, syn.object),\n                index: restrictExpression(lang, syn.index)\n            };\n        }\n        case \"StructMemberExpression\": {\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`Struct access is not a part of ${lang}`);\n            return {\n                tag: \"StructMemberExpression\",\n                deref: syn.deref,\n                object: restrictExpression(lang, syn.object),\n                field: syn.field\n            };\n        }\n        case \"CallExpression\": {\n            if (lang === \"L1\" || lang === \"L2\")\n                throw new Error(`Functions are not a part of ${lang}`);\n            return {\n                tag: \"CallExpression\",\n                callee: syn.callee,\n                arguments: syn.arguments.map(x => restrictExpression(lang, x))\n            };\n        }\n        case \"IndirectCallExpression\": {\n            if (lang !== \"C1\")\n                throw new Error(`Calls from function pointers not a part of ${lang}`);\n            return {\n                tag: \"IndirectCallExpression\",\n                callee: restrictExpression(lang, syn.callee),\n                arguments: syn.arguments.map(x => restrictExpression(lang, x))\n            };\n        }\n        case \"CastExpression\": {\n            if (lang !== \"C1\")\n                throw new Error(`Casts not a part of ${lang}`);\n            return {\n                tag: \"CastExpression\",\n                kind: restrictValueType(lang, syn.kind),\n                argument: restrictExpression(lang, syn.argument)\n            };\n        }\n        case \"UnaryExpression\": {\n            if (syn.operator === \"&\" && lang !== \"C1\")\n                throw new Error(`Address-of not a part of ${lang}`);\n            if (syn.operator === \"!\" && lang === \"L1\")\n                throw new Error(`Boolean negation not a part of ${lang}`);\n            if (syn.operator === \"*\" && (lang === \"L1\" || lang === \"L2\" || lang === \"L3\"))\n                throw new Error(`Pointer dereference not a part of ${lang}`);\n            return {\n                tag: \"UnaryExpression\",\n                operator: syn.operator,\n                argument: restrictExpression(lang, syn.argument)\n            };\n        }\n        case \"BinaryExpression\": {\n            if (lang === \"L1\") {\n                switch (syn.operator) {\n                    case \"*\":\n                    case \"/\":\n                    case \"%\":\n                    case \"+\":\n                    case \"-\":\n                        break;\n                    default:\n                        throw new Error(`Operator ${syn.operator} not a part of ${lang}`);\n                }\n            }\n            return {\n                tag: \"BinaryExpression\",\n                operator: syn.operator,\n                left: restrictExpression(lang, syn.left),\n                right: restrictExpression(lang, syn.right)\n            };\n        }\n        case \"LogicalExpression\": {\n            if (lang === \"L1\")\n                throw new Error(`Logical operators not a part of ${lang}`);\n            return {\n                tag: \"LogicalExpression\",\n                operator: syn.operator,\n                left: restrictExpression(lang, syn.left),\n                right: restrictExpression(lang, syn.right)\n            };\n        }\n        case \"ConditionalExpression\": {\n            if (lang === \"L1\")\n                throw new Error(`Conditional expression is not a part of ${lang}`);\n            return {\n                tag: \"ConditionalExpression\",\n                test: restrictExpression(lang, syn.test),\n                consequent: restrictExpression(lang, syn.consequent),\n                alternate: restrictExpression(lang, syn.alternate)\n            };\n        }\n        case \"AllocExpression\": {\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`Allocation not a part of ${lang}`);\n            return {\n                tag: \"AllocExpression\",\n                kind: restrictValueType(lang, syn.kind)\n            };\n        }\n        case \"AllocArrayExpression\": {\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`Allocation not a part of ${lang}`);\n            return {\n                tag: \"AllocArrayExpression\",\n                kind: restrictValueType(lang, syn.kind),\n                size: restrictExpression(lang, syn.size)\n            };\n        }\n        case \"ResultExpression\": {\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\" || lang === \"L4\")\n                throw new Error(`Contracts not a part of ${lang}`);\n            return {\n                tag: \"ResultExpression\"\n            };\n        }\n        case \"LengthExpression\": {\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\" || lang === \"L4\")\n                throw new Error(`Contracts not a part of ${lang}`);\n            return {\n                tag: \"LengthExpression\",\n                argument: restrictExpression(lang, syn.argument)\n            };\n        }\n        case \"HasTagExpression\": {\n            if (lang !== \"C1\")\n                throw new Error(`Tag contracts not a part of ${lang}`);\n            return {\n                tag: \"HasTagExpression\",\n                kind: restrictValueType(lang, syn.kind),\n                argument: restrictExpression(lang, syn.argument)\n            };\n        }\n        case \"AssignmentExpression\":\n            throw new Error(`Assignments 'x ${syn.operator} e2' must be used as statements, and not inside of expressions.`);\n        case \"UpdateExpression\":\n            throw new Error(`Increment/decrement operations 'e${syn.operator}' must be used as statements, and not inside of expressions.`);\n        case \"AssertExpression\":\n            throw new Error(`The 'assert()' function must be used as a statement, and not inside of expressions.`);\n        case \"ErrorExpression\":\n            throw new Error(`The 'error()' function must be used as a statement, and not inside of expressions.`);\n        default:\n            return impossible_1.impossible(syn);\n    }\n}\nexports.restrictExpression = restrictExpression;\nfunction restrictLValue(lang, syn) {\n    switch (syn.tag) {\n        case \"Identifier\":\n            return syn;\n        case \"StructMemberExpression\": {\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`Struct access not a part of ${lang}`);\n            return {\n                tag: \"StructMemberExpression\",\n                deref: syn.deref,\n                object: restrictLValue(lang, syn.object),\n                field: syn.field\n            };\n        }\n        case \"UnaryExpression\": {\n            if (syn.operator !== \"*\")\n                throw new Error(`Not an LValue`);\n            if (lang == \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`Pointer dereference not a part of ${lang}`);\n            return {\n                tag: \"UnaryExpression\",\n                operator: \"*\",\n                argument: restrictLValue(lang, syn.argument)\n            };\n        }\n        case \"ArrayMemberExpression\": {\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`Array access not a part of ${lang}`);\n            return {\n                tag: \"ArrayMemberExpression\",\n                object: restrictLValue(lang, syn.object),\n                index: restrictExpression(lang, syn.index)\n            };\n        }\n        case \"IntLiteral\":\n        case \"StringLiteral\":\n        case \"CharLiteral\":\n        case \"BoolLiteral\":\n        case \"NullLiteral\":\n        case \"CallExpression\":\n        case \"IndirectCallExpression\":\n        case \"CastExpression\":\n        case \"BinaryExpression\":\n        case \"LogicalExpression\":\n        case \"ConditionalExpression\":\n        case \"AllocExpression\":\n        case \"AllocArrayExpression\":\n        case \"ResultExpression\":\n        case \"LengthExpression\":\n        case \"HasTagExpression\":\n        case \"UpdateExpression\":\n        case \"AssignmentExpression\":\n        case \"AssertExpression\":\n        case \"ErrorExpression\":\n            throw new Error(`Not a valid LValue ${JSON.stringify(syn)}`);\n        default:\n            return impossible_1.impossible(syn);\n    }\n}\nexports.restrictLValue = restrictLValue;\nfunction restrictStatement(lang, syn) {\n    switch (syn.tag) {\n        case \"AnnoStatement\": {\n            if (syn.anno.tag !== \"assert\")\n                throw new Error(`Only assert annotations are allowed here, ${syn.anno.tag} is not permitted.`);\n            return {\n                tag: \"AssertStatement\",\n                contract: true,\n                test: restrictExpression(lang, syn.anno.test)\n            };\n        }\n        case \"ExpressionStatement\": {\n            switch (syn.expression.tag) {\n                case \"AssignmentExpression\": {\n                    if (lang === \"L1\") {\n                        switch (syn.expression.operator) {\n                            case \"=\":\n                            case \"*=\":\n                            case \"/=\":\n                            case \"%=\":\n                            case \"+=\":\n                            case \"-=\":\n                                break;\n                            default:\n                                throw new Error(`Assignment operator ${syn.expression.operator} not a part of ${lang}`);\n                        }\n                    }\n                    return {\n                        tag: \"AssignmentStatement\",\n                        operator: syn.expression.operator,\n                        left: restrictLValue(lang, syn.expression.left),\n                        right: restrictExpression(lang, syn.expression.right)\n                    };\n                }\n                case \"UpdateExpression\": {\n                    if (lang === \"L1\")\n                        throw new Error(`Postfix update 'x${syn.expression.operator}' not a part of ${lang}`);\n                    return {\n                        tag: \"UpdateStatement\",\n                        operator: syn.expression.operator,\n                        argument: restrictLValue(lang, syn.expression.argument)\n                    };\n                }\n                case \"AssertExpression\": {\n                    if (lang === \"L1\" || lang === \"L2\") {\n                        throw new Error(`Assertions not a part of ${lang}`);\n                    }\n                    return {\n                        tag: \"AssertStatement\",\n                        contract: false,\n                        test: restrictExpression(lang, syn.expression.test)\n                    };\n                }\n                case \"ErrorExpression\": {\n                    if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\" || lang === \"L4\") {\n                        throw new Error(`The 'error()' function is not a part of ${lang}`);\n                    }\n                    return {\n                        tag: \"ErrorStatement\",\n                        argument: restrictExpression(lang, syn.expression.argument)\n                    };\n                }\n                default: {\n                    return {\n                        tag: \"ExpressionStatement\",\n                        expression: restrictExpression(lang, syn.expression)\n                    };\n                }\n            }\n        }\n        case \"VariableDeclaration\": {\n            return {\n                tag: \"VariableDeclaration\",\n                kind: restrictValueType(lang, syn.kind),\n                id: syn.id,\n                init: syn.init ? restrictExpression(lang, syn.init) : null\n            };\n        }\n        case \"IfStatement\": {\n            if (lang === \"L1\")\n                throw new Error(`Conditionals not a part of ${lang}`);\n            if (!syn.alternate) {\n                return {\n                    tag: \"IfStatement\",\n                    test: restrictExpression(lang, syn.test),\n                    consequent: restrictAssert(lang, syn.consequent)\n                };\n            }\n            else {\n                return {\n                    tag: \"IfStatement\",\n                    test: restrictExpression(lang, syn.test),\n                    consequent: restrictAssert(lang, syn.consequent),\n                    alternate: restrictAssert(lang, syn.alternate)\n                };\n            }\n        }\n        case \"WhileStatement\": {\n            if (lang === \"L1\")\n                throw new Error(`Loops not a part of ${lang}`);\n            return {\n                tag: \"WhileStatement\",\n                invariants: restrictLoopInvariants(lang, syn.annos),\n                test: restrictExpression(lang, syn.test),\n                body: restrictStatement(lang, syn.body)\n            };\n        }\n        case \"ForStatement\": {\n            if (lang === \"L1\")\n                throw new Error(`Loops not a part of ${lang}`);\n            let init;\n            let update;\n            if (syn.init === null) {\n                init = null;\n            }\n            else {\n                const candidate = restrictStatement(lang, syn.init);\n                switch (candidate.tag) {\n                    case \"AssignmentStatement\":\n                    case \"UpdateStatement\":\n                    case \"ExpressionStatement\":\n                    case \"VariableDeclaration\":\n                        init = candidate;\n                        break;\n                    default:\n                        throw new Error(`A ${candidate.tag} is not allowed as the first argument of a for statement`);\n                }\n            }\n            if (syn.update === null) {\n                update = null;\n            }\n            else {\n                const candidate = restrictStatement(lang, {\n                    tag: \"ExpressionStatement\",\n                    expression: syn.update\n                });\n                switch (candidate.tag) {\n                    case \"AssignmentStatement\":\n                    case \"UpdateStatement\":\n                    case \"ExpressionStatement\":\n                        update = candidate;\n                        break;\n                    default:\n                        throw new Error(`A ${candidate.tag} is not allowed as the third argument of a for statement`);\n                }\n            }\n            return {\n                tag: \"ForStatement\",\n                invariants: restrictLoopInvariants(lang, syn.annos),\n                init: init,\n                test: restrictExpression(lang, syn.test),\n                update: update,\n                body: restrictStatement(lang, syn.body)\n            };\n        }\n        case \"ReturnStatement\": {\n            return {\n                tag: \"ReturnStatement\",\n                argument: syn.argument ? restrictExpression(lang, syn.argument) : null\n            };\n        }\n        case \"BlockStatement\": {\n            return {\n                tag: \"BlockStatement\",\n                body: syn.body.map(x => restrictStatement(lang, x))\n            };\n        }\n        case \"BreakStatement\":\n        case \"ContinueStatement\": {\n            if (lang !== \"C1\")\n                throw new Error(`Control with 'break' and 'continue' not a part of ${lang}`);\n            return syn;\n        }\n        default:\n            return impossible_1.impossible(syn);\n    }\n}\nexports.restrictStatement = restrictStatement;\nfunction restrictAssert(lang, [annos, stm]) {\n    if (annos.length === 0)\n        return restrictStatement(lang, stm);\n    const asserts = annos.map((x) => {\n        if (x.tag !== \"assert\")\n            throw new Error(`The only annotations allowed with if-statements are assertions, ${x.tag} is not permitted`);\n        return {\n            tag: \"AssertStatement\",\n            contract: true,\n            test: restrictExpression(lang, x.test)\n        };\n    });\n    return {\n        tag: \"BlockStatement\",\n        body: asserts.concat([restrictStatement(lang, stm)])\n    };\n}\nfunction restrictLoopInvariants(lang, annos) {\n    return annos.map(x => {\n        if (x.tag !== \"loop_invariant\")\n            throw new Error(`The only annotations allowed are loop invariants, ${x.tag} is not permitted`);\n        return restrictExpression(lang, x.test);\n    });\n}\nfunction restrictFunctionAnnos(lang, annos) {\n    const preconditions = [];\n    const postconditions = [];\n    annos.map(x => {\n        if (x.tag === \"requires\") {\n            preconditions.push(restrictExpression(lang, x.test));\n        }\n        else if (x.tag === \"ensures\") {\n            postconditions.push(restrictExpression(lang, x.test));\n        }\n        else {\n            throw new Error(`The only annotations allowed are requires and ensures, ${x.tag} is not permitted`);\n        }\n    });\n    return { pre: preconditions, post: postconditions };\n}\nfunction restrictParams(lang, params) {\n    return params.map(param => ({\n        tag: param.tag,\n        kind: restrictValueType(lang, param.kind),\n        id: param.id\n    }));\n}\nexports.restrictParams = restrictParams;\nfunction restrictDeclaration(lang, decl) {\n    if (typeof decl === \"string\")\n        return decl;\n    switch (decl.tag) {\n        case \"FunctionDeclaration\": {\n            if (lang == \"L1\" || lang == \"L2\") {\n                if (decl.body === null)\n                    throw new Error(`function declarations are not a part of ${lang}`);\n                if (decl.id.name !== \"main\")\n                    throw new Error(`only function 'main' can be defined in ${lang}`);\n            }\n            const annos = restrictFunctionAnnos(lang, decl.annos);\n            return {\n                tag: \"FunctionDeclaration\",\n                returns: restrictType(lang, decl.returns),\n                id: decl.id,\n                params: restrictParams(lang, decl.params),\n                preconditions: annos.pre,\n                postconditions: annos.post,\n                body: decl.body === null\n                    ? null\n                    : {\n                        tag: \"BlockStatement\",\n                        body: decl.body.body.map(x => restrictStatement(lang, x))\n                    }\n            };\n        }\n        case \"FunctionTypeDefinition\": {\n            if (lang != \"C1\")\n                throw new Error(`function types are not a part of ${lang}`);\n            const annos = restrictFunctionAnnos(lang, decl.definition.annos);\n            return {\n                tag: \"FunctionTypeDefinition\",\n                definition: {\n                    tag: \"FunctionDeclaration\",\n                    returns: restrictType(lang, decl.definition.returns),\n                    id: decl.definition.id,\n                    params: restrictParams(lang, decl.definition.params),\n                    preconditions: annos.pre,\n                    postconditions: annos.post,\n                    body: null\n                }\n            };\n        }\n        case \"StructDeclaration\": {\n            if (lang == \"L1\" || lang == \"L2\" || lang == \"L3\")\n                throw new Error(`structs are not a part of ${lang}`);\n            return {\n                tag: \"StructDeclaration\",\n                id: decl.id,\n                definitions: decl.definitions === null ? null : restrictParams(lang, decl.definitions)\n            };\n        }\n        case \"TypeDefinition\": {\n            if (lang == \"L1\" || lang == \"L2\")\n                throw new Error(`typedefs are not a part of ${lang}`);\n            return {\n                tag: \"TypeDefinition\",\n                definition: {\n                    tag: \"VariableDeclaration\",\n                    id: decl.definition.id,\n                    kind: restrictValueType(lang, decl.definition.kind)\n                }\n            };\n        }\n        default:\n            return impossible_1.impossible(decl);\n    }\n}\nexports.restrictDeclaration = restrictDeclaration;\n"
        },
        {
          "id": 16,
          "identifier": "/Users/robs/r/jaco/node_modules/nearley/lib/nearley.js",
          "name": "./node_modules/nearley/lib/nearley.js",
          "index": 6,
          "index2": 4,
          "size": 13103,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
          "issuerId": 18,
          "issuerName": "./src/parse.ts",
          "issuerPath": [
            {
              "id": 19,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "name": "./src/demo/demo.ts",
              "profile": {
                "factory": 64,
                "building": 1924
              }
            },
            {
              "id": 18,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
              "name": "./src/parse.ts",
              "profile": {
                "factory": 288,
                "building": 665,
                "dependencies": 114
              }
            }
          ],
          "profile": {
            "factory": 808,
            "building": 8,
            "dependencies": 637
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": 18,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
              "module": "./src/parse.ts",
              "moduleName": "./src/parse.ts",
              "type": "cjs require",
              "userRequest": "nearley",
              "loc": "5:18-36"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [
            "ModuleConcatenation bailout: Module is not an ECMAScript module"
          ],
          "depth": 2,
          "source": "(function(root, factory) {\n    if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        root.nearley = factory();\n    }\n}(this, function() {\n\n    function Rule(name, symbols, postprocess) {\n        this.id = ++Rule.highestId;\n        this.name = name;\n        this.symbols = symbols;        // a list of literal | regex class | nonterminal\n        this.postprocess = postprocess;\n        return this;\n    }\n    Rule.highestId = 0;\n\n    Rule.prototype.toString = function(withCursorAt) {\n        function stringifySymbolSequence (e) {\n            return e.literal ? JSON.stringify(e.literal) :\n                   e.type ? '%' + e.type : e.toString();\n        }\n        var symbolSequence = (typeof withCursorAt === \"undefined\")\n                             ? this.symbols.map(stringifySymbolSequence).join(' ')\n                             : (   this.symbols.slice(0, withCursorAt).map(stringifySymbolSequence).join(' ')\n                                 + \" ● \"\n                                 + this.symbols.slice(withCursorAt).map(stringifySymbolSequence).join(' ')     );\n        return this.name + \" → \" + symbolSequence;\n    }\n\n\n    // a State is a rule at a position from a given starting point in the input stream (reference)\n    function State(rule, dot, reference, wantedBy) {\n        this.rule = rule;\n        this.dot = dot;\n        this.reference = reference;\n        this.data = [];\n        this.wantedBy = wantedBy;\n        this.isComplete = this.dot === rule.symbols.length;\n    }\n\n    State.prototype.toString = function() {\n        return \"{\" + this.rule.toString(this.dot) + \"}, from: \" + (this.reference || 0);\n    };\n\n    State.prototype.nextState = function(child) {\n        var state = new State(this.rule, this.dot + 1, this.reference, this.wantedBy);\n        state.left = this;\n        state.right = child;\n        if (state.isComplete) {\n            state.data = state.build();\n        }\n        return state;\n    };\n\n    State.prototype.build = function() {\n        var children = [];\n        var node = this;\n        do {\n            children.push(node.right.data);\n            node = node.left;\n        } while (node.left);\n        children.reverse();\n        return children;\n    };\n\n    State.prototype.finish = function() {\n        if (this.rule.postprocess) {\n            this.data = this.rule.postprocess(this.data, this.reference, Parser.fail);\n        }\n    };\n\n\n    function Column(grammar, index) {\n        this.grammar = grammar;\n        this.index = index;\n        this.states = [];\n        this.wants = {}; // states indexed by the non-terminal they expect\n        this.scannable = []; // list of states that expect a token\n        this.completed = {}; // states that are nullable\n    }\n\n\n    Column.prototype.process = function(nextColumn) {\n        var states = this.states;\n        var wants = this.wants;\n        var completed = this.completed;\n\n        for (var w = 0; w < states.length; w++) { // nb. we push() during iteration\n            var state = states[w];\n\n            if (state.isComplete) {\n                state.finish();\n                if (state.data !== Parser.fail) {\n                    // complete\n                    var wantedBy = state.wantedBy;\n                    for (var i = wantedBy.length; i--; ) { // this line is hot\n                        var left = wantedBy[i];\n                        this.complete(left, state);\n                    }\n\n                    // special-case nullables\n                    if (state.reference === this.index) {\n                        // make sure future predictors of this rule get completed.\n                        var exp = state.rule.name;\n                        (this.completed[exp] = this.completed[exp] || []).push(state);\n                    }\n                }\n\n            } else {\n                // queue scannable states\n                var exp = state.rule.symbols[state.dot];\n                if (typeof exp !== 'string') {\n                    this.scannable.push(state);\n                    continue;\n                }\n\n                // predict\n                if (wants[exp]) {\n                    wants[exp].push(state);\n\n                    if (completed.hasOwnProperty(exp)) {\n                        var nulls = completed[exp];\n                        for (var i = 0; i < nulls.length; i++) {\n                            var right = nulls[i];\n                            this.complete(state, right);\n                        }\n                    }\n                } else {\n                    wants[exp] = [state];\n                    this.predict(exp);\n                }\n            }\n        }\n    }\n\n    Column.prototype.predict = function(exp) {\n        var rules = this.grammar.byName[exp] || [];\n\n        for (var i = 0; i < rules.length; i++) {\n            var r = rules[i];\n            var wantedBy = this.wants[exp];\n            var s = new State(r, 0, this.index, wantedBy);\n            this.states.push(s);\n        }\n    }\n\n    Column.prototype.complete = function(left, right) {\n        var copy = left.nextState(right);\n        this.states.push(copy);\n    }\n\n\n    function Grammar(rules, start) {\n        this.rules = rules;\n        this.start = start || this.rules[0].name;\n        var byName = this.byName = {};\n        this.rules.forEach(function(rule) {\n            if (!byName.hasOwnProperty(rule.name)) {\n                byName[rule.name] = [];\n            }\n            byName[rule.name].push(rule);\n        });\n    }\n\n    // So we can allow passing (rules, start) directly to Parser for backwards compatibility\n    Grammar.fromCompiled = function(rules, start) {\n        var lexer = rules.Lexer;\n        if (rules.ParserStart) {\n          start = rules.ParserStart;\n          rules = rules.ParserRules;\n        }\n        var rules = rules.map(function (r) { return (new Rule(r.name, r.symbols, r.postprocess)); });\n        var g = new Grammar(rules, start);\n        g.lexer = lexer; // nb. storing lexer on Grammar is iffy, but unavoidable\n        return g;\n    }\n\n\n    function StreamLexer() {\n      this.reset(\"\");\n    }\n\n    StreamLexer.prototype.reset = function(data, state) {\n        this.buffer = data;\n        this.index = 0;\n        this.line = state ? state.line : 1;\n        this.lastLineBreak = state ? -state.col : 0;\n    }\n\n    StreamLexer.prototype.next = function() {\n        if (this.index < this.buffer.length) {\n            var ch = this.buffer[this.index++];\n            if (ch === '\\n') {\n              this.line += 1;\n              this.lastLineBreak = this.index;\n            }\n            return {value: ch};\n        }\n    }\n\n    StreamLexer.prototype.save = function() {\n      return {\n        line: this.line,\n        col: this.index - this.lastLineBreak,\n      }\n    }\n\n    StreamLexer.prototype.formatError = function(token, message) {\n        // nb. this gets called after consuming the offending token,\n        // so the culprit is index-1\n        var buffer = this.buffer;\n        if (typeof buffer === 'string') {\n            var nextLineBreak = buffer.indexOf('\\n', this.index);\n            if (nextLineBreak === -1) nextLineBreak = buffer.length;\n            var line = buffer.substring(this.lastLineBreak, nextLineBreak)\n            var col = this.index - this.lastLineBreak;\n            message += \" at line \" + this.line + \" col \" + col + \":\\n\\n\";\n            message += \"  \" + line + \"\\n\"\n            message += \"  \" + Array(col).join(\" \") + \"^\"\n            return message;\n        } else {\n            return message + \" at index \" + (this.index - 1);\n        }\n    }\n\n\n    function Parser(rules, start, options) {\n        if (rules instanceof Grammar) {\n            var grammar = rules;\n            var options = start;\n        } else {\n            var grammar = Grammar.fromCompiled(rules, start);\n        }\n        this.grammar = grammar;\n\n        // Read options\n        this.options = {\n            keepHistory: false,\n            lexer: grammar.lexer || new StreamLexer,\n        };\n        for (var key in (options || {})) {\n            this.options[key] = options[key];\n        }\n\n        // Setup lexer\n        this.lexer = this.options.lexer;\n        this.lexerState = undefined;\n\n        // Setup a table\n        var column = new Column(grammar, 0);\n        var table = this.table = [column];\n\n        // I could be expecting anything.\n        column.wants[grammar.start] = [];\n        column.predict(grammar.start);\n        // TODO what if start rule is nullable?\n        column.process();\n        this.current = 0; // token index\n    }\n\n    // create a reserved token for indicating a parse fail\n    Parser.fail = {};\n\n    Parser.prototype.feed = function(chunk) {\n        var lexer = this.lexer;\n        lexer.reset(chunk, this.lexerState);\n\n        var token;\n        while (token = lexer.next()) {\n            // We add new states to table[current+1]\n            var column = this.table[this.current];\n\n            // GC unused states\n            if (!this.options.keepHistory) {\n                delete this.table[this.current - 1];\n            }\n\n            var n = this.current + 1;\n            var nextColumn = new Column(this.grammar, n);\n            this.table.push(nextColumn);\n\n            // Advance all tokens that expect the symbol\n            var literal = token.value;\n            var value = lexer.constructor === StreamLexer ? token.value : token;\n            var scannable = column.scannable;\n            for (var w = scannable.length; w--; ) {\n                var state = scannable[w];\n                var expect = state.rule.symbols[state.dot];\n                // Try to consume the token\n                // either regex or literal\n                if (expect.test ? expect.test(value) :\n                    expect.type ? expect.type === token.type\n                                : expect.literal === literal) {\n                    // Add it\n                    var next = state.nextState({data: value, token: token, isToken: true, reference: n - 1});\n                    nextColumn.states.push(next);\n                }\n            }\n\n            // Next, for each of the rules, we either\n            // (a) complete it, and try to see if the reference row expected that\n            //     rule\n            // (b) predict the next nonterminal it expects by adding that\n            //     nonterminal's start state\n            // To prevent duplication, we also keep track of rules we have already\n            // added\n\n            nextColumn.process();\n\n            // If needed, throw an error:\n            if (nextColumn.states.length === 0) {\n                // No states at all! This is not good.\n                var message = this.lexer.formatError(token, \"invalid syntax\") + \"\\n\";\n                message += \"Unexpected \" + (token.type ? token.type + \" token: \" : \"\");\n                message += JSON.stringify(token.value !== undefined ? token.value : token) + \"\\n\";\n                var err = new Error(message);\n                err.offset = this.current;\n                err.token = token;\n                throw err;\n            }\n\n            // maybe save lexer state\n            if (this.options.keepHistory) {\n              column.lexerState = lexer.save()\n            }\n\n            this.current++;\n        }\n        if (column) {\n          this.lexerState = lexer.save()\n        }\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n\n        // Allow chaining, for whatever it's worth\n        return this;\n    };\n\n    Parser.prototype.save = function() {\n        var column = this.table[this.current];\n        column.lexerState = this.lexerState;\n        return column;\n    };\n\n    Parser.prototype.restore = function(column) {\n        var index = column.index;\n        this.current = index;\n        this.table[index] = column;\n        this.table.splice(index + 1);\n        this.lexerState = column.lexerState;\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n    };\n\n    // nb. deprecated: use save/restore instead!\n    Parser.prototype.rewind = function(index) {\n        if (!this.options.keepHistory) {\n            throw new Error('set option `keepHistory` to enable rewinding')\n        }\n        // nb. recall column (table) indicies fall between token indicies.\n        //        col 0   --   token 0   --   col 1\n        this.restore(this.table[index]);\n    };\n\n    Parser.prototype.finish = function() {\n        // Return the possible parsings\n        var considerations = [];\n        var start = this.grammar.start;\n        var column = this.table[this.table.length - 1]\n        column.states.forEach(function (t) {\n            if (t.rule.name === start\n                    && t.dot === t.rule.symbols.length\n                    && t.reference === 0\n                    && t.data !== Parser.fail) {\n                considerations.push(t);\n            }\n        });\n        return considerations.map(function(c) {return c.data; });\n    };\n\n    return {\n        Parser: Parser,\n        Grammar: Grammar,\n        Rule: Rule,\n    };\n\n}));\n"
        },
        {
          "id": 17,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/lex.ts",
          "name": "./src/lex.ts",
          "index": 3,
          "index2": 3,
          "size": 7479,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
          "issuerId": 18,
          "issuerName": "./src/parse.ts",
          "issuerPath": [
            {
              "id": 19,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "name": "./src/demo/demo.ts",
              "profile": {
                "factory": 64,
                "building": 1924
              }
            },
            {
              "id": 18,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
              "name": "./src/parse.ts",
              "profile": {
                "factory": 288,
                "building": 665,
                "dependencies": 114
              }
            }
          ],
          "profile": {
            "factory": 808,
            "building": 8,
            "dependencies": 637
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": 18,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
              "module": "./src/parse.ts",
              "moduleName": "./src/parse.ts",
              "type": "cjs require",
              "userRequest": "./lex",
              "loc": "4:14-30"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [
            "ModuleConcatenation bailout: Module is not an ECMAScript module"
          ],
          "depth": 2,
          "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst moo_1 = require(\"moo\");\nconst immutable_1 = require(\"immutable\");\nconst impossible_1 = require(\"../node_modules/@calculemus/impossible\");\n/**\n * Ambitious Goal: \"invalid syntax\" errors from the lexer are unclear. Can we take errors out of the lexer to\n * the point we can clearly enumerate all files that will _not_ be accepted by the lexer? This would also\n * facilitate.\n *\n * Desired spec:\n * All UTF-8 strings should lex, unless they:\n *  1. Contain non-printable characters.\n *  2. Contain the character ` outside of a string/char/comment.\n *  3. Contain characters outside of the UTF-8 range.\n */\nconst basicLexing = {\n    identifier: {\n        match: /[A-Za-z_][A-Za-z0-9_]*/,\n        keywords: {\n            keyword: [\n                \"int\",\n                \"bool\",\n                \"string\",\n                \"char\",\n                \"void\",\n                \"struct\",\n                \"typedef\",\n                \"if\",\n                \"else\",\n                \"while\",\n                \"for\",\n                \"continue\",\n                \"break\",\n                \"return\",\n                \"assert\",\n                \"error\",\n                \"true\",\n                \"false\",\n                \"NULL\",\n                \"alloc\",\n                \"alloc_array\"\n            ]\n        }\n    },\n    numeric_literal: { match: /(?:0[0-9a-zA-Z_]+)|(?:[1-9][A-Za-z0-9_]*)|0/ },\n    char_delimiter: { match: /'/, push: \"charComponents\" },\n    string_delimiter: { match: /\\\"/, push: \"stringComponents\" },\n    logical_and: \"&&\",\n    decrement: \"--\",\n    increment: \"++\",\n    symbol: /[!$%&\\(\\)*+,\\-.\\/:;<=>?\\[\\\\\\]^{\\|}~]/,\n    unexpected_unicode_character: { match: /[\\x00-\\u{10FFFF}]/, lineBreaks: true },\n    invalid_character: { match: /./, lineBreaks: true },\n    type_identifier: \"<placeholder>\",\n    space: \"<placeholder>\"\n};\nfunction createLexer() {\n    return moo_1.states({\n        main: Object.assign({\n            newline: { match: /\\r?\\n/, lineBreaks: true },\n            whitespace: { match: /[ \\t\\v\\f\\r]+/ },\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            comment_line_start: { match: \"//\", push: \"lineComment\" },\n            pragma: /#.*/\n        }, basicLexing),\n        stringComponents: {\n            string_delimiter: { match: /\"/, pop: 1 },\n            characters: { match: /[^\\\\\\n\\r\"]+/, lineBreaks: false },\n            special_character: { match: /\\\\[^\\n\\r]/, lineBreaks: false },\n            invalid_string_character: { match: /[\\x00-xFF]/, lineBreaks: true }\n        },\n        charComponents: {\n            char_delimiter: { match: /'/, pop: 1 },\n            special_character: { match: /\\\\./, lineBreaks: true },\n            character: { match: /./, lineBreaks: false },\n            invalid_string_character: { match: /[\\x00-xFF]/, lineBreaks: true, pop: 1 }\n        },\n        multiLineComment: {\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            comment_end: { match: \"*/\", pop: 1 },\n            comment: { match: /\\*|\\/|[^*\\/\\n]+/, lineBreaks: false },\n            newline: { match: /\\r?\\n/, lineBreaks: true }\n        },\n        lineComment: {\n            comment: { match: /[^\\n]/, lineBreaks: false },\n            comment_line_end: { match: /\\r?\\n/, lineBreaks: true, pop: 1 }\n        }\n    }, \"main\");\n}\nexports.createLexer = createLexer;\nfunction createAnnoLexer() {\n    return moo_1.states({\n        main: Object.assign({\n            newline: { match: /\\r?\\n/, lineBreaks: true },\n            whitespace: { match: /[ \\t\\v\\f\\r]+/ },\n            anno_start: { match: \"/*@\", push: \"multiLineAnno\" },\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            anno_line_start: { match: \"//@\", push: \"lineAnno\" },\n            comment_line_start: { match: \"//\", push: \"lineComment\" },\n            pragma: /#.*/\n        }, basicLexing),\n        multiLineAnno: Object.assign({\n            newline: { match: /\\r?\\n/, lineBreaks: true },\n            whitespace: { match: /[ \\t\\v\\f\\r]+/ },\n            anno_end: { match: \"@*/\", pop: 1 },\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            comment_line_start: { match: \"//\", push: \"lineComment\" },\n            annospace: { match: \"@\" }\n        }, basicLexing),\n        lineAnno: Object.assign({\n            anno_end: { match: /\\r?\\n/, pop: 1, lineBreaks: true },\n            whitespace: { match: /[ \\t\\v\\f]+/ },\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            comment_line_start: { match: \"//\", next: \"lineComment\" },\n            annospace: { match: \"@\" }\n        }, basicLexing),\n        stringComponents: {\n            string_delimiter: { match: /\"/, pop: 1 },\n            characters: { match: /[^\\\\\\n\\r\"]+/, lineBreaks: false },\n            special_character: { match: /\\\\[^\\n\\r]/, lineBreaks: false },\n            invalid_string_character: { match: /[\\x00-xFF]/, lineBreaks: true }\n        },\n        charComponents: {\n            char_delimiter: { match: /'/, pop: 1 },\n            special_character: { match: /\\\\./, lineBreaks: true },\n            character: { match: /./, lineBreaks: false },\n            invalid_string_character: { match: /[\\x00-xFF]/, lineBreaks: true, pop: 1 }\n        },\n        multiLineComment: {\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            comment_end: { match: \"*/\", pop: 1 },\n            comment: { match: /\\*|\\/|[^*\\/\\n]+/, lineBreaks: false },\n            newline: { match: /\\r?\\n/, lineBreaks: true }\n        },\n        lineComment: {\n            comment: { match: /[^\\n]/, lineBreaks: false },\n            comment_line_end: { match: /\\r?\\n/, lineBreaks: true, pop: 1 }\n        }\n    }, \"main\");\n}\nexports.createAnnoLexer = createAnnoLexer;\nclass TypeLexer {\n    constructor(lang, typeIds, parsePragma) {\n        this.typeIds = typeIds;\n        switch (lang) {\n            case \"L1\":\n            case \"L2\":\n            case \"L3\":\n            case \"L4\": {\n                this.coreLexer = createLexer();\n                break;\n            }\n            case \"C0\":\n            case \"C1\": {\n                this.coreLexer = createAnnoLexer();\n                break;\n            }\n            default: {\n                this.coreLexer = impossible_1.impossible(lang);\n            }\n        }\n        this.parsePragma = parsePragma || (() => immutable_1.Set());\n    }\n    addIdentifier(typeIdentifier) {\n        this.typeIds = this.typeIds.add(typeIdentifier);\n    }\n    next() {\n        const tok = this.coreLexer.next();\n        if (!tok)\n            return undefined;\n        else if (tok[\"type\"] === \"pragma\") {\n            this.typeIds = this.typeIds.union(this.parsePragma(tok.text));\n            return tok;\n        }\n        else if (tok[\"type\"] === \"identifier\" && this.typeIds.has(tok.value)) {\n            tok[\"type\"] = \"type_identifier\";\n            return tok;\n        }\n        else if (tok[\"type\"] === \"identifier\") {\n            return tok;\n        }\n        else {\n            return tok;\n        }\n    }\n    save() {\n        return this.coreLexer.save();\n    }\n    reset(chunk, state) {\n        this.coreLexer.reset(chunk, state);\n    }\n    formatError(token, message) {\n        return this.coreLexer.formatError(token, message);\n    }\n    has(tokenType) {\n        return this.coreLexer.has(tokenType);\n    }\n}\nexports.TypeLexer = TypeLexer;\nexports.lexer = new TypeLexer(\"C1\", immutable_1.Set());\n"
        },
        {
          "id": 18,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
          "name": "./src/parse.ts",
          "index": 1,
          "index2": 10,
          "size": 5024,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "issuerId": 19,
          "issuerName": "./src/demo/demo.ts",
          "issuerPath": [
            {
              "id": 19,
              "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "name": "./src/demo/demo.ts",
              "profile": {
                "factory": 64,
                "building": 1924
              }
            }
          ],
          "profile": {
            "factory": 288,
            "building": 665,
            "dependencies": 114
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": 19,
              "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
              "module": "./src/demo/demo.ts",
              "moduleName": "./src/demo/demo.ts",
              "type": "cjs require",
              "userRequest": "../parse",
              "loc": "3:16-35"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [
            "ModuleConcatenation bailout: Module is not an ECMAScript module"
          ],
          "depth": 1,
          "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst immutable_1 = require(\"immutable\");\nconst lex_1 = require(\"./lex\");\nconst nearley_1 = require(\"nearley\");\nconst restrictsyntax_1 = require(\"./restrictsyntax\");\nconst expressionRules = require(\"../lib/expression-rules\");\n//const statementRules = require(\"../lib/statement-rules\");\nconst programRules = require(\"../lib/program-rules\");\nfunction parseExpression(str, options) {\n    const opt = options ? options : {};\n    const parser = new nearley_1.Parser(nearley_1.Grammar.fromCompiled(expressionRules));\n    parser.lexer = new lex_1.TypeLexer(opt.lang || \"C1\", opt.types || immutable_1.Set());\n    parser.feed(str);\n    const parsed = parser.finish();\n    if (parsed.length > 1) {\n        throw new Error(\"Ambiguous parse!\");\n    }\n    else if (parsed.length === 0) {\n        throw new Error(\"Incomplete parse\");\n    }\n    else {\n        return restrictsyntax_1.restrictExpression(opt.lang || \"C1\", parsed[0]);\n    }\n}\nexports.parseExpression = parseExpression;\n/*\nexport function parseStatement(str: string, options?: { types?: Set<string>; lang: Lang }) {\n    programRules.lexer = new TypeLexer(options && options.types ? options.types : Set<string>());\n    const parser = new Parser(Grammar.fromCompiled(programRules));\n    parser.feed(str);\n    return restrictStatement;\n}\n*/\nfunction* semicolonSplit(s) {\n    let ndx = s.indexOf(\";\");\n    while (ndx > 0) {\n        yield { last: false, segment: s.slice(0, ndx) };\n        s = s.slice(ndx + 1);\n        ndx = s.indexOf(\";\");\n    }\n    yield { last: true, segment: s };\n}\nfunction parseProgramRaw(lang, str, typedefs) {\n    const parser = new nearley_1.Parser(nearley_1.Grammar.fromCompiled(programRules));\n    const lexer = (parser.lexer = new lex_1.TypeLexer(lang, typedefs || immutable_1.Set()));\n    const segments = semicolonSplit(str);\n    let decls = immutable_1.List();\n    let size = 0;\n    for (let segment of segments) {\n        parser.feed(segment.segment);\n        const parsed = parser.finish();\n        if (parsed.length > 1) {\n            console.log(\"Parse ambiguous\");\n            console.log(JSON.stringify(parsed[0]));\n            console.log(JSON.stringify(parsed[1]));\n            console.log(JSON.stringify(parsed[2]));\n            console.log(JSON.stringify(parsed[3]));\n            console.log(JSON.stringify(parsed[4]));\n            console.log(JSON.stringify(parsed[5]));\n            console.log(JSON.stringify(parsed[parsed.length - 1]));\n            throw new Error(`Internal error, parse ambiguous (${parsed.length} parses) (this should not happen)`);\n        }\n        else if (parsed.length === 0) {\n            if (segment.last) {\n                throw new Error(\"Incomplete parse at the end of the file\");\n            }\n            else {\n                parser.feed(\";\");\n            }\n        }\n        else {\n            // parsed.length === 1\n            const parsedGlobalDecls = parsed[0];\n            for (let i = size; i < parsedGlobalDecls.length - 1; i++) {\n                if (parsedGlobalDecls[i].tag === \"TypeDefinition\" || parsedGlobalDecls[i].tag === \"FunctionTypeDefinition\")\n                    throw new Error(`typedef is missing its trailing semicolon`);\n            }\n            if (segment.last) {\n                if (parsedGlobalDecls.length > size) {\n                    const possibleTypeDef = parsedGlobalDecls[parsedGlobalDecls.length - 1];\n                    if (possibleTypeDef.tag === \"TypeDefinition\" || possibleTypeDef.tag === \"FunctionTypeDefinition\")\n                        throw new Error(`typedef without a final semicolon at the end of the file`);\n                }\n                decls = decls.concat(parsedGlobalDecls);\n            }\n            else {\n                if (parsedGlobalDecls.length === 0)\n                    throw new Error(`semicolon at beginning of file`);\n                const possibleTypedef = parsedGlobalDecls[parsedGlobalDecls.length - 1];\n                if (parsedGlobalDecls.length === size)\n                    throw new Error(`too many semicolons after a ${possibleTypedef.tag}`);\n                size = parsedGlobalDecls.length;\n                switch (possibleTypedef.tag) {\n                    case \"TypeDefinition\":\n                    case \"FunctionTypeDefinition\": {\n                        lexer.addIdentifier(possibleTypedef.definition.id.name);\n                        break;\n                    }\n                    default:\n                        throw new Error(`unnecessary semicolon at the top level after ${possibleTypedef.tag}`);\n                }\n                parser.feed(\" \");\n            }\n        }\n    }\n    // code quality: Rewrite to make this impossible; return in loop\n    return decls;\n}\nexports.parseProgramRaw = parseProgramRaw;\nfunction parseProgram(lang, str, typedefs) {\n    return parseProgramRaw(lang, str, typedefs).map(decl => {\n        return restrictsyntax_1.restrictDeclaration(lang, decl);\n    });\n}\nexports.parseProgram = parseProgram;\n"
        },
        {
          "id": 19,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "name": "./src/demo/demo.ts",
          "index": 0,
          "index2": 19,
          "size": 984,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "issuer": null,
          "issuerId": null,
          "issuerName": null,
          "issuerPath": null,
          "profile": {
            "factory": 64,
            "building": 1924
          },
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "assets": [],
          "reasons": [
            {
              "moduleId": null,
              "moduleIdentifier": null,
              "module": null,
              "moduleName": null,
              "type": "single entry",
              "userRequest": "/Users/robs/r/jaco/src/demo/demo.ts",
              "loc": "main"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [
            "ModuleConcatenation bailout: Module is not an ECMAScript module"
          ],
          "depth": 0,
          "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst parse_1 = require(\"../parse\");\nconst programs_1 = require(\"../typecheck/programs\");\nconst CodeMirror = require(\"codemirror\");\nconst immutable_1 = require(\"../../node_modules/immutable\");\nconst inputDoc = CodeMirror(document.getElementById(\"input\"), {\n    value: \"int main() {\\n  return 17;\\n}\",\n    lineNumbers: true\n});\nconst output = document.getElementById(\"output\");\nfunction draw(prog) {\n    try {\n        const program = parse_1.parseProgram(\"C1\", prog);\n        try {\n            programs_1.checkProgram(immutable_1.List(), program);\n            output.innerText = JSON.stringify(program, null, 2);\n        }\n        catch (e) {\n            output.innerText = e.message + \"\\n\\n====\\n\\n\" + JSON.stringify(program, null, 2);\n        }\n    }\n    catch (e) {\n        output.innerText = e.message;\n    }\n}\ninputDoc.on(\"update\", (x) => {\n    draw(inputDoc.getValue());\n});\ndraw(inputDoc.getValue());\n"
        }
      ],
      "filteredModules": 0,
      "origins": [
        {
          "module": "",
          "moduleIdentifier": "",
          "moduleName": "",
          "loc": "main",
          "request": "/Users/robs/r/jaco/src/demo/demo.ts",
          "reasons": []
        }
      ]
    }
  ],
  "modules": [
    {
      "id": 0,
      "identifier": "/Users/robs/r/jaco/node_modules/@calculemus/impossible/lib/index.js",
      "name": "./node_modules/@calculemus/impossible/lib/index.js",
      "index": 5,
      "index2": 2,
      "size": 217,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
      "issuerId": 12,
      "issuerName": "./src/typecheck/programs.ts",
      "issuerPath": [
        {
          "id": 19,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "name": "./src/demo/demo.ts",
          "profile": {
            "factory": 64,
            "building": 1924
          }
        },
        {
          "id": 12,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "name": "./src/typecheck/programs.ts",
          "profile": {
            "factory": 288,
            "building": 665,
            "dependencies": 114
          }
        }
      ],
      "profile": {
        "factory": 703,
        "building": 8,
        "dependencies": 347
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": 3,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/types.ts",
          "module": "./src/typecheck/types.ts",
          "moduleName": "./src/typecheck/types.ts",
          "type": "cjs require",
          "userRequest": "@calculemus/impossible",
          "loc": "3:21-54"
        },
        {
          "moduleId": 5,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/expressions.ts",
          "module": "./src/typecheck/expressions.ts",
          "moduleName": "./src/typecheck/expressions.ts",
          "type": "cjs require",
          "userRequest": "@calculemus/impossible",
          "loc": "3:21-54"
        },
        {
          "moduleId": 7,
          "moduleIdentifier": "/Users/robs/r/jaco/lib/lex.js",
          "module": "./lib/lex.js",
          "moduleName": "./lib/lex.js",
          "type": "cjs require",
          "userRequest": "../node_modules/@calculemus/impossible",
          "loc": "5:21-70"
        },
        {
          "moduleId": 10,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/flow.ts",
          "module": "./src/typecheck/flow.ts",
          "moduleName": "./src/typecheck/flow.ts",
          "type": "cjs require",
          "userRequest": "@calculemus/impossible",
          "loc": "3:21-54"
        },
        {
          "moduleId": 11,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/statements.ts",
          "module": "./src/typecheck/statements.ts",
          "moduleName": "./src/typecheck/statements.ts",
          "type": "cjs require",
          "userRequest": "@calculemus/impossible",
          "loc": "3:21-54"
        },
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "module": "./src/typecheck/programs.ts",
          "moduleName": "./src/typecheck/programs.ts",
          "type": "cjs require",
          "userRequest": "@calculemus/impossible",
          "loc": "3:21-54"
        },
        {
          "moduleId": 15,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/restrictsyntax.ts",
          "module": "./src/restrictsyntax.ts",
          "moduleName": "./src/restrictsyntax.ts",
          "type": "cjs require",
          "userRequest": "@calculemus/impossible",
          "loc": "3:21-54"
        },
        {
          "moduleId": 17,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/lex.ts",
          "module": "./src/lex.ts",
          "moduleName": "./src/lex.ts",
          "type": "cjs require",
          "userRequest": "../node_modules/@calculemus/impossible",
          "loc": "5:21-70"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [
        "ModuleConcatenation bailout: Module is not an ECMAScript module"
      ],
      "depth": 2,
      "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction impossible(x) {\n    throw new Error(\"Impossible '\" + x + \"'\");\n}\nexports.impossible = impossible;\n//# sourceMappingURL=index.js.map"
    },
    {
      "id": 1,
      "identifier": "/Users/robs/r/jaco/node_modules/immutable/dist/immutable.es.js",
      "name": "./node_modules/immutable/dist/immutable.es.js",
      "index": 2,
      "index2": 0,
      "size": 153841,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
      "issuerId": 19,
      "issuerName": "./src/demo/demo.ts",
      "issuerPath": [
        {
          "id": 19,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "name": "./src/demo/demo.ts",
          "profile": {
            "factory": 64,
            "building": 1924
          }
        }
      ],
      "profile": {
        "factory": 288,
        "building": 665,
        "dependencies": 114
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": 4,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/globalenv.ts",
          "module": "./src/typecheck/globalenv.ts",
          "moduleName": "./src/typecheck/globalenv.ts",
          "type": "cjs require",
          "userRequest": "immutable",
          "loc": "3:20-40"
        },
        {
          "moduleId": 7,
          "moduleIdentifier": "/Users/robs/r/jaco/lib/lex.js",
          "module": "./lib/lex.js",
          "moduleName": "./lib/lex.js",
          "type": "cjs require",
          "userRequest": "immutable",
          "loc": "4:20-40"
        },
        {
          "moduleId": 10,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/flow.ts",
          "module": "./src/typecheck/flow.ts",
          "moduleName": "./src/typecheck/flow.ts",
          "type": "cjs require",
          "userRequest": "immutable",
          "loc": "4:20-40"
        },
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "module": "./src/typecheck/programs.ts",
          "moduleName": "./src/typecheck/programs.ts",
          "type": "cjs require",
          "userRequest": "immutable",
          "loc": "4:20-40"
        },
        {
          "moduleId": 17,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/lex.ts",
          "module": "./src/lex.ts",
          "moduleName": "./src/lex.ts",
          "type": "cjs require",
          "userRequest": "immutable",
          "loc": "4:20-40"
        },
        {
          "moduleId": 18,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
          "module": "./src/parse.ts",
          "moduleName": "./src/parse.ts",
          "type": "cjs require",
          "userRequest": "immutable",
          "loc": "3:20-40"
        },
        {
          "moduleId": 19,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "module": "./src/demo/demo.ts",
          "moduleName": "./src/demo/demo.ts",
          "type": "cjs require",
          "userRequest": "../../node_modules/immutable",
          "loc": "6:20-59"
        }
      ],
      "usedExports": true,
      "providedExports": [
        "version",
        "Collection",
        "Iterable",
        "Seq",
        "Map",
        "OrderedMap",
        "List",
        "Stack",
        "Set",
        "OrderedSet",
        "Record",
        "Range",
        "Repeat",
        "is",
        "fromJS",
        "hash",
        "isImmutable",
        "isCollection",
        "isKeyed",
        "isIndexed",
        "isAssociative",
        "isOrdered",
        "isValueObject",
        "get",
        "getIn",
        "has",
        "hasIn",
        "merge",
        "mergeDeep",
        "mergeWith",
        "mergeDeepWith",
        "remove",
        "removeIn",
        "set",
        "setIn",
        "update",
        "updateIn",
        "default"
      ],
      "optimizationBailout": [
        "ModuleConcatenation bailout: Module is referenced from these modules with unsupported syntax: ./lib/lex.js (referenced with cjs require), ./src/demo/demo.ts (referenced with cjs require), ./src/lex.ts (referenced with cjs require), ./src/parse.ts (referenced with cjs require), ./src/typecheck/flow.ts (referenced with cjs require), ./src/typecheck/globalenv.ts (referenced with cjs require), ./src/typecheck/programs.ts (referenced with cjs require)"
      ],
      "depth": 1,
      "source": "/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// Used for setting prototype methods that IE8 chokes on.\nvar DELETE = 'delete';\n\n// Constants describing the size of trie nodes.\nvar SHIFT = 5; // Resulted in best performance after ______?\nvar SIZE = 1 << SHIFT;\nvar MASK = SIZE - 1;\n\n// A consistent shared value representing \"not set\" which equals nothing other\n// than itself, and nothing that could be provided externally.\nvar NOT_SET = {};\n\n// Boolean references, Rough equivalent of `bool &`.\nvar CHANGE_LENGTH = { value: false };\nvar DID_ALTER = { value: false };\n\nfunction MakeRef(ref) {\n  ref.value = false;\n  return ref;\n}\n\nfunction SetRef(ref) {\n  ref && (ref.value = true);\n}\n\n// A function which returns a value representing an \"owner\" for transient writes\n// to tries. The return value will only ever equal itself, and will not equal\n// the return of any subsequent call of this function.\nfunction OwnerID() {}\n\nfunction ensureSize(iter) {\n  if (iter.size === undefined) {\n    iter.size = iter.__iterate(returnTrue);\n  }\n  return iter.size;\n}\n\nfunction wrapIndex(iter, index) {\n  // This implements \"is array index\" which the ECMAString spec defines as:\n  //\n  //     A String property name P is an array index if and only if\n  //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n  //     to 2^32−1.\n  //\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n  if (typeof index !== 'number') {\n    var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n    if ('' + uint32Index !== index || uint32Index === 4294967295) {\n      return NaN;\n    }\n    index = uint32Index;\n  }\n  return index < 0 ? ensureSize(iter) + index : index;\n}\n\nfunction returnTrue() {\n  return true;\n}\n\nfunction wholeSlice(begin, end, size) {\n  return (\n    ((begin === 0 && !isNeg(begin)) ||\n      (size !== undefined && begin <= -size)) &&\n    (end === undefined || (size !== undefined && end >= size))\n  );\n}\n\nfunction resolveBegin(begin, size) {\n  return resolveIndex(begin, size, 0);\n}\n\nfunction resolveEnd(end, size) {\n  return resolveIndex(end, size, size);\n}\n\nfunction resolveIndex(index, size, defaultIndex) {\n  // Sanitize indices using this shorthand for ToInt32(argument)\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n  return index === undefined\n    ? defaultIndex\n    : isNeg(index)\n      ? size === Infinity ? size : Math.max(0, size + index) | 0\n      : size === undefined || size === index\n        ? index\n        : Math.min(size, index) | 0;\n}\n\nfunction isNeg(value) {\n  // Account for -0 which is negative, but not less than 0.\n  return value < 0 || (value === 0 && 1 / value === -Infinity);\n}\n\nfunction isImmutable(maybeImmutable) {\n  return isCollection(maybeImmutable) || isRecord(maybeImmutable);\n}\n\nfunction isCollection(maybeCollection) {\n  return !!(maybeCollection && maybeCollection[IS_ITERABLE_SENTINEL]);\n}\n\nfunction isKeyed(maybeKeyed) {\n  return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n}\n\nfunction isIndexed(maybeIndexed) {\n  return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n}\n\nfunction isAssociative(maybeAssociative) {\n  return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n}\n\nfunction isOrdered(maybeOrdered) {\n  return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n}\n\nfunction isRecord(maybeRecord) {\n  return !!(maybeRecord && maybeRecord[IS_RECORD_SENTINEL]);\n}\n\nfunction isValueObject(maybeValue) {\n  return !!(\n    maybeValue &&\n    typeof maybeValue.equals === 'function' &&\n    typeof maybeValue.hashCode === 'function'\n  );\n}\n\nvar IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\nvar IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\nvar IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\nvar IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\nvar IS_RECORD_SENTINEL = '@@__IMMUTABLE_RECORD__@@';\n\nvar Collection = function Collection(value) {\n  return isCollection(value) ? value : Seq(value);\n};\n\nvar KeyedCollection = (function (Collection) {\n  function KeyedCollection(value) {\n    return isKeyed(value) ? value : KeyedSeq(value);\n  }\n\n  if ( Collection ) KeyedCollection.__proto__ = Collection;\n  KeyedCollection.prototype = Object.create( Collection && Collection.prototype );\n  KeyedCollection.prototype.constructor = KeyedCollection;\n\n  return KeyedCollection;\n}(Collection));\n\nvar IndexedCollection = (function (Collection) {\n  function IndexedCollection(value) {\n    return isIndexed(value) ? value : IndexedSeq(value);\n  }\n\n  if ( Collection ) IndexedCollection.__proto__ = Collection;\n  IndexedCollection.prototype = Object.create( Collection && Collection.prototype );\n  IndexedCollection.prototype.constructor = IndexedCollection;\n\n  return IndexedCollection;\n}(Collection));\n\nvar SetCollection = (function (Collection) {\n  function SetCollection(value) {\n    return isCollection(value) && !isAssociative(value) ? value : SetSeq(value);\n  }\n\n  if ( Collection ) SetCollection.__proto__ = Collection;\n  SetCollection.prototype = Object.create( Collection && Collection.prototype );\n  SetCollection.prototype.constructor = SetCollection;\n\n  return SetCollection;\n}(Collection));\n\nCollection.Keyed = KeyedCollection;\nCollection.Indexed = IndexedCollection;\nCollection.Set = SetCollection;\n\nvar ITERATE_KEYS = 0;\nvar ITERATE_VALUES = 1;\nvar ITERATE_ENTRIES = 2;\n\nvar REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nvar ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\nvar Iterator = function Iterator(next) {\n  this.next = next;\n};\n\nIterator.prototype.toString = function toString () {\n  return '[Iterator]';\n};\n\nIterator.KEYS = ITERATE_KEYS;\nIterator.VALUES = ITERATE_VALUES;\nIterator.ENTRIES = ITERATE_ENTRIES;\n\nIterator.prototype.inspect = Iterator.prototype.toSource = function() {\n  return this.toString();\n};\nIterator.prototype[ITERATOR_SYMBOL] = function() {\n  return this;\n};\n\nfunction iteratorValue(type, k, v, iteratorResult) {\n  var value = type === 0 ? k : type === 1 ? v : [k, v];\n  iteratorResult\n    ? (iteratorResult.value = value)\n    : (iteratorResult = {\n        value: value,\n        done: false\n      });\n  return iteratorResult;\n}\n\nfunction iteratorDone() {\n  return { value: undefined, done: true };\n}\n\nfunction hasIterator(maybeIterable) {\n  return !!getIteratorFn(maybeIterable);\n}\n\nfunction isIterator(maybeIterator) {\n  return maybeIterator && typeof maybeIterator.next === 'function';\n}\n\nfunction getIterator(iterable) {\n  var iteratorFn = getIteratorFn(iterable);\n  return iteratorFn && iteratorFn.call(iterable);\n}\n\nfunction getIteratorFn(iterable) {\n  var iteratorFn =\n    iterable &&\n    ((REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]);\n  if (typeof iteratorFn === 'function') {\n    return iteratorFn;\n  }\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isArrayLike(value) {\n  return value && typeof value.length === 'number';\n}\n\nvar Seq = (function (Collection$$1) {\n  function Seq(value) {\n    return value === null || value === undefined\n      ? emptySequence()\n      : isImmutable(value) ? value.toSeq() : seqFromValue(value);\n  }\n\n  if ( Collection$$1 ) Seq.__proto__ = Collection$$1;\n  Seq.prototype = Object.create( Collection$$1 && Collection$$1.prototype );\n  Seq.prototype.constructor = Seq;\n\n  Seq.prototype.toSeq = function toSeq () {\n    return this;\n  };\n\n  Seq.prototype.toString = function toString () {\n    return this.__toString('Seq {', '}');\n  };\n\n  Seq.prototype.cacheResult = function cacheResult () {\n    if (!this._cache && this.__iterateUncached) {\n      this._cache = this.entrySeq().toArray();\n      this.size = this._cache.length;\n    }\n    return this;\n  };\n\n  // abstract __iterateUncached(fn, reverse)\n\n  Seq.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var cache = this._cache;\n    if (cache) {\n      var size = cache.length;\n      var i = 0;\n      while (i !== size) {\n        var entry = cache[reverse ? size - ++i : i++];\n        if (fn(entry[1], entry[0], this$1) === false) {\n          break;\n        }\n      }\n      return i;\n    }\n    return this.__iterateUncached(fn, reverse);\n  };\n\n  // abstract __iteratorUncached(type, reverse)\n\n  Seq.prototype.__iterator = function __iterator (type, reverse) {\n    var cache = this._cache;\n    if (cache) {\n      var size = cache.length;\n      var i = 0;\n      return new Iterator(function () {\n        if (i === size) {\n          return iteratorDone();\n        }\n        var entry = cache[reverse ? size - ++i : i++];\n        return iteratorValue(type, entry[0], entry[1]);\n      });\n    }\n    return this.__iteratorUncached(type, reverse);\n  };\n\n  return Seq;\n}(Collection));\n\nvar KeyedSeq = (function (Seq) {\n  function KeyedSeq(value) {\n    return value === null || value === undefined\n      ? emptySequence().toKeyedSeq()\n      : isCollection(value)\n        ? isKeyed(value) ? value.toSeq() : value.fromEntrySeq()\n        : isRecord(value) ? value.toSeq() : keyedSeqFromValue(value);\n  }\n\n  if ( Seq ) KeyedSeq.__proto__ = Seq;\n  KeyedSeq.prototype = Object.create( Seq && Seq.prototype );\n  KeyedSeq.prototype.constructor = KeyedSeq;\n\n  KeyedSeq.prototype.toKeyedSeq = function toKeyedSeq () {\n    return this;\n  };\n\n  return KeyedSeq;\n}(Seq));\n\nvar IndexedSeq = (function (Seq) {\n  function IndexedSeq(value) {\n    return value === null || value === undefined\n      ? emptySequence()\n      : isCollection(value)\n        ? isKeyed(value) ? value.entrySeq() : value.toIndexedSeq()\n        : isRecord(value)\n          ? value.toSeq().entrySeq()\n          : indexedSeqFromValue(value);\n  }\n\n  if ( Seq ) IndexedSeq.__proto__ = Seq;\n  IndexedSeq.prototype = Object.create( Seq && Seq.prototype );\n  IndexedSeq.prototype.constructor = IndexedSeq;\n\n  IndexedSeq.of = function of (/*...values*/) {\n    return IndexedSeq(arguments);\n  };\n\n  IndexedSeq.prototype.toIndexedSeq = function toIndexedSeq () {\n    return this;\n  };\n\n  IndexedSeq.prototype.toString = function toString () {\n    return this.__toString('Seq [', ']');\n  };\n\n  return IndexedSeq;\n}(Seq));\n\nvar SetSeq = (function (Seq) {\n  function SetSeq(value) {\n    return (isCollection(value) && !isAssociative(value)\n      ? value\n      : IndexedSeq(value)\n    ).toSetSeq();\n  }\n\n  if ( Seq ) SetSeq.__proto__ = Seq;\n  SetSeq.prototype = Object.create( Seq && Seq.prototype );\n  SetSeq.prototype.constructor = SetSeq;\n\n  SetSeq.of = function of (/*...values*/) {\n    return SetSeq(arguments);\n  };\n\n  SetSeq.prototype.toSetSeq = function toSetSeq () {\n    return this;\n  };\n\n  return SetSeq;\n}(Seq));\n\nSeq.isSeq = isSeq;\nSeq.Keyed = KeyedSeq;\nSeq.Set = SetSeq;\nSeq.Indexed = IndexedSeq;\n\nvar IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\nSeq.prototype[IS_SEQ_SENTINEL] = true;\n\n// #pragma Root Sequences\n\nvar ArraySeq = (function (IndexedSeq) {\n  function ArraySeq(array) {\n    this._array = array;\n    this.size = array.length;\n  }\n\n  if ( IndexedSeq ) ArraySeq.__proto__ = IndexedSeq;\n  ArraySeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  ArraySeq.prototype.constructor = ArraySeq;\n\n  ArraySeq.prototype.get = function get (index, notSetValue) {\n    return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n  };\n\n  ArraySeq.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var array = this._array;\n    var size = array.length;\n    var i = 0;\n    while (i !== size) {\n      var ii = reverse ? size - ++i : i++;\n      if (fn(array[ii], ii, this$1) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  ArraySeq.prototype.__iterator = function __iterator (type, reverse) {\n    var array = this._array;\n    var size = array.length;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var ii = reverse ? size - ++i : i++;\n      return iteratorValue(type, ii, array[ii]);\n    });\n  };\n\n  return ArraySeq;\n}(IndexedSeq));\n\nvar ObjectSeq = (function (KeyedSeq) {\n  function ObjectSeq(object) {\n    var keys = Object.keys(object);\n    this._object = object;\n    this._keys = keys;\n    this.size = keys.length;\n  }\n\n  if ( KeyedSeq ) ObjectSeq.__proto__ = KeyedSeq;\n  ObjectSeq.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );\n  ObjectSeq.prototype.constructor = ObjectSeq;\n\n  ObjectSeq.prototype.get = function get (key, notSetValue) {\n    if (notSetValue !== undefined && !this.has(key)) {\n      return notSetValue;\n    }\n    return this._object[key];\n  };\n\n  ObjectSeq.prototype.has = function has (key) {\n    return hasOwnProperty.call(this._object, key);\n  };\n\n  ObjectSeq.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var object = this._object;\n    var keys = this._keys;\n    var size = keys.length;\n    var i = 0;\n    while (i !== size) {\n      var key = keys[reverse ? size - ++i : i++];\n      if (fn(object[key], key, this$1) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  ObjectSeq.prototype.__iterator = function __iterator (type, reverse) {\n    var object = this._object;\n    var keys = this._keys;\n    var size = keys.length;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var key = keys[reverse ? size - ++i : i++];\n      return iteratorValue(type, key, object[key]);\n    });\n  };\n\n  return ObjectSeq;\n}(KeyedSeq));\nObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\nvar CollectionSeq = (function (IndexedSeq) {\n  function CollectionSeq(collection) {\n    this._collection = collection;\n    this.size = collection.length || collection.size;\n  }\n\n  if ( IndexedSeq ) CollectionSeq.__proto__ = IndexedSeq;\n  CollectionSeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  CollectionSeq.prototype.constructor = CollectionSeq;\n\n  CollectionSeq.prototype.__iterateUncached = function __iterateUncached (fn, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var collection = this._collection;\n    var iterator = getIterator(collection);\n    var iterations = 0;\n    if (isIterator(iterator)) {\n      var step;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this$1) === false) {\n          break;\n        }\n      }\n    }\n    return iterations;\n  };\n\n  CollectionSeq.prototype.__iteratorUncached = function __iteratorUncached (type, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var collection = this._collection;\n    var iterator = getIterator(collection);\n    if (!isIterator(iterator)) {\n      return new Iterator(iteratorDone);\n    }\n    var iterations = 0;\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done ? step : iteratorValue(type, iterations++, step.value);\n    });\n  };\n\n  return CollectionSeq;\n}(IndexedSeq));\n\nvar IteratorSeq = (function (IndexedSeq) {\n  function IteratorSeq(iterator) {\n    this._iterator = iterator;\n    this._iteratorCache = [];\n  }\n\n  if ( IndexedSeq ) IteratorSeq.__proto__ = IndexedSeq;\n  IteratorSeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  IteratorSeq.prototype.constructor = IteratorSeq;\n\n  IteratorSeq.prototype.__iterateUncached = function __iterateUncached (fn, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var iterator = this._iterator;\n    var cache = this._iteratorCache;\n    var iterations = 0;\n    while (iterations < cache.length) {\n      if (fn(cache[iterations], iterations++, this$1) === false) {\n        return iterations;\n      }\n    }\n    var step;\n    while (!(step = iterator.next()).done) {\n      var val = step.value;\n      cache[iterations] = val;\n      if (fn(val, iterations++, this$1) === false) {\n        break;\n      }\n    }\n    return iterations;\n  };\n\n  IteratorSeq.prototype.__iteratorUncached = function __iteratorUncached (type, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = this._iterator;\n    var cache = this._iteratorCache;\n    var iterations = 0;\n    return new Iterator(function () {\n      if (iterations >= cache.length) {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        cache[iterations] = step.value;\n      }\n      return iteratorValue(type, iterations, cache[iterations++]);\n    });\n  };\n\n  return IteratorSeq;\n}(IndexedSeq));\n\n// # pragma Helper functions\n\nfunction isSeq(maybeSeq) {\n  return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n}\n\nvar EMPTY_SEQ;\n\nfunction emptySequence() {\n  return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n}\n\nfunction keyedSeqFromValue(value) {\n  var seq = Array.isArray(value)\n    ? new ArraySeq(value)\n    : isIterator(value)\n      ? new IteratorSeq(value)\n      : hasIterator(value) ? new CollectionSeq(value) : undefined;\n  if (seq) {\n    return seq.fromEntrySeq();\n  }\n  if (typeof value === 'object') {\n    return new ObjectSeq(value);\n  }\n  throw new TypeError(\n    'Expected Array or collection object of [k, v] entries, or keyed object: ' +\n      value\n  );\n}\n\nfunction indexedSeqFromValue(value) {\n  var seq = maybeIndexedSeqFromValue(value);\n  if (seq) {\n    return seq;\n  }\n  throw new TypeError(\n    'Expected Array or collection object of values: ' + value\n  );\n}\n\nfunction seqFromValue(value) {\n  var seq = maybeIndexedSeqFromValue(value);\n  if (seq) {\n    return seq;\n  }\n  if (typeof value === 'object') {\n    return new ObjectSeq(value);\n  }\n  throw new TypeError(\n    'Expected Array or collection object of values, or keyed object: ' + value\n  );\n}\n\nfunction maybeIndexedSeqFromValue(value) {\n  return isArrayLike(value)\n    ? new ArraySeq(value)\n    : isIterator(value)\n      ? new IteratorSeq(value)\n      : hasIterator(value) ? new CollectionSeq(value) : undefined;\n}\n\n/**\n * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n *\n * NaN is considered the same as NaN, however -0 and 0 are considered the same\n * value, which is different from the algorithm described by\n * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n *\n * This is extended further to allow Objects to describe the values they\n * represent, by way of `valueOf` or `equals` (and `hashCode`).\n *\n * Note: because of this extension, the key equality of Immutable.Map and the\n * value equality of Immutable.Set will differ from ES6 Map and Set.\n *\n * ### Defining custom values\n *\n * The easiest way to describe the value an object represents is by implementing\n * `valueOf`. For example, `Date` represents a value by returning a unix\n * timestamp for `valueOf`:\n *\n *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n *     var date2 = new Date(1234567890000);\n *     date1.valueOf(); // 1234567890000\n *     assert( date1 !== date2 );\n *     assert( Immutable.is( date1, date2 ) );\n *\n * Note: overriding `valueOf` may have other implications if you use this object\n * where JavaScript expects a primitive, such as implicit string coercion.\n *\n * For more complex types, especially collections, implementing `valueOf` may\n * not be performant. An alternative is to implement `equals` and `hashCode`.\n *\n * `equals` takes another object, presumably of similar type, and returns true\n * if it is equal. Equality is symmetrical, so the same result should be\n * returned if this and the argument are flipped.\n *\n *     assert( a.equals(b) === b.equals(a) );\n *\n * `hashCode` returns a 32bit integer number representing the object which will\n * be used to determine how to store the value object in a Map or Set. You must\n * provide both or neither methods, one must not exist without the other.\n *\n * Also, an important relationship between these methods must be upheld: if two\n * values are equal, they *must* return the same hashCode. If the values are not\n * equal, they might have the same hashCode; this is called a hash collision,\n * and while undesirable for performance reasons, it is acceptable.\n *\n *     if (a.equals(b)) {\n *       assert( a.hashCode() === b.hashCode() );\n *     }\n *\n * All Immutable collections are Value Objects: they implement `equals()`\n * and `hashCode()`.\n */\nfunction is(valueA, valueB) {\n  if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n    return true;\n  }\n  if (!valueA || !valueB) {\n    return false;\n  }\n  if (\n    typeof valueA.valueOf === 'function' &&\n    typeof valueB.valueOf === 'function'\n  ) {\n    valueA = valueA.valueOf();\n    valueB = valueB.valueOf();\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n  }\n  return !!(\n    isValueObject(valueA) &&\n    isValueObject(valueB) &&\n    valueA.equals(valueB)\n  );\n}\n\nvar imul =\n  typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2\n    ? Math.imul\n    : function imul(a, b) {\n        a |= 0; // int\n        b |= 0; // int\n        var c = a & 0xffff;\n        var d = b & 0xffff;\n        // Shift by 0 fixes the sign on the high part.\n        return (c * d + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0)) | 0; // int\n      };\n\n// v8 has an optimization for storing 31-bit signed numbers.\n// Values which have either 00 or 11 as the high order bits qualify.\n// This function drops the highest order bit in a signed number, maintaining\n// the sign bit.\nfunction smi(i32) {\n  return ((i32 >>> 1) & 0x40000000) | (i32 & 0xbfffffff);\n}\n\nfunction hash(o) {\n  if (o === false || o === null || o === undefined) {\n    return 0;\n  }\n  if (typeof o.valueOf === 'function') {\n    o = o.valueOf();\n    if (o === false || o === null || o === undefined) {\n      return 0;\n    }\n  }\n  if (o === true) {\n    return 1;\n  }\n  var type = typeof o;\n  if (type === 'number') {\n    if (o !== o || o === Infinity) {\n      return 0;\n    }\n    var h = o | 0;\n    if (h !== o) {\n      h ^= o * 0xffffffff;\n    }\n    while (o > 0xffffffff) {\n      o /= 0xffffffff;\n      h ^= o;\n    }\n    return smi(h);\n  }\n  if (type === 'string') {\n    return o.length > STRING_HASH_CACHE_MIN_STRLEN\n      ? cachedHashString(o)\n      : hashString(o);\n  }\n  if (typeof o.hashCode === 'function') {\n    // Drop any high bits from accidentally long hash codes.\n    return smi(o.hashCode());\n  }\n  if (type === 'object') {\n    return hashJSObj(o);\n  }\n  if (typeof o.toString === 'function') {\n    return hashString(o.toString());\n  }\n  throw new Error('Value type ' + type + ' cannot be hashed.');\n}\n\nfunction cachedHashString(string) {\n  var hashed = stringHashCache[string];\n  if (hashed === undefined) {\n    hashed = hashString(string);\n    if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n      STRING_HASH_CACHE_SIZE = 0;\n      stringHashCache = {};\n    }\n    STRING_HASH_CACHE_SIZE++;\n    stringHashCache[string] = hashed;\n  }\n  return hashed;\n}\n\n// http://jsperf.com/hashing-strings\nfunction hashString(string) {\n  // This is the hash from JVM\n  // The hash code for a string is computed as\n  // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n  // where s[i] is the ith character of the string and n is the length of\n  // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n  // (exclusive) by dropping high bits.\n  var hashed = 0;\n  for (var ii = 0; ii < string.length; ii++) {\n    hashed = (31 * hashed + string.charCodeAt(ii)) | 0;\n  }\n  return smi(hashed);\n}\n\nfunction hashJSObj(obj) {\n  var hashed;\n  if (usingWeakMap) {\n    hashed = weakMap.get(obj);\n    if (hashed !== undefined) {\n      return hashed;\n    }\n  }\n\n  hashed = obj[UID_HASH_KEY];\n  if (hashed !== undefined) {\n    return hashed;\n  }\n\n  if (!canDefineProperty) {\n    hashed = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n    if (hashed !== undefined) {\n      return hashed;\n    }\n\n    hashed = getIENodeHash(obj);\n    if (hashed !== undefined) {\n      return hashed;\n    }\n  }\n\n  hashed = ++objHashUID;\n  if (objHashUID & 0x40000000) {\n    objHashUID = 0;\n  }\n\n  if (usingWeakMap) {\n    weakMap.set(obj, hashed);\n  } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n    throw new Error('Non-extensible objects are not allowed as keys.');\n  } else if (canDefineProperty) {\n    Object.defineProperty(obj, UID_HASH_KEY, {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: hashed\n    });\n  } else if (\n    obj.propertyIsEnumerable !== undefined &&\n    obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable\n  ) {\n    // Since we can't define a non-enumerable property on the object\n    // we'll hijack one of the less-used non-enumerable properties to\n    // save our hash on it. Since this is a function it will not show up in\n    // `JSON.stringify` which is what we want.\n    obj.propertyIsEnumerable = function() {\n      return this.constructor.prototype.propertyIsEnumerable.apply(\n        this,\n        arguments\n      );\n    };\n    obj.propertyIsEnumerable[UID_HASH_KEY] = hashed;\n  } else if (obj.nodeType !== undefined) {\n    // At this point we couldn't get the IE `uniqueID` to use as a hash\n    // and we couldn't use a non-enumerable property to exploit the\n    // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n    // itself.\n    obj[UID_HASH_KEY] = hashed;\n  } else {\n    throw new Error('Unable to set a non-enumerable property on object.');\n  }\n\n  return hashed;\n}\n\n// Get references to ES5 object methods.\nvar isExtensible = Object.isExtensible;\n\n// True if Object.defineProperty works as expected. IE8 fails this test.\nvar canDefineProperty = (function() {\n  try {\n    Object.defineProperty({}, '@', {});\n    return true;\n  } catch (e) {\n    return false;\n  }\n})();\n\n// IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n// and avoid memory leaks from the IE cloneNode bug.\nfunction getIENodeHash(node) {\n  if (node && node.nodeType > 0) {\n    switch (node.nodeType) {\n      case 1: // Element\n        return node.uniqueID;\n      case 9: // Document\n        return node.documentElement && node.documentElement.uniqueID;\n    }\n  }\n}\n\n// If possible, use a WeakMap.\nvar usingWeakMap = typeof WeakMap === 'function';\nvar weakMap;\nif (usingWeakMap) {\n  weakMap = new WeakMap();\n}\n\nvar objHashUID = 0;\n\nvar UID_HASH_KEY = '__immutablehash__';\nif (typeof Symbol === 'function') {\n  UID_HASH_KEY = Symbol(UID_HASH_KEY);\n}\n\nvar STRING_HASH_CACHE_MIN_STRLEN = 16;\nvar STRING_HASH_CACHE_MAX_SIZE = 255;\nvar STRING_HASH_CACHE_SIZE = 0;\nvar stringHashCache = {};\n\nvar ToKeyedSequence = (function (KeyedSeq$$1) {\n  function ToKeyedSequence(indexed, useKeys) {\n    this._iter = indexed;\n    this._useKeys = useKeys;\n    this.size = indexed.size;\n  }\n\n  if ( KeyedSeq$$1 ) ToKeyedSequence.__proto__ = KeyedSeq$$1;\n  ToKeyedSequence.prototype = Object.create( KeyedSeq$$1 && KeyedSeq$$1.prototype );\n  ToKeyedSequence.prototype.constructor = ToKeyedSequence;\n\n  ToKeyedSequence.prototype.get = function get (key, notSetValue) {\n    return this._iter.get(key, notSetValue);\n  };\n\n  ToKeyedSequence.prototype.has = function has (key) {\n    return this._iter.has(key);\n  };\n\n  ToKeyedSequence.prototype.valueSeq = function valueSeq () {\n    return this._iter.valueSeq();\n  };\n\n  ToKeyedSequence.prototype.reverse = function reverse () {\n    var this$1 = this;\n\n    var reversedSequence = reverseFactory(this, true);\n    if (!this._useKeys) {\n      reversedSequence.valueSeq = function () { return this$1._iter.toSeq().reverse(); };\n    }\n    return reversedSequence;\n  };\n\n  ToKeyedSequence.prototype.map = function map (mapper, context) {\n    var this$1 = this;\n\n    var mappedSequence = mapFactory(this, mapper, context);\n    if (!this._useKeys) {\n      mappedSequence.valueSeq = function () { return this$1._iter.toSeq().map(mapper, context); };\n    }\n    return mappedSequence;\n  };\n\n  ToKeyedSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    return this._iter.__iterate(function (v, k) { return fn(v, k, this$1); }, reverse);\n  };\n\n  ToKeyedSequence.prototype.__iterator = function __iterator (type, reverse) {\n    return this._iter.__iterator(type, reverse);\n  };\n\n  return ToKeyedSequence;\n}(KeyedSeq));\nToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\nvar ToIndexedSequence = (function (IndexedSeq$$1) {\n  function ToIndexedSequence(iter) {\n    this._iter = iter;\n    this.size = iter.size;\n  }\n\n  if ( IndexedSeq$$1 ) ToIndexedSequence.__proto__ = IndexedSeq$$1;\n  ToIndexedSequence.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );\n  ToIndexedSequence.prototype.constructor = ToIndexedSequence;\n\n  ToIndexedSequence.prototype.includes = function includes (value) {\n    return this._iter.includes(value);\n  };\n\n  ToIndexedSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var i = 0;\n    reverse && ensureSize(this);\n    return this._iter.__iterate(\n      function (v) { return fn(v, reverse ? this$1.size - ++i : i++, this$1); },\n      reverse\n    );\n  };\n\n  ToIndexedSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var this$1 = this;\n\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    var i = 0;\n    reverse && ensureSize(this);\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done\n        ? step\n        : iteratorValue(\n            type,\n            reverse ? this$1.size - ++i : i++,\n            step.value,\n            step\n          );\n    });\n  };\n\n  return ToIndexedSequence;\n}(IndexedSeq));\n\nvar ToSetSequence = (function (SetSeq$$1) {\n  function ToSetSequence(iter) {\n    this._iter = iter;\n    this.size = iter.size;\n  }\n\n  if ( SetSeq$$1 ) ToSetSequence.__proto__ = SetSeq$$1;\n  ToSetSequence.prototype = Object.create( SetSeq$$1 && SetSeq$$1.prototype );\n  ToSetSequence.prototype.constructor = ToSetSequence;\n\n  ToSetSequence.prototype.has = function has (key) {\n    return this._iter.includes(key);\n  };\n\n  ToSetSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    return this._iter.__iterate(function (v) { return fn(v, v, this$1); }, reverse);\n  };\n\n  ToSetSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done\n        ? step\n        : iteratorValue(type, step.value, step.value, step);\n    });\n  };\n\n  return ToSetSequence;\n}(SetSeq));\n\nvar FromEntriesSequence = (function (KeyedSeq$$1) {\n  function FromEntriesSequence(entries) {\n    this._iter = entries;\n    this.size = entries.size;\n  }\n\n  if ( KeyedSeq$$1 ) FromEntriesSequence.__proto__ = KeyedSeq$$1;\n  FromEntriesSequence.prototype = Object.create( KeyedSeq$$1 && KeyedSeq$$1.prototype );\n  FromEntriesSequence.prototype.constructor = FromEntriesSequence;\n\n  FromEntriesSequence.prototype.entrySeq = function entrySeq () {\n    return this._iter.toSeq();\n  };\n\n  FromEntriesSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    return this._iter.__iterate(function (entry) {\n      // Check if entry exists first so array access doesn't throw for holes\n      // in the parent iteration.\n      if (entry) {\n        validateEntry(entry);\n        var indexedCollection = isCollection(entry);\n        return fn(\n          indexedCollection ? entry.get(1) : entry[1],\n          indexedCollection ? entry.get(0) : entry[0],\n          this$1\n        );\n      }\n    }, reverse);\n  };\n\n  FromEntriesSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    return new Iterator(function () {\n      while (true) {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedCollection = isCollection(entry);\n          return iteratorValue(\n            type,\n            indexedCollection ? entry.get(0) : entry[0],\n            indexedCollection ? entry.get(1) : entry[1],\n            step\n          );\n        }\n      }\n    });\n  };\n\n  return FromEntriesSequence;\n}(KeyedSeq));\n\nToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;\n\nfunction flipFactory(collection) {\n  var flipSequence = makeSequence(collection);\n  flipSequence._iter = collection;\n  flipSequence.size = collection.size;\n  flipSequence.flip = function () { return collection; };\n  flipSequence.reverse = function() {\n    var reversedSequence = collection.reverse.apply(this); // super.reverse()\n    reversedSequence.flip = function () { return collection.reverse(); };\n    return reversedSequence;\n  };\n  flipSequence.has = function (key) { return collection.includes(key); };\n  flipSequence.includes = function (key) { return collection.has(key); };\n  flipSequence.cacheResult = cacheResultThrough;\n  flipSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    return collection.__iterate(function (v, k) { return fn(k, v, this$1) !== false; }, reverse);\n  };\n  flipSequence.__iteratorUncached = function(type, reverse) {\n    if (type === ITERATE_ENTRIES) {\n      var iterator = collection.__iterator(type, reverse);\n      return new Iterator(function () {\n        var step = iterator.next();\n        if (!step.done) {\n          var k = step.value[0];\n          step.value[0] = step.value[1];\n          step.value[1] = k;\n        }\n        return step;\n      });\n    }\n    return collection.__iterator(\n      type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n      reverse\n    );\n  };\n  return flipSequence;\n}\n\nfunction mapFactory(collection, mapper, context) {\n  var mappedSequence = makeSequence(collection);\n  mappedSequence.size = collection.size;\n  mappedSequence.has = function (key) { return collection.has(key); };\n  mappedSequence.get = function (key, notSetValue) {\n    var v = collection.get(key, NOT_SET);\n    return v === NOT_SET\n      ? notSetValue\n      : mapper.call(context, v, key, collection);\n  };\n  mappedSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    return collection.__iterate(\n      function (v, k, c) { return fn(mapper.call(context, v, k, c), k, this$1) !== false; },\n      reverse\n    );\n  };\n  mappedSequence.__iteratorUncached = function(type, reverse) {\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      var key = entry[0];\n      return iteratorValue(\n        type,\n        key,\n        mapper.call(context, entry[1], key, collection),\n        step\n      );\n    });\n  };\n  return mappedSequence;\n}\n\nfunction reverseFactory(collection, useKeys) {\n  var this$1 = this;\n\n  var reversedSequence = makeSequence(collection);\n  reversedSequence._iter = collection;\n  reversedSequence.size = collection.size;\n  reversedSequence.reverse = function () { return collection; };\n  if (collection.flip) {\n    reversedSequence.flip = function() {\n      var flipSequence = flipFactory(collection);\n      flipSequence.reverse = function () { return collection.flip(); };\n      return flipSequence;\n    };\n  }\n  reversedSequence.get = function (key, notSetValue) { return collection.get(useKeys ? key : -1 - key, notSetValue); };\n  reversedSequence.has = function (key) { return collection.has(useKeys ? key : -1 - key); };\n  reversedSequence.includes = function (value) { return collection.includes(value); };\n  reversedSequence.cacheResult = cacheResultThrough;\n  reversedSequence.__iterate = function(fn, reverse) {\n    var this$1 = this;\n\n    var i = 0;\n    reverse && ensureSize(collection);\n    return collection.__iterate(\n      function (v, k) { return fn(v, useKeys ? k : reverse ? this$1.size - ++i : i++, this$1); },\n      !reverse\n    );\n  };\n  reversedSequence.__iterator = function (type, reverse) {\n    var i = 0;\n    reverse && ensureSize(collection);\n    var iterator = collection.__iterator(ITERATE_ENTRIES, !reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      return iteratorValue(\n        type,\n        useKeys ? entry[0] : reverse ? this$1.size - ++i : i++,\n        entry[1],\n        step\n      );\n    });\n  };\n  return reversedSequence;\n}\n\nfunction filterFactory(collection, predicate, context, useKeys) {\n  var filterSequence = makeSequence(collection);\n  if (useKeys) {\n    filterSequence.has = function (key) {\n      var v = collection.get(key, NOT_SET);\n      return v !== NOT_SET && !!predicate.call(context, v, key, collection);\n    };\n    filterSequence.get = function (key, notSetValue) {\n      var v = collection.get(key, NOT_SET);\n      return v !== NOT_SET && predicate.call(context, v, key, collection)\n        ? v\n        : notSetValue;\n    };\n  }\n  filterSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    var iterations = 0;\n    collection.__iterate(function (v, k, c) {\n      if (predicate.call(context, v, k, c)) {\n        iterations++;\n        return fn(v, useKeys ? k : iterations - 1, this$1);\n      }\n    }, reverse);\n    return iterations;\n  };\n  filterSequence.__iteratorUncached = function(type, reverse) {\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var iterations = 0;\n    return new Iterator(function () {\n      while (true) {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        var value = entry[1];\n        if (predicate.call(context, value, key, collection)) {\n          return iteratorValue(type, useKeys ? key : iterations++, value, step);\n        }\n      }\n    });\n  };\n  return filterSequence;\n}\n\nfunction countByFactory(collection, grouper, context) {\n  var groups = Map().asMutable();\n  collection.__iterate(function (v, k) {\n    groups.update(grouper.call(context, v, k, collection), 0, function (a) { return a + 1; });\n  });\n  return groups.asImmutable();\n}\n\nfunction groupByFactory(collection, grouper, context) {\n  var isKeyedIter = isKeyed(collection);\n  var groups = (isOrdered(collection) ? OrderedMap() : Map()).asMutable();\n  collection.__iterate(function (v, k) {\n    groups.update(\n      grouper.call(context, v, k, collection),\n      function (a) { return ((a = a || []), a.push(isKeyedIter ? [k, v] : v), a); }\n    );\n  });\n  var coerce = collectionClass(collection);\n  return groups.map(function (arr) { return reify(collection, coerce(arr)); });\n}\n\nfunction sliceFactory(collection, begin, end, useKeys) {\n  var originalSize = collection.size;\n\n  if (wholeSlice(begin, end, originalSize)) {\n    return collection;\n  }\n\n  var resolvedBegin = resolveBegin(begin, originalSize);\n  var resolvedEnd = resolveEnd(end, originalSize);\n\n  // begin or end will be NaN if they were provided as negative numbers and\n  // this collection's size is unknown. In that case, cache first so there is\n  // a known size and these do not resolve to NaN.\n  if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n    return sliceFactory(collection.toSeq().cacheResult(), begin, end, useKeys);\n  }\n\n  // Note: resolvedEnd is undefined when the original sequence's length is\n  // unknown and this slice did not supply an end and should contain all\n  // elements after resolvedBegin.\n  // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n  var resolvedSize = resolvedEnd - resolvedBegin;\n  var sliceSize;\n  if (resolvedSize === resolvedSize) {\n    sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n  }\n\n  var sliceSeq = makeSequence(collection);\n\n  // If collection.size is undefined, the size of the realized sliceSeq is\n  // unknown at this point unless the number of items to slice is 0\n  sliceSeq.size =\n    sliceSize === 0 ? sliceSize : (collection.size && sliceSize) || undefined;\n\n  if (!useKeys && isSeq(collection) && sliceSize >= 0) {\n    sliceSeq.get = function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return index >= 0 && index < sliceSize\n        ? collection.get(index + resolvedBegin, notSetValue)\n        : notSetValue;\n    };\n  }\n\n  sliceSeq.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    if (sliceSize === 0) {\n      return 0;\n    }\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var skipped = 0;\n    var isSkipping = true;\n    var iterations = 0;\n    collection.__iterate(function (v, k) {\n      if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n        iterations++;\n        return (\n          fn(v, useKeys ? k : iterations - 1, this$1) !== false &&\n          iterations !== sliceSize\n        );\n      }\n    });\n    return iterations;\n  };\n\n  sliceSeq.__iteratorUncached = function(type, reverse) {\n    if (sliceSize !== 0 && reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    // Don't bother instantiating parent iterator if taking 0.\n    if (sliceSize === 0) {\n      return new Iterator(iteratorDone);\n    }\n    var iterator = collection.__iterator(type, reverse);\n    var skipped = 0;\n    var iterations = 0;\n    return new Iterator(function () {\n      while (skipped++ < resolvedBegin) {\n        iterator.next();\n      }\n      if (++iterations > sliceSize) {\n        return iteratorDone();\n      }\n      var step = iterator.next();\n      if (useKeys || type === ITERATE_VALUES || step.done) {\n        return step;\n      }\n      if (type === ITERATE_KEYS) {\n        return iteratorValue(type, iterations - 1, undefined, step);\n      }\n      return iteratorValue(type, iterations - 1, step.value[1], step);\n    });\n  };\n\n  return sliceSeq;\n}\n\nfunction takeWhileFactory(collection, predicate, context) {\n  var takeSequence = makeSequence(collection);\n  takeSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var iterations = 0;\n    collection.__iterate(\n      function (v, k, c) { return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$1); }\n    );\n    return iterations;\n  };\n  takeSequence.__iteratorUncached = function(type, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var iterating = true;\n    return new Iterator(function () {\n      if (!iterating) {\n        return iteratorDone();\n      }\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      var k = entry[0];\n      var v = entry[1];\n      if (!predicate.call(context, v, k, this$1)) {\n        iterating = false;\n        return iteratorDone();\n      }\n      return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n    });\n  };\n  return takeSequence;\n}\n\nfunction skipWhileFactory(collection, predicate, context, useKeys) {\n  var skipSequence = makeSequence(collection);\n  skipSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var isSkipping = true;\n    var iterations = 0;\n    collection.__iterate(function (v, k, c) {\n      if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n        iterations++;\n        return fn(v, useKeys ? k : iterations - 1, this$1);\n      }\n    });\n    return iterations;\n  };\n  skipSequence.__iteratorUncached = function(type, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var skipping = true;\n    var iterations = 0;\n    return new Iterator(function () {\n      var step;\n      var k;\n      var v;\n      do {\n        step = iterator.next();\n        if (step.done) {\n          if (useKeys || type === ITERATE_VALUES) {\n            return step;\n          }\n          if (type === ITERATE_KEYS) {\n            return iteratorValue(type, iterations++, undefined, step);\n          }\n          return iteratorValue(type, iterations++, step.value[1], step);\n        }\n        var entry = step.value;\n        k = entry[0];\n        v = entry[1];\n        skipping && (skipping = predicate.call(context, v, k, this$1));\n      } while (skipping);\n      return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n    });\n  };\n  return skipSequence;\n}\n\nfunction concatFactory(collection, values) {\n  var isKeyedCollection = isKeyed(collection);\n  var iters = [collection]\n    .concat(values)\n    .map(function (v) {\n      if (!isCollection(v)) {\n        v = isKeyedCollection\n          ? keyedSeqFromValue(v)\n          : indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedCollection) {\n        v = KeyedCollection(v);\n      }\n      return v;\n    })\n    .filter(function (v) { return v.size !== 0; });\n\n  if (iters.length === 0) {\n    return collection;\n  }\n\n  if (iters.length === 1) {\n    var singleton = iters[0];\n    if (\n      singleton === collection ||\n      (isKeyedCollection && isKeyed(singleton)) ||\n      (isIndexed(collection) && isIndexed(singleton))\n    ) {\n      return singleton;\n    }\n  }\n\n  var concatSeq = new ArraySeq(iters);\n  if (isKeyedCollection) {\n    concatSeq = concatSeq.toKeyedSeq();\n  } else if (!isIndexed(collection)) {\n    concatSeq = concatSeq.toSetSeq();\n  }\n  concatSeq = concatSeq.flatten(true);\n  concatSeq.size = iters.reduce(function (sum, seq) {\n    if (sum !== undefined) {\n      var size = seq.size;\n      if (size !== undefined) {\n        return sum + size;\n      }\n    }\n  }, 0);\n  return concatSeq;\n}\n\nfunction flattenFactory(collection, depth, useKeys) {\n  var flatSequence = makeSequence(collection);\n  flatSequence.__iterateUncached = function(fn, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var iterations = 0;\n    var stopped = false;\n    function flatDeep(iter, currentDepth) {\n      iter.__iterate(function (v, k) {\n        if ((!depth || currentDepth < depth) && isCollection(v)) {\n          flatDeep(v, currentDepth + 1);\n        } else {\n          iterations++;\n          if (fn(v, useKeys ? k : iterations - 1, flatSequence) === false) {\n            stopped = true;\n          }\n        }\n        return !stopped;\n      }, reverse);\n    }\n    flatDeep(collection, 0);\n    return iterations;\n  };\n  flatSequence.__iteratorUncached = function(type, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(type, reverse);\n    var stack = [];\n    var iterations = 0;\n    return new Iterator(function () {\n      while (iterator) {\n        var step = iterator.next();\n        if (step.done !== false) {\n          iterator = stack.pop();\n          continue;\n        }\n        var v = step.value;\n        if (type === ITERATE_ENTRIES) {\n          v = v[1];\n        }\n        if ((!depth || stack.length < depth) && isCollection(v)) {\n          stack.push(iterator);\n          iterator = v.__iterator(type, reverse);\n        } else {\n          return useKeys ? step : iteratorValue(type, iterations++, v, step);\n        }\n      }\n      return iteratorDone();\n    });\n  };\n  return flatSequence;\n}\n\nfunction flatMapFactory(collection, mapper, context) {\n  var coerce = collectionClass(collection);\n  return collection\n    .toSeq()\n    .map(function (v, k) { return coerce(mapper.call(context, v, k, collection)); })\n    .flatten(true);\n}\n\nfunction interposeFactory(collection, separator) {\n  var interposedSequence = makeSequence(collection);\n  interposedSequence.size = collection.size && collection.size * 2 - 1;\n  interposedSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    var iterations = 0;\n    collection.__iterate(\n      function (v) { return (!iterations || fn(separator, iterations++, this$1) !== false) &&\n        fn(v, iterations++, this$1) !== false; },\n      reverse\n    );\n    return iterations;\n  };\n  interposedSequence.__iteratorUncached = function(type, reverse) {\n    var iterator = collection.__iterator(ITERATE_VALUES, reverse);\n    var iterations = 0;\n    var step;\n    return new Iterator(function () {\n      if (!step || iterations % 2) {\n        step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n      }\n      return iterations % 2\n        ? iteratorValue(type, iterations++, separator)\n        : iteratorValue(type, iterations++, step.value, step);\n    });\n  };\n  return interposedSequence;\n}\n\nfunction sortFactory(collection, comparator, mapper) {\n  if (!comparator) {\n    comparator = defaultComparator;\n  }\n  var isKeyedCollection = isKeyed(collection);\n  var index = 0;\n  var entries = collection\n    .toSeq()\n    .map(function (v, k) { return [k, v, index++, mapper ? mapper(v, k, collection) : v]; })\n    .valueSeq()\n    .toArray();\n  entries.sort(function (a, b) { return comparator(a[3], b[3]) || a[2] - b[2]; }).forEach(\n    isKeyedCollection\n      ? function (v, i) {\n          entries[i].length = 2;\n        }\n      : function (v, i) {\n          entries[i] = v[1];\n        }\n  );\n  return isKeyedCollection\n    ? KeyedSeq(entries)\n    : isIndexed(collection) ? IndexedSeq(entries) : SetSeq(entries);\n}\n\nfunction maxFactory(collection, comparator, mapper) {\n  if (!comparator) {\n    comparator = defaultComparator;\n  }\n  if (mapper) {\n    var entry = collection\n      .toSeq()\n      .map(function (v, k) { return [v, mapper(v, k, collection)]; })\n      .reduce(function (a, b) { return (maxCompare(comparator, a[1], b[1]) ? b : a); });\n    return entry && entry[0];\n  }\n  return collection.reduce(function (a, b) { return (maxCompare(comparator, a, b) ? b : a); });\n}\n\nfunction maxCompare(comparator, a, b) {\n  var comp = comparator(b, a);\n  // b is considered the new max if the comparator declares them equal, but\n  // they are not equal and b is in fact a nullish value.\n  return (\n    (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) ||\n    comp > 0\n  );\n}\n\nfunction zipWithFactory(keyIter, zipper, iters, zipAll) {\n  var zipSequence = makeSequence(keyIter);\n  var sizes = new ArraySeq(iters).map(function (i) { return i.size; });\n  zipSequence.size = zipAll ? sizes.max() : sizes.min();\n  // Note: this a generic base implementation of __iterate in terms of\n  // __iterator which may be more generically useful in the future.\n  zipSequence.__iterate = function(fn, reverse) {\n    var this$1 = this;\n\n    /* generic:\n    var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n    var step;\n    var iterations = 0;\n    while (!(step = iterator.next()).done) {\n      iterations++;\n      if (fn(step.value[1], step.value[0], this) === false) {\n        break;\n      }\n    }\n    return iterations;\n    */\n    // indexed:\n    var iterator = this.__iterator(ITERATE_VALUES, reverse);\n    var step;\n    var iterations = 0;\n    while (!(step = iterator.next()).done) {\n      if (fn(step.value, iterations++, this$1) === false) {\n        break;\n      }\n    }\n    return iterations;\n  };\n  zipSequence.__iteratorUncached = function(type, reverse) {\n    var iterators = iters.map(\n      function (i) { return ((i = Collection(i)), getIterator(reverse ? i.reverse() : i)); }\n    );\n    var iterations = 0;\n    var isDone = false;\n    return new Iterator(function () {\n      var steps;\n      if (!isDone) {\n        steps = iterators.map(function (i) { return i.next(); });\n        isDone = zipAll ? steps.every(function (s) { return s.done; }) : steps.some(function (s) { return s.done; });\n      }\n      if (isDone) {\n        return iteratorDone();\n      }\n      return iteratorValue(\n        type,\n        iterations++,\n        zipper.apply(null, steps.map(function (s) { return s.value; }))\n      );\n    });\n  };\n  return zipSequence;\n}\n\n// #pragma Helper Functions\n\nfunction reify(iter, seq) {\n  return iter === seq ? iter : isSeq(iter) ? seq : iter.constructor(seq);\n}\n\nfunction validateEntry(entry) {\n  if (entry !== Object(entry)) {\n    throw new TypeError('Expected [K, V] tuple: ' + entry);\n  }\n}\n\nfunction collectionClass(collection) {\n  return isKeyed(collection)\n    ? KeyedCollection\n    : isIndexed(collection) ? IndexedCollection : SetCollection;\n}\n\nfunction makeSequence(collection) {\n  return Object.create(\n    (isKeyed(collection)\n      ? KeyedSeq\n      : isIndexed(collection) ? IndexedSeq : SetSeq\n    ).prototype\n  );\n}\n\nfunction cacheResultThrough() {\n  if (this._iter.cacheResult) {\n    this._iter.cacheResult();\n    this.size = this._iter.size;\n    return this;\n  }\n  return Seq.prototype.cacheResult.call(this);\n}\n\nfunction defaultComparator(a, b) {\n  if (a === undefined && b === undefined) {\n    return 0;\n  }\n\n  if (a === undefined) {\n    return 1;\n  }\n\n  if (b === undefined) {\n    return -1;\n  }\n\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\n// http://jsperf.com/copy-array-inline\nfunction arrCopy(arr, offset) {\n  offset = offset || 0;\n  var len = Math.max(0, arr.length - offset);\n  var newArr = new Array(len);\n  for (var ii = 0; ii < len; ii++) {\n    newArr[ii] = arr[ii + offset];\n  }\n  return newArr;\n}\n\nfunction invariant(condition, error) {\n  if (!condition) { throw new Error(error); }\n}\n\nfunction assertNotInfinite(size) {\n  invariant(\n    size !== Infinity,\n    'Cannot perform this action with an infinite size.'\n  );\n}\n\nfunction coerceKeyPath(keyPath) {\n  if (isArrayLike(keyPath) && typeof keyPath !== 'string') {\n    return keyPath;\n  }\n  if (isOrdered(keyPath)) {\n    return keyPath.toArray();\n  }\n  throw new TypeError(\n    'Invalid keyPath: expected Ordered Collection or Array: ' + keyPath\n  );\n}\n\nfunction isPlainObj(value) {\n  return (\n    value && (value.constructor === Object || value.constructor === undefined)\n  );\n}\n\n/**\n * Returns true if the value is a potentially-persistent data structure, either\n * provided by Immutable.js or a plain Array or Object.\n */\nfunction isDataStructure(value) {\n  return isImmutable(value) || Array.isArray(value) || isPlainObj(value);\n}\n\n/**\n * Converts a value to a string, adding quotes if a string was provided.\n */\nfunction quoteString(value) {\n  try {\n    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n  } catch (_ignoreError) {\n    return JSON.stringify(value);\n  }\n}\n\nfunction has(collection, key) {\n  return isImmutable(collection)\n    ? collection.has(key)\n    : isDataStructure(collection) && hasOwnProperty.call(collection, key);\n}\n\nfunction get(collection, key, notSetValue) {\n  return isImmutable(collection)\n    ? collection.get(key, notSetValue)\n    : !has(collection, key)\n      ? notSetValue\n      : typeof collection.get === 'function'\n        ? collection.get(key)\n        : collection[key];\n}\n\nfunction shallowCopy(from) {\n  if (Array.isArray(from)) {\n    return arrCopy(from);\n  }\n  var to = {};\n  for (var key in from) {\n    if (hasOwnProperty.call(from, key)) {\n      to[key] = from[key];\n    }\n  }\n  return to;\n}\n\nfunction remove(collection, key) {\n  if (!isDataStructure(collection)) {\n    throw new TypeError(\n      'Cannot update non-data-structure value: ' + collection\n    );\n  }\n  if (isImmutable(collection)) {\n    if (!collection.remove) {\n      throw new TypeError(\n        'Cannot update immutable value without .remove() method: ' + collection\n      );\n    }\n    return collection.remove(key);\n  }\n  if (!hasOwnProperty.call(collection, key)) {\n    return collection;\n  }\n  var collectionCopy = shallowCopy(collection);\n  if (Array.isArray(collectionCopy)) {\n    collectionCopy.splice(key, 1);\n  } else {\n    delete collectionCopy[key];\n  }\n  return collectionCopy;\n}\n\nfunction set(collection, key, value) {\n  if (!isDataStructure(collection)) {\n    throw new TypeError(\n      'Cannot update non-data-structure value: ' + collection\n    );\n  }\n  if (isImmutable(collection)) {\n    if (!collection.set) {\n      throw new TypeError(\n        'Cannot update immutable value without .set() method: ' + collection\n      );\n    }\n    return collection.set(key, value);\n  }\n  if (hasOwnProperty.call(collection, key) && value === collection[key]) {\n    return collection;\n  }\n  var collectionCopy = shallowCopy(collection);\n  collectionCopy[key] = value;\n  return collectionCopy;\n}\n\nfunction updateIn(collection, keyPath, notSetValue, updater) {\n  if (!updater) {\n    updater = notSetValue;\n    notSetValue = undefined;\n  }\n  var updatedValue = updateInDeeply(\n    isImmutable(collection),\n    collection,\n    coerceKeyPath(keyPath),\n    0,\n    notSetValue,\n    updater\n  );\n  return updatedValue === NOT_SET ? notSetValue : updatedValue;\n}\n\nfunction updateInDeeply(\n  inImmutable,\n  existing,\n  keyPath,\n  i,\n  notSetValue,\n  updater\n) {\n  var wasNotSet = existing === NOT_SET;\n  if (i === keyPath.length) {\n    var existingValue = wasNotSet ? notSetValue : existing;\n    var newValue = updater(existingValue);\n    return newValue === existingValue ? existing : newValue;\n  }\n  if (!wasNotSet && !isDataStructure(existing)) {\n    throw new TypeError(\n      'Cannot update within non-data-structure value in path [' +\n        keyPath.slice(0, i).map(quoteString) +\n        ']: ' +\n        existing\n    );\n  }\n  var key = keyPath[i];\n  var nextExisting = wasNotSet ? NOT_SET : get(existing, key, NOT_SET);\n  var nextUpdated = updateInDeeply(\n    nextExisting === NOT_SET ? inImmutable : isImmutable(nextExisting),\n    nextExisting,\n    keyPath,\n    i + 1,\n    notSetValue,\n    updater\n  );\n  return nextUpdated === nextExisting\n    ? existing\n    : nextUpdated === NOT_SET\n      ? remove(existing, key)\n      : set(\n          wasNotSet ? (inImmutable ? emptyMap() : {}) : existing,\n          key,\n          nextUpdated\n        );\n}\n\nfunction setIn$1(collection, keyPath, value) {\n  return updateIn(collection, keyPath, NOT_SET, function () { return value; });\n}\n\nfunction setIn$$1(keyPath, v) {\n  return setIn$1(this, keyPath, v);\n}\n\nfunction removeIn(collection, keyPath) {\n  return updateIn(collection, keyPath, function () { return NOT_SET; });\n}\n\nfunction deleteIn(keyPath) {\n  return removeIn(this, keyPath);\n}\n\nfunction update$1(collection, key, notSetValue, updater) {\n  return updateIn(collection, [key], notSetValue, updater);\n}\n\nfunction update$$1(key, notSetValue, updater) {\n  return arguments.length === 1\n    ? key(this)\n    : update$1(this, key, notSetValue, updater);\n}\n\nfunction updateIn$1(keyPath, notSetValue, updater) {\n  return updateIn(this, keyPath, notSetValue, updater);\n}\n\nfunction merge() {\n  var iters = [], len = arguments.length;\n  while ( len-- ) iters[ len ] = arguments[ len ];\n\n  return mergeIntoKeyedWith(this, iters);\n}\n\nfunction mergeWith(merger) {\n  var iters = [], len = arguments.length - 1;\n  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n  return mergeIntoKeyedWith(this, iters, merger);\n}\n\nfunction mergeIntoKeyedWith(collection, collections, merger) {\n  var iters = [];\n  for (var ii = 0; ii < collections.length; ii++) {\n    var collection$1 = KeyedCollection(collections[ii]);\n    if (collection$1.size !== 0) {\n      iters.push(collection$1);\n    }\n  }\n  if (iters.length === 0) {\n    return collection;\n  }\n  if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n    return collection.constructor(iters[0]);\n  }\n  return collection.withMutations(function (collection) {\n    var mergeIntoCollection = merger\n      ? function (value, key) {\n          update$1(\n            collection,\n            key,\n            NOT_SET,\n            function (oldVal) { return (oldVal === NOT_SET ? value : merger(oldVal, value, key)); }\n          );\n        }\n      : function (value, key) {\n          collection.set(key, value);\n        };\n    for (var ii = 0; ii < iters.length; ii++) {\n      iters[ii].forEach(mergeIntoCollection);\n    }\n  });\n}\n\nfunction merge$1(collection) {\n  var sources = [], len = arguments.length - 1;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n  return mergeWithSources(collection, sources);\n}\n\nfunction mergeWith$1(merger, collection) {\n  var sources = [], len = arguments.length - 2;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 2 ];\n\n  return mergeWithSources(collection, sources, merger);\n}\n\nfunction mergeDeep$1(collection) {\n  var sources = [], len = arguments.length - 1;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n  return mergeDeepWithSources(collection, sources);\n}\n\nfunction mergeDeepWith$1(merger, collection) {\n  var sources = [], len = arguments.length - 2;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 2 ];\n\n  return mergeDeepWithSources(collection, sources, merger);\n}\n\nfunction mergeDeepWithSources(collection, sources, merger) {\n  return mergeWithSources(collection, sources, deepMergerWith(merger));\n}\n\nfunction mergeWithSources(collection, sources, merger) {\n  if (!isDataStructure(collection)) {\n    throw new TypeError(\n      'Cannot merge into non-data-structure value: ' + collection\n    );\n  }\n  if (isImmutable(collection)) {\n    return collection.mergeWith\n      ? collection.mergeWith.apply(collection, [ merger ].concat( sources ))\n      : collection.concat.apply(collection, sources);\n  }\n  var isArray = Array.isArray(collection);\n  var merged = collection;\n  var Collection$$1 = isArray ? IndexedCollection : KeyedCollection;\n  var mergeItem = isArray\n    ? function (value) {\n        // Copy on write\n        if (merged === collection) {\n          merged = shallowCopy(merged);\n        }\n        merged.push(value);\n      }\n    : function (value, key) {\n        var hasVal = hasOwnProperty.call(merged, key);\n        var nextVal =\n          hasVal && merger ? merger(merged[key], value, key) : value;\n        if (!hasVal || nextVal !== merged[key]) {\n          // Copy on write\n          if (merged === collection) {\n            merged = shallowCopy(merged);\n          }\n          merged[key] = nextVal;\n        }\n      };\n  for (var i = 0; i < sources.length; i++) {\n    Collection$$1(sources[i]).forEach(mergeItem);\n  }\n  return merged;\n}\n\nfunction deepMergerWith(merger) {\n  function deepMerger(oldValue, newValue, key) {\n    return isDataStructure(oldValue) && isDataStructure(newValue)\n      ? mergeWithSources(oldValue, [newValue], deepMerger)\n      : merger ? merger(oldValue, newValue, key) : newValue;\n  }\n  return deepMerger;\n}\n\nfunction mergeDeep() {\n  var iters = [], len = arguments.length;\n  while ( len-- ) iters[ len ] = arguments[ len ];\n\n  return mergeDeepWithSources(this, iters);\n}\n\nfunction mergeDeepWith(merger) {\n  var iters = [], len = arguments.length - 1;\n  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n  return mergeDeepWithSources(this, iters, merger);\n}\n\nfunction mergeIn(keyPath) {\n  var iters = [], len = arguments.length - 1;\n  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n  return updateIn(this, keyPath, emptyMap(), function (m) { return mergeWithSources(m, iters); });\n}\n\nfunction mergeDeepIn(keyPath) {\n  var iters = [], len = arguments.length - 1;\n  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n  return updateIn(this, keyPath, emptyMap(), function (m) { return mergeDeepWithSources(m, iters); }\n  );\n}\n\nfunction withMutations(fn) {\n  var mutable = this.asMutable();\n  fn(mutable);\n  return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n}\n\nfunction asMutable() {\n  return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n}\n\nfunction asImmutable() {\n  return this.__ensureOwner();\n}\n\nfunction wasAltered() {\n  return this.__altered;\n}\n\nvar Map = (function (KeyedCollection$$1) {\n  function Map(value) {\n    return value === null || value === undefined\n      ? emptyMap()\n      : isMap(value) && !isOrdered(value)\n        ? value\n        : emptyMap().withMutations(function (map) {\n            var iter = KeyedCollection$$1(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function (v, k) { return map.set(k, v); });\n          });\n  }\n\n  if ( KeyedCollection$$1 ) Map.__proto__ = KeyedCollection$$1;\n  Map.prototype = Object.create( KeyedCollection$$1 && KeyedCollection$$1.prototype );\n  Map.prototype.constructor = Map;\n\n  Map.of = function of () {\n    var keyValues = [], len = arguments.length;\n    while ( len-- ) keyValues[ len ] = arguments[ len ];\n\n    return emptyMap().withMutations(function (map) {\n      for (var i = 0; i < keyValues.length; i += 2) {\n        if (i + 1 >= keyValues.length) {\n          throw new Error('Missing value for key: ' + keyValues[i]);\n        }\n        map.set(keyValues[i], keyValues[i + 1]);\n      }\n    });\n  };\n\n  Map.prototype.toString = function toString () {\n    return this.__toString('Map {', '}');\n  };\n\n  // @pragma Access\n\n  Map.prototype.get = function get (k, notSetValue) {\n    return this._root\n      ? this._root.get(0, undefined, k, notSetValue)\n      : notSetValue;\n  };\n\n  // @pragma Modification\n\n  Map.prototype.set = function set (k, v) {\n    return updateMap(this, k, v);\n  };\n\n  Map.prototype.remove = function remove (k) {\n    return updateMap(this, k, NOT_SET);\n  };\n\n  Map.prototype.deleteAll = function deleteAll (keys) {\n    var collection = Collection(keys);\n\n    if (collection.size === 0) {\n      return this;\n    }\n\n    return this.withMutations(function (map) {\n      collection.forEach(function (key) { return map.remove(key); });\n    });\n  };\n\n  Map.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._root = null;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyMap();\n  };\n\n  // @pragma Composition\n\n  Map.prototype.sort = function sort (comparator) {\n    // Late binding\n    return OrderedMap(sortFactory(this, comparator));\n  };\n\n  Map.prototype.sortBy = function sortBy (mapper, comparator) {\n    // Late binding\n    return OrderedMap(sortFactory(this, comparator, mapper));\n  };\n\n  // @pragma Mutability\n\n  Map.prototype.__iterator = function __iterator (type, reverse) {\n    return new MapIterator(this, type, reverse);\n  };\n\n  Map.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var iterations = 0;\n    this._root &&\n      this._root.iterate(function (entry) {\n        iterations++;\n        return fn(entry[1], entry[0], this$1);\n      }, reverse);\n    return iterations;\n  };\n\n  Map.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyMap();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeMap(this.size, this._root, ownerID, this.__hash);\n  };\n\n  return Map;\n}(KeyedCollection));\n\nfunction isMap(maybeMap) {\n  return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n}\n\nMap.isMap = isMap;\n\nvar IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\nvar MapPrototype = Map.prototype;\nMapPrototype[IS_MAP_SENTINEL] = true;\nMapPrototype[DELETE] = MapPrototype.remove;\nMapPrototype.removeAll = MapPrototype.deleteAll;\nMapPrototype.concat = MapPrototype.merge;\nMapPrototype.setIn = setIn$$1;\nMapPrototype.removeIn = MapPrototype.deleteIn = deleteIn;\nMapPrototype.update = update$$1;\nMapPrototype.updateIn = updateIn$1;\nMapPrototype.merge = merge;\nMapPrototype.mergeWith = mergeWith;\nMapPrototype.mergeDeep = mergeDeep;\nMapPrototype.mergeDeepWith = mergeDeepWith;\nMapPrototype.mergeIn = mergeIn;\nMapPrototype.mergeDeepIn = mergeDeepIn;\nMapPrototype.withMutations = withMutations;\nMapPrototype.wasAltered = wasAltered;\nMapPrototype.asImmutable = asImmutable;\nMapPrototype['@@transducer/init'] = MapPrototype.asMutable = asMutable;\nMapPrototype['@@transducer/step'] = function(result, arr) {\n  return result.set(arr[0], arr[1]);\n};\nMapPrototype['@@transducer/result'] = function(obj) {\n  return obj.asImmutable();\n};\n\n// #pragma Trie Nodes\n\nvar ArrayMapNode = function ArrayMapNode(ownerID, entries) {\n  this.ownerID = ownerID;\n  this.entries = entries;\n};\n\nArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  var entries = this.entries;\n  for (var ii = 0, len = entries.length; ii < len; ii++) {\n    if (is(key, entries[ii][0])) {\n      return entries[ii][1];\n    }\n  }\n  return notSetValue;\n};\n\nArrayMapNode.prototype.update = function update$$1 (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  var removed = value === NOT_SET;\n\n  var entries = this.entries;\n  var idx = 0;\n  var len = entries.length;\n  for (; idx < len; idx++) {\n    if (is(key, entries[idx][0])) {\n      break;\n    }\n  }\n  var exists = idx < len;\n\n  if (exists ? entries[idx][1] === value : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n  (removed || !exists) && SetRef(didChangeSize);\n\n  if (removed && entries.length === 1) {\n    return; // undefined\n  }\n\n  if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n    return createNodes(ownerID, entries, key, value);\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newEntries = isEditable ? entries : arrCopy(entries);\n\n  if (exists) {\n    if (removed) {\n      idx === len - 1\n        ? newEntries.pop()\n        : (newEntries[idx] = newEntries.pop());\n    } else {\n      newEntries[idx] = [key, value];\n    }\n  } else {\n    newEntries.push([key, value]);\n  }\n\n  if (isEditable) {\n    this.entries = newEntries;\n    return this;\n  }\n\n  return new ArrayMapNode(ownerID, newEntries);\n};\n\nvar BitmapIndexedNode = function BitmapIndexedNode(ownerID, bitmap, nodes) {\n  this.ownerID = ownerID;\n  this.bitmap = bitmap;\n  this.nodes = nodes;\n};\n\nBitmapIndexedNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);\n  var bitmap = this.bitmap;\n  return (bitmap & bit) === 0\n    ? notSetValue\n    : this.nodes[popCount(bitmap & (bit - 1))].get(\n        shift + SHIFT,\n        keyHash,\n        key,\n        notSetValue\n      );\n};\n\nBitmapIndexedNode.prototype.update = function update$$1 (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var bit = 1 << keyHashFrag;\n  var bitmap = this.bitmap;\n  var exists = (bitmap & bit) !== 0;\n\n  if (!exists && value === NOT_SET) {\n    return this;\n  }\n\n  var idx = popCount(bitmap & (bit - 1));\n  var nodes = this.nodes;\n  var node = exists ? nodes[idx] : undefined;\n  var newNode = updateNode(\n    node,\n    ownerID,\n    shift + SHIFT,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n\n  if (newNode === node) {\n    return this;\n  }\n\n  if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n    return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n  }\n\n  if (\n    exists &&\n    !newNode &&\n    nodes.length === 2 &&\n    isLeafNode(nodes[idx ^ 1])\n  ) {\n    return nodes[idx ^ 1];\n  }\n\n  if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n    return newNode;\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newBitmap = exists ? (newNode ? bitmap : bitmap ^ bit) : bitmap | bit;\n  var newNodes = exists\n    ? newNode\n      ? setAt(nodes, idx, newNode, isEditable)\n      : spliceOut(nodes, idx, isEditable)\n    : spliceIn(nodes, idx, newNode, isEditable);\n\n  if (isEditable) {\n    this.bitmap = newBitmap;\n    this.nodes = newNodes;\n    return this;\n  }\n\n  return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n};\n\nvar HashArrayMapNode = function HashArrayMapNode(ownerID, count, nodes) {\n  this.ownerID = ownerID;\n  this.count = count;\n  this.nodes = nodes;\n};\n\nHashArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var node = this.nodes[idx];\n  return node\n    ? node.get(shift + SHIFT, keyHash, key, notSetValue)\n    : notSetValue;\n};\n\nHashArrayMapNode.prototype.update = function update$$1 (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var removed = value === NOT_SET;\n  var nodes = this.nodes;\n  var node = nodes[idx];\n\n  if (removed && !node) {\n    return this;\n  }\n\n  var newNode = updateNode(\n    node,\n    ownerID,\n    shift + SHIFT,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n  if (newNode === node) {\n    return this;\n  }\n\n  var newCount = this.count;\n  if (!node) {\n    newCount++;\n  } else if (!newNode) {\n    newCount--;\n    if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n      return packNodes(ownerID, nodes, newCount, idx);\n    }\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newNodes = setAt(nodes, idx, newNode, isEditable);\n\n  if (isEditable) {\n    this.count = newCount;\n    this.nodes = newNodes;\n    return this;\n  }\n\n  return new HashArrayMapNode(ownerID, newCount, newNodes);\n};\n\nvar HashCollisionNode = function HashCollisionNode(ownerID, keyHash, entries) {\n  this.ownerID = ownerID;\n  this.keyHash = keyHash;\n  this.entries = entries;\n};\n\nHashCollisionNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  var entries = this.entries;\n  for (var ii = 0, len = entries.length; ii < len; ii++) {\n    if (is(key, entries[ii][0])) {\n      return entries[ii][1];\n    }\n  }\n  return notSetValue;\n};\n\nHashCollisionNode.prototype.update = function update$$1 (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n\n  var removed = value === NOT_SET;\n\n  if (keyHash !== this.keyHash) {\n    if (removed) {\n      return this;\n    }\n    SetRef(didAlter);\n    SetRef(didChangeSize);\n    return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n  }\n\n  var entries = this.entries;\n  var idx = 0;\n  var len = entries.length;\n  for (; idx < len; idx++) {\n    if (is(key, entries[idx][0])) {\n      break;\n    }\n  }\n  var exists = idx < len;\n\n  if (exists ? entries[idx][1] === value : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n  (removed || !exists) && SetRef(didChangeSize);\n\n  if (removed && len === 2) {\n    return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newEntries = isEditable ? entries : arrCopy(entries);\n\n  if (exists) {\n    if (removed) {\n      idx === len - 1\n        ? newEntries.pop()\n        : (newEntries[idx] = newEntries.pop());\n    } else {\n      newEntries[idx] = [key, value];\n    }\n  } else {\n    newEntries.push([key, value]);\n  }\n\n  if (isEditable) {\n    this.entries = newEntries;\n    return this;\n  }\n\n  return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n};\n\nvar ValueNode = function ValueNode(ownerID, keyHash, entry) {\n  this.ownerID = ownerID;\n  this.keyHash = keyHash;\n  this.entry = entry;\n};\n\nValueNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n};\n\nValueNode.prototype.update = function update$$1 (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  var removed = value === NOT_SET;\n  var keyMatch = is(key, this.entry[0]);\n  if (keyMatch ? value === this.entry[1] : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n\n  if (removed) {\n    SetRef(didChangeSize);\n    return; // undefined\n  }\n\n  if (keyMatch) {\n    if (ownerID && ownerID === this.ownerID) {\n      this.entry[1] = value;\n      return this;\n    }\n    return new ValueNode(ownerID, this.keyHash, [key, value]);\n  }\n\n  SetRef(didChangeSize);\n  return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n};\n\n// #pragma Iterators\n\nArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function(\n  fn,\n  reverse\n) {\n  var entries = this.entries;\n  for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n    if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n      return false;\n    }\n  }\n};\n\nBitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function(\n  fn,\n  reverse\n) {\n  var nodes = this.nodes;\n  for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n    var node = nodes[reverse ? maxIndex - ii : ii];\n    if (node && node.iterate(fn, reverse) === false) {\n      return false;\n    }\n  }\n};\n\n// eslint-disable-next-line no-unused-vars\nValueNode.prototype.iterate = function(fn, reverse) {\n  return fn(this.entry);\n};\n\nvar MapIterator = (function (Iterator$$1) {\n  function MapIterator(map, type, reverse) {\n    this._type = type;\n    this._reverse = reverse;\n    this._stack = map._root && mapIteratorFrame(map._root);\n  }\n\n  if ( Iterator$$1 ) MapIterator.__proto__ = Iterator$$1;\n  MapIterator.prototype = Object.create( Iterator$$1 && Iterator$$1.prototype );\n  MapIterator.prototype.constructor = MapIterator;\n\n  MapIterator.prototype.next = function next () {\n    var this$1 = this;\n\n    var type = this._type;\n    var stack = this._stack;\n    while (stack) {\n      var node = stack.node;\n      var index = stack.index++;\n      var maxIndex = (void 0);\n      if (node.entry) {\n        if (index === 0) {\n          return mapIteratorValue(type, node.entry);\n        }\n      } else if (node.entries) {\n        maxIndex = node.entries.length - 1;\n        if (index <= maxIndex) {\n          return mapIteratorValue(\n            type,\n            node.entries[this$1._reverse ? maxIndex - index : index]\n          );\n        }\n      } else {\n        maxIndex = node.nodes.length - 1;\n        if (index <= maxIndex) {\n          var subNode = node.nodes[this$1._reverse ? maxIndex - index : index];\n          if (subNode) {\n            if (subNode.entry) {\n              return mapIteratorValue(type, subNode.entry);\n            }\n            stack = this$1._stack = mapIteratorFrame(subNode, stack);\n          }\n          continue;\n        }\n      }\n      stack = this$1._stack = this$1._stack.__prev;\n    }\n    return iteratorDone();\n  };\n\n  return MapIterator;\n}(Iterator));\n\nfunction mapIteratorValue(type, entry) {\n  return iteratorValue(type, entry[0], entry[1]);\n}\n\nfunction mapIteratorFrame(node, prev) {\n  return {\n    node: node,\n    index: 0,\n    __prev: prev\n  };\n}\n\nfunction makeMap(size, root, ownerID, hash$$1) {\n  var map = Object.create(MapPrototype);\n  map.size = size;\n  map._root = root;\n  map.__ownerID = ownerID;\n  map.__hash = hash$$1;\n  map.__altered = false;\n  return map;\n}\n\nvar EMPTY_MAP;\nfunction emptyMap() {\n  return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n}\n\nfunction updateMap(map, k, v) {\n  var newRoot;\n  var newSize;\n  if (!map._root) {\n    if (v === NOT_SET) {\n      return map;\n    }\n    newSize = 1;\n    newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n  } else {\n    var didChangeSize = MakeRef(CHANGE_LENGTH);\n    var didAlter = MakeRef(DID_ALTER);\n    newRoot = updateNode(\n      map._root,\n      map.__ownerID,\n      0,\n      undefined,\n      k,\n      v,\n      didChangeSize,\n      didAlter\n    );\n    if (!didAlter.value) {\n      return map;\n    }\n    newSize = map.size + (didChangeSize.value ? (v === NOT_SET ? -1 : 1) : 0);\n  }\n  if (map.__ownerID) {\n    map.size = newSize;\n    map._root = newRoot;\n    map.__hash = undefined;\n    map.__altered = true;\n    return map;\n  }\n  return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n}\n\nfunction updateNode(\n  node,\n  ownerID,\n  shift,\n  keyHash,\n  key,\n  value,\n  didChangeSize,\n  didAlter\n) {\n  if (!node) {\n    if (value === NOT_SET) {\n      return node;\n    }\n    SetRef(didAlter);\n    SetRef(didChangeSize);\n    return new ValueNode(ownerID, keyHash, [key, value]);\n  }\n  return node.update(\n    ownerID,\n    shift,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n}\n\nfunction isLeafNode(node) {\n  return (\n    node.constructor === ValueNode || node.constructor === HashCollisionNode\n  );\n}\n\nfunction mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n  if (node.keyHash === keyHash) {\n    return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n  }\n\n  var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n  var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n  var newNode;\n  var nodes =\n    idx1 === idx2\n      ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)]\n      : ((newNode = new ValueNode(ownerID, keyHash, entry)),\n        idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n  return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n}\n\nfunction createNodes(ownerID, entries, key, value) {\n  if (!ownerID) {\n    ownerID = new OwnerID();\n  }\n  var node = new ValueNode(ownerID, hash(key), [key, value]);\n  for (var ii = 0; ii < entries.length; ii++) {\n    var entry = entries[ii];\n    node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n  }\n  return node;\n}\n\nfunction packNodes(ownerID, nodes, count, excluding) {\n  var bitmap = 0;\n  var packedII = 0;\n  var packedNodes = new Array(count);\n  for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n    var node = nodes[ii];\n    if (node !== undefined && ii !== excluding) {\n      bitmap |= bit;\n      packedNodes[packedII++] = node;\n    }\n  }\n  return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n}\n\nfunction expandNodes(ownerID, nodes, bitmap, including, node) {\n  var count = 0;\n  var expandedNodes = new Array(SIZE);\n  for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n    expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n  }\n  expandedNodes[including] = node;\n  return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n}\n\nfunction popCount(x) {\n  x -= (x >> 1) & 0x55555555;\n  x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n  x = (x + (x >> 4)) & 0x0f0f0f0f;\n  x += x >> 8;\n  x += x >> 16;\n  return x & 0x7f;\n}\n\nfunction setAt(array, idx, val, canEdit) {\n  var newArray = canEdit ? array : arrCopy(array);\n  newArray[idx] = val;\n  return newArray;\n}\n\nfunction spliceIn(array, idx, val, canEdit) {\n  var newLen = array.length + 1;\n  if (canEdit && idx + 1 === newLen) {\n    array[idx] = val;\n    return array;\n  }\n  var newArray = new Array(newLen);\n  var after = 0;\n  for (var ii = 0; ii < newLen; ii++) {\n    if (ii === idx) {\n      newArray[ii] = val;\n      after = -1;\n    } else {\n      newArray[ii] = array[ii + after];\n    }\n  }\n  return newArray;\n}\n\nfunction spliceOut(array, idx, canEdit) {\n  var newLen = array.length - 1;\n  if (canEdit && idx === newLen) {\n    array.pop();\n    return array;\n  }\n  var newArray = new Array(newLen);\n  var after = 0;\n  for (var ii = 0; ii < newLen; ii++) {\n    if (ii === idx) {\n      after = 1;\n    }\n    newArray[ii] = array[ii + after];\n  }\n  return newArray;\n}\n\nvar MAX_ARRAY_MAP_SIZE = SIZE / 4;\nvar MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\nvar MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\nvar List = (function (IndexedCollection$$1) {\n  function List(value) {\n    var empty = emptyList();\n    if (value === null || value === undefined) {\n      return empty;\n    }\n    if (isList(value)) {\n      return value;\n    }\n    var iter = IndexedCollection$$1(value);\n    var size = iter.size;\n    if (size === 0) {\n      return empty;\n    }\n    assertNotInfinite(size);\n    if (size > 0 && size < SIZE) {\n      return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n    }\n    return empty.withMutations(function (list) {\n      list.setSize(size);\n      iter.forEach(function (v, i) { return list.set(i, v); });\n    });\n  }\n\n  if ( IndexedCollection$$1 ) List.__proto__ = IndexedCollection$$1;\n  List.prototype = Object.create( IndexedCollection$$1 && IndexedCollection$$1.prototype );\n  List.prototype.constructor = List;\n\n  List.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  List.prototype.toString = function toString () {\n    return this.__toString('List [', ']');\n  };\n\n  // @pragma Access\n\n  List.prototype.get = function get (index, notSetValue) {\n    index = wrapIndex(this, index);\n    if (index >= 0 && index < this.size) {\n      index += this._origin;\n      var node = listNodeFor(this, index);\n      return node && node.array[index & MASK];\n    }\n    return notSetValue;\n  };\n\n  // @pragma Modification\n\n  List.prototype.set = function set (index, value) {\n    return updateList(this, index, value);\n  };\n\n  List.prototype.remove = function remove (index) {\n    return !this.has(index)\n      ? this\n      : index === 0\n        ? this.shift()\n        : index === this.size - 1 ? this.pop() : this.splice(index, 1);\n  };\n\n  List.prototype.insert = function insert (index, value) {\n    return this.splice(index, 0, value);\n  };\n\n  List.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = this._origin = this._capacity = 0;\n      this._level = SHIFT;\n      this._root = this._tail = null;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyList();\n  };\n\n  List.prototype.push = function push (/*...values*/) {\n    var values = arguments;\n    var oldSize = this.size;\n    return this.withMutations(function (list) {\n      setListBounds(list, 0, oldSize + values.length);\n      for (var ii = 0; ii < values.length; ii++) {\n        list.set(oldSize + ii, values[ii]);\n      }\n    });\n  };\n\n  List.prototype.pop = function pop () {\n    return setListBounds(this, 0, -1);\n  };\n\n  List.prototype.unshift = function unshift (/*...values*/) {\n    var values = arguments;\n    return this.withMutations(function (list) {\n      setListBounds(list, -values.length);\n      for (var ii = 0; ii < values.length; ii++) {\n        list.set(ii, values[ii]);\n      }\n    });\n  };\n\n  List.prototype.shift = function shift () {\n    return setListBounds(this, 1);\n  };\n\n  // @pragma Composition\n\n  List.prototype.concat = function concat (/*...collections*/) {\n    var arguments$1 = arguments;\n\n    var seqs = [];\n    for (var i = 0; i < arguments.length; i++) {\n      var argument = arguments$1[i];\n      var seq = IndexedCollection$$1(\n        typeof argument !== 'string' && hasIterator(argument)\n          ? argument\n          : [argument]\n      );\n      if (seq.size !== 0) {\n        seqs.push(seq);\n      }\n    }\n    if (seqs.length === 0) {\n      return this;\n    }\n    if (this.size === 0 && !this.__ownerID && seqs.length === 1) {\n      return this.constructor(seqs[0]);\n    }\n    return this.withMutations(function (list) {\n      seqs.forEach(function (seq) { return seq.forEach(function (value) { return list.push(value); }); });\n    });\n  };\n\n  List.prototype.setSize = function setSize (size) {\n    return setListBounds(this, 0, size);\n  };\n\n  // @pragma Iteration\n\n  List.prototype.slice = function slice (begin, end) {\n    var size = this.size;\n    if (wholeSlice(begin, end, size)) {\n      return this;\n    }\n    return setListBounds(\n      this,\n      resolveBegin(begin, size),\n      resolveEnd(end, size)\n    );\n  };\n\n  List.prototype.__iterator = function __iterator (type, reverse) {\n    var index = reverse ? this.size : 0;\n    var values = iterateList(this, reverse);\n    return new Iterator(function () {\n      var value = values();\n      return value === DONE\n        ? iteratorDone()\n        : iteratorValue(type, reverse ? --index : index++, value);\n    });\n  };\n\n  List.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var index = reverse ? this.size : 0;\n    var values = iterateList(this, reverse);\n    var value;\n    while ((value = values()) !== DONE) {\n      if (fn(value, reverse ? --index : index++, this$1) === false) {\n        break;\n      }\n    }\n    return index;\n  };\n\n  List.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyList();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeList(\n      this._origin,\n      this._capacity,\n      this._level,\n      this._root,\n      this._tail,\n      ownerID,\n      this.__hash\n    );\n  };\n\n  return List;\n}(IndexedCollection));\n\nfunction isList(maybeList) {\n  return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n}\n\nList.isList = isList;\n\nvar IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\nvar ListPrototype = List.prototype;\nListPrototype[IS_LIST_SENTINEL] = true;\nListPrototype[DELETE] = ListPrototype.remove;\nListPrototype.merge = ListPrototype.concat;\nListPrototype.setIn = setIn$$1;\nListPrototype.deleteIn = ListPrototype.removeIn = deleteIn;\nListPrototype.update = update$$1;\nListPrototype.updateIn = updateIn$1;\nListPrototype.mergeIn = mergeIn;\nListPrototype.mergeDeepIn = mergeDeepIn;\nListPrototype.withMutations = withMutations;\nListPrototype.wasAltered = wasAltered;\nListPrototype.asImmutable = asImmutable;\nListPrototype['@@transducer/init'] = ListPrototype.asMutable = asMutable;\nListPrototype['@@transducer/step'] = function(result, arr) {\n  return result.push(arr);\n};\nListPrototype['@@transducer/result'] = function(obj) {\n  return obj.asImmutable();\n};\n\nvar VNode = function VNode(array, ownerID) {\n  this.array = array;\n  this.ownerID = ownerID;\n};\n\n// TODO: seems like these methods are very similar\n\nVNode.prototype.removeBefore = function removeBefore (ownerID, level, index) {\n  if (index === level ? 1 << level : 0 || this.array.length === 0) {\n    return this;\n  }\n  var originIndex = (index >>> level) & MASK;\n  if (originIndex >= this.array.length) {\n    return new VNode([], ownerID);\n  }\n  var removingFirst = originIndex === 0;\n  var newChild;\n  if (level > 0) {\n    var oldChild = this.array[originIndex];\n    newChild =\n      oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n    if (newChild === oldChild && removingFirst) {\n      return this;\n    }\n  }\n  if (removingFirst && !newChild) {\n    return this;\n  }\n  var editable = editableVNode(this, ownerID);\n  if (!removingFirst) {\n    for (var ii = 0; ii < originIndex; ii++) {\n      editable.array[ii] = undefined;\n    }\n  }\n  if (newChild) {\n    editable.array[originIndex] = newChild;\n  }\n  return editable;\n};\n\nVNode.prototype.removeAfter = function removeAfter (ownerID, level, index) {\n  if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n    return this;\n  }\n  var sizeIndex = ((index - 1) >>> level) & MASK;\n  if (sizeIndex >= this.array.length) {\n    return this;\n  }\n\n  var newChild;\n  if (level > 0) {\n    var oldChild = this.array[sizeIndex];\n    newChild =\n      oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n    if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n      return this;\n    }\n  }\n\n  var editable = editableVNode(this, ownerID);\n  editable.array.splice(sizeIndex + 1);\n  if (newChild) {\n    editable.array[sizeIndex] = newChild;\n  }\n  return editable;\n};\n\nvar DONE = {};\n\nfunction iterateList(list, reverse) {\n  var left = list._origin;\n  var right = list._capacity;\n  var tailPos = getTailOffset(right);\n  var tail = list._tail;\n\n  return iterateNodeOrLeaf(list._root, list._level, 0);\n\n  function iterateNodeOrLeaf(node, level, offset) {\n    return level === 0\n      ? iterateLeaf(node, offset)\n      : iterateNode(node, level, offset);\n  }\n\n  function iterateLeaf(node, offset) {\n    var array = offset === tailPos ? tail && tail.array : node && node.array;\n    var from = offset > left ? 0 : left - offset;\n    var to = right - offset;\n    if (to > SIZE) {\n      to = SIZE;\n    }\n    return function () {\n      if (from === to) {\n        return DONE;\n      }\n      var idx = reverse ? --to : from++;\n      return array && array[idx];\n    };\n  }\n\n  function iterateNode(node, level, offset) {\n    var values;\n    var array = node && node.array;\n    var from = offset > left ? 0 : (left - offset) >> level;\n    var to = ((right - offset) >> level) + 1;\n    if (to > SIZE) {\n      to = SIZE;\n    }\n    return function () {\n      while (true) {\n        if (values) {\n          var value = values();\n          if (value !== DONE) {\n            return value;\n          }\n          values = null;\n        }\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        values = iterateNodeOrLeaf(\n          array && array[idx],\n          level - SHIFT,\n          offset + (idx << level)\n        );\n      }\n    };\n  }\n}\n\nfunction makeList(origin, capacity, level, root, tail, ownerID, hash) {\n  var list = Object.create(ListPrototype);\n  list.size = capacity - origin;\n  list._origin = origin;\n  list._capacity = capacity;\n  list._level = level;\n  list._root = root;\n  list._tail = tail;\n  list.__ownerID = ownerID;\n  list.__hash = hash;\n  list.__altered = false;\n  return list;\n}\n\nvar EMPTY_LIST;\nfunction emptyList() {\n  return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n}\n\nfunction updateList(list, index, value) {\n  index = wrapIndex(list, index);\n\n  if (index !== index) {\n    return list;\n  }\n\n  if (index >= list.size || index < 0) {\n    return list.withMutations(function (list) {\n      index < 0\n        ? setListBounds(list, index).set(0, value)\n        : setListBounds(list, 0, index + 1).set(index, value);\n    });\n  }\n\n  index += list._origin;\n\n  var newTail = list._tail;\n  var newRoot = list._root;\n  var didAlter = MakeRef(DID_ALTER);\n  if (index >= getTailOffset(list._capacity)) {\n    newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n  } else {\n    newRoot = updateVNode(\n      newRoot,\n      list.__ownerID,\n      list._level,\n      index,\n      value,\n      didAlter\n    );\n  }\n\n  if (!didAlter.value) {\n    return list;\n  }\n\n  if (list.__ownerID) {\n    list._root = newRoot;\n    list._tail = newTail;\n    list.__hash = undefined;\n    list.__altered = true;\n    return list;\n  }\n  return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n}\n\nfunction updateVNode(node, ownerID, level, index, value, didAlter) {\n  var idx = (index >>> level) & MASK;\n  var nodeHas = node && idx < node.array.length;\n  if (!nodeHas && value === undefined) {\n    return node;\n  }\n\n  var newNode;\n\n  if (level > 0) {\n    var lowerNode = node && node.array[idx];\n    var newLowerNode = updateVNode(\n      lowerNode,\n      ownerID,\n      level - SHIFT,\n      index,\n      value,\n      didAlter\n    );\n    if (newLowerNode === lowerNode) {\n      return node;\n    }\n    newNode = editableVNode(node, ownerID);\n    newNode.array[idx] = newLowerNode;\n    return newNode;\n  }\n\n  if (nodeHas && node.array[idx] === value) {\n    return node;\n  }\n\n  SetRef(didAlter);\n\n  newNode = editableVNode(node, ownerID);\n  if (value === undefined && idx === newNode.array.length - 1) {\n    newNode.array.pop();\n  } else {\n    newNode.array[idx] = value;\n  }\n  return newNode;\n}\n\nfunction editableVNode(node, ownerID) {\n  if (ownerID && node && ownerID === node.ownerID) {\n    return node;\n  }\n  return new VNode(node ? node.array.slice() : [], ownerID);\n}\n\nfunction listNodeFor(list, rawIndex) {\n  if (rawIndex >= getTailOffset(list._capacity)) {\n    return list._tail;\n  }\n  if (rawIndex < 1 << (list._level + SHIFT)) {\n    var node = list._root;\n    var level = list._level;\n    while (node && level > 0) {\n      node = node.array[(rawIndex >>> level) & MASK];\n      level -= SHIFT;\n    }\n    return node;\n  }\n}\n\nfunction setListBounds(list, begin, end) {\n  // Sanitize begin & end using this shorthand for ToInt32(argument)\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n  if (begin !== undefined) {\n    begin |= 0;\n  }\n  if (end !== undefined) {\n    end |= 0;\n  }\n  var owner = list.__ownerID || new OwnerID();\n  var oldOrigin = list._origin;\n  var oldCapacity = list._capacity;\n  var newOrigin = oldOrigin + begin;\n  var newCapacity =\n    end === undefined\n      ? oldCapacity\n      : end < 0 ? oldCapacity + end : oldOrigin + end;\n  if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n    return list;\n  }\n\n  // If it's going to end after it starts, it's empty.\n  if (newOrigin >= newCapacity) {\n    return list.clear();\n  }\n\n  var newLevel = list._level;\n  var newRoot = list._root;\n\n  // New origin might need creating a higher root.\n  var offsetShift = 0;\n  while (newOrigin + offsetShift < 0) {\n    newRoot = new VNode(\n      newRoot && newRoot.array.length ? [undefined, newRoot] : [],\n      owner\n    );\n    newLevel += SHIFT;\n    offsetShift += 1 << newLevel;\n  }\n  if (offsetShift) {\n    newOrigin += offsetShift;\n    oldOrigin += offsetShift;\n    newCapacity += offsetShift;\n    oldCapacity += offsetShift;\n  }\n\n  var oldTailOffset = getTailOffset(oldCapacity);\n  var newTailOffset = getTailOffset(newCapacity);\n\n  // New size might need creating a higher root.\n  while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n    newRoot = new VNode(\n      newRoot && newRoot.array.length ? [newRoot] : [],\n      owner\n    );\n    newLevel += SHIFT;\n  }\n\n  // Locate or create the new tail.\n  var oldTail = list._tail;\n  var newTail =\n    newTailOffset < oldTailOffset\n      ? listNodeFor(list, newCapacity - 1)\n      : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\n  // Merge Tail into tree.\n  if (\n    oldTail &&\n    newTailOffset > oldTailOffset &&\n    newOrigin < oldCapacity &&\n    oldTail.array.length\n  ) {\n    newRoot = editableVNode(newRoot, owner);\n    var node = newRoot;\n    for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n      var idx = (oldTailOffset >>> level) & MASK;\n      node = node.array[idx] = editableVNode(node.array[idx], owner);\n    }\n    node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n  }\n\n  // If the size has been reduced, there's a chance the tail needs to be trimmed.\n  if (newCapacity < oldCapacity) {\n    newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n  }\n\n  // If the new origin is within the tail, then we do not need a root.\n  if (newOrigin >= newTailOffset) {\n    newOrigin -= newTailOffset;\n    newCapacity -= newTailOffset;\n    newLevel = SHIFT;\n    newRoot = null;\n    newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n  } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n    offsetShift = 0;\n\n    // Identify the new top root node of the subtree of the old root.\n    while (newRoot) {\n      var beginIndex = (newOrigin >>> newLevel) & MASK;\n      if ((beginIndex !== newTailOffset >>> newLevel) & MASK) {\n        break;\n      }\n      if (beginIndex) {\n        offsetShift += (1 << newLevel) * beginIndex;\n      }\n      newLevel -= SHIFT;\n      newRoot = newRoot.array[beginIndex];\n    }\n\n    // Trim the new sides of the new root.\n    if (newRoot && newOrigin > oldOrigin) {\n      newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n    }\n    if (newRoot && newTailOffset < oldTailOffset) {\n      newRoot = newRoot.removeAfter(\n        owner,\n        newLevel,\n        newTailOffset - offsetShift\n      );\n    }\n    if (offsetShift) {\n      newOrigin -= offsetShift;\n      newCapacity -= offsetShift;\n    }\n  }\n\n  if (list.__ownerID) {\n    list.size = newCapacity - newOrigin;\n    list._origin = newOrigin;\n    list._capacity = newCapacity;\n    list._level = newLevel;\n    list._root = newRoot;\n    list._tail = newTail;\n    list.__hash = undefined;\n    list.__altered = true;\n    return list;\n  }\n  return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n}\n\nfunction getTailOffset(size) {\n  return size < SIZE ? 0 : ((size - 1) >>> SHIFT) << SHIFT;\n}\n\nvar OrderedMap = (function (Map$$1) {\n  function OrderedMap(value) {\n    return value === null || value === undefined\n      ? emptyOrderedMap()\n      : isOrderedMap(value)\n        ? value\n        : emptyOrderedMap().withMutations(function (map) {\n            var iter = KeyedCollection(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function (v, k) { return map.set(k, v); });\n          });\n  }\n\n  if ( Map$$1 ) OrderedMap.__proto__ = Map$$1;\n  OrderedMap.prototype = Object.create( Map$$1 && Map$$1.prototype );\n  OrderedMap.prototype.constructor = OrderedMap;\n\n  OrderedMap.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  OrderedMap.prototype.toString = function toString () {\n    return this.__toString('OrderedMap {', '}');\n  };\n\n  // @pragma Access\n\n  OrderedMap.prototype.get = function get (k, notSetValue) {\n    var index = this._map.get(k);\n    return index !== undefined ? this._list.get(index)[1] : notSetValue;\n  };\n\n  // @pragma Modification\n\n  OrderedMap.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._map.clear();\n      this._list.clear();\n      return this;\n    }\n    return emptyOrderedMap();\n  };\n\n  OrderedMap.prototype.set = function set (k, v) {\n    return updateOrderedMap(this, k, v);\n  };\n\n  OrderedMap.prototype.remove = function remove (k) {\n    return updateOrderedMap(this, k, NOT_SET);\n  };\n\n  OrderedMap.prototype.wasAltered = function wasAltered () {\n    return this._map.wasAltered() || this._list.wasAltered();\n  };\n\n  OrderedMap.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    return this._list.__iterate(\n      function (entry) { return entry && fn(entry[1], entry[0], this$1); },\n      reverse\n    );\n  };\n\n  OrderedMap.prototype.__iterator = function __iterator (type, reverse) {\n    return this._list.fromEntrySeq().__iterator(type, reverse);\n  };\n\n  OrderedMap.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    var newMap = this._map.__ensureOwner(ownerID);\n    var newList = this._list.__ensureOwner(ownerID);\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyOrderedMap();\n      }\n      this.__ownerID = ownerID;\n      this._map = newMap;\n      this._list = newList;\n      return this;\n    }\n    return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n  };\n\n  return OrderedMap;\n}(Map));\n\nfunction isOrderedMap(maybeOrderedMap) {\n  return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n}\n\nOrderedMap.isOrderedMap = isOrderedMap;\n\nOrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\nOrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\nfunction makeOrderedMap(map, list, ownerID, hash) {\n  var omap = Object.create(OrderedMap.prototype);\n  omap.size = map ? map.size : 0;\n  omap._map = map;\n  omap._list = list;\n  omap.__ownerID = ownerID;\n  omap.__hash = hash;\n  return omap;\n}\n\nvar EMPTY_ORDERED_MAP;\nfunction emptyOrderedMap() {\n  return (\n    EMPTY_ORDERED_MAP ||\n    (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()))\n  );\n}\n\nfunction updateOrderedMap(omap, k, v) {\n  var map = omap._map;\n  var list = omap._list;\n  var i = map.get(k);\n  var has = i !== undefined;\n  var newMap;\n  var newList;\n  if (v === NOT_SET) {\n    // removed\n    if (!has) {\n      return omap;\n    }\n    if (list.size >= SIZE && list.size >= map.size * 2) {\n      newList = list.filter(function (entry, idx) { return entry !== undefined && i !== idx; });\n      newMap = newList\n        .toKeyedSeq()\n        .map(function (entry) { return entry[0]; })\n        .flip()\n        .toMap();\n      if (omap.__ownerID) {\n        newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n      }\n    } else {\n      newMap = map.remove(k);\n      newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n    }\n  } else if (has) {\n    if (v === list.get(i)[1]) {\n      return omap;\n    }\n    newMap = map;\n    newList = list.set(i, [k, v]);\n  } else {\n    newMap = map.set(k, list.size);\n    newList = list.set(list.size, [k, v]);\n  }\n  if (omap.__ownerID) {\n    omap.size = newMap.size;\n    omap._map = newMap;\n    omap._list = newList;\n    omap.__hash = undefined;\n    return omap;\n  }\n  return makeOrderedMap(newMap, newList);\n}\n\nvar Stack = (function (IndexedCollection$$1) {\n  function Stack(value) {\n    return value === null || value === undefined\n      ? emptyStack()\n      : isStack(value) ? value : emptyStack().pushAll(value);\n  }\n\n  if ( IndexedCollection$$1 ) Stack.__proto__ = IndexedCollection$$1;\n  Stack.prototype = Object.create( IndexedCollection$$1 && IndexedCollection$$1.prototype );\n  Stack.prototype.constructor = Stack;\n\n  Stack.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  Stack.prototype.toString = function toString () {\n    return this.__toString('Stack [', ']');\n  };\n\n  // @pragma Access\n\n  Stack.prototype.get = function get (index, notSetValue) {\n    var head = this._head;\n    index = wrapIndex(this, index);\n    while (head && index--) {\n      head = head.next;\n    }\n    return head ? head.value : notSetValue;\n  };\n\n  Stack.prototype.peek = function peek () {\n    return this._head && this._head.value;\n  };\n\n  // @pragma Modification\n\n  Stack.prototype.push = function push (/*...values*/) {\n    var arguments$1 = arguments;\n\n    if (arguments.length === 0) {\n      return this;\n    }\n    var newSize = this.size + arguments.length;\n    var head = this._head;\n    for (var ii = arguments.length - 1; ii >= 0; ii--) {\n      head = {\n        value: arguments$1[ii],\n        next: head\n      };\n    }\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  Stack.prototype.pushAll = function pushAll (iter) {\n    iter = IndexedCollection$$1(iter);\n    if (iter.size === 0) {\n      return this;\n    }\n    if (this.size === 0 && isStack(iter)) {\n      return iter;\n    }\n    assertNotInfinite(iter.size);\n    var newSize = this.size;\n    var head = this._head;\n    iter.__iterate(function (value) {\n      newSize++;\n      head = {\n        value: value,\n        next: head\n      };\n    }, /* reverse */ true);\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  Stack.prototype.pop = function pop () {\n    return this.slice(1);\n  };\n\n  Stack.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._head = undefined;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyStack();\n  };\n\n  Stack.prototype.slice = function slice (begin, end) {\n    if (wholeSlice(begin, end, this.size)) {\n      return this;\n    }\n    var resolvedBegin = resolveBegin(begin, this.size);\n    var resolvedEnd = resolveEnd(end, this.size);\n    if (resolvedEnd !== this.size) {\n      // super.slice(begin, end);\n      return IndexedCollection$$1.prototype.slice.call(this, begin, end);\n    }\n    var newSize = this.size - resolvedBegin;\n    var head = this._head;\n    while (resolvedBegin--) {\n      head = head.next;\n    }\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  // @pragma Mutability\n\n  Stack.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyStack();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeStack(this.size, this._head, ownerID, this.__hash);\n  };\n\n  // @pragma Iteration\n\n  Stack.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return new ArraySeq(this.toArray()).__iterate(\n        function (v, k) { return fn(v, k, this$1); },\n        reverse\n      );\n    }\n    var iterations = 0;\n    var node = this._head;\n    while (node) {\n      if (fn(node.value, iterations++, this$1) === false) {\n        break;\n      }\n      node = node.next;\n    }\n    return iterations;\n  };\n\n  Stack.prototype.__iterator = function __iterator (type, reverse) {\n    if (reverse) {\n      return new ArraySeq(this.toArray()).__iterator(type, reverse);\n    }\n    var iterations = 0;\n    var node = this._head;\n    return new Iterator(function () {\n      if (node) {\n        var value = node.value;\n        node = node.next;\n        return iteratorValue(type, iterations++, value);\n      }\n      return iteratorDone();\n    });\n  };\n\n  return Stack;\n}(IndexedCollection));\n\nfunction isStack(maybeStack) {\n  return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n}\n\nStack.isStack = isStack;\n\nvar IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\nvar StackPrototype = Stack.prototype;\nStackPrototype[IS_STACK_SENTINEL] = true;\nStackPrototype.shift = StackPrototype.pop;\nStackPrototype.unshift = StackPrototype.push;\nStackPrototype.unshiftAll = StackPrototype.pushAll;\nStackPrototype.withMutations = withMutations;\nStackPrototype.wasAltered = wasAltered;\nStackPrototype.asImmutable = asImmutable;\nStackPrototype['@@transducer/init'] = StackPrototype.asMutable = asMutable;\nStackPrototype['@@transducer/step'] = function(result, arr) {\n  return result.unshift(arr);\n};\nStackPrototype['@@transducer/result'] = function(obj) {\n  return obj.asImmutable();\n};\n\nfunction makeStack(size, head, ownerID, hash) {\n  var map = Object.create(StackPrototype);\n  map.size = size;\n  map._head = head;\n  map.__ownerID = ownerID;\n  map.__hash = hash;\n  map.__altered = false;\n  return map;\n}\n\nvar EMPTY_STACK;\nfunction emptyStack() {\n  return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n}\n\nfunction deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (\n    !isCollection(b) ||\n    (a.size !== undefined && b.size !== undefined && a.size !== b.size) ||\n    (a.__hash !== undefined &&\n      b.__hash !== undefined &&\n      a.__hash !== b.__hash) ||\n    isKeyed(a) !== isKeyed(b) ||\n    isIndexed(a) !== isIndexed(b) ||\n    isOrdered(a) !== isOrdered(b)\n  ) {\n    return false;\n  }\n\n  if (a.size === 0 && b.size === 0) {\n    return true;\n  }\n\n  var notAssociative = !isAssociative(a);\n\n  if (isOrdered(a)) {\n    var entries = a.entries();\n    return (\n      b.every(function (v, k) {\n        var entry = entries.next().value;\n        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n      }) && entries.next().done\n    );\n  }\n\n  var flipped = false;\n\n  if (a.size === undefined) {\n    if (b.size === undefined) {\n      if (typeof a.cacheResult === 'function') {\n        a.cacheResult();\n      }\n    } else {\n      flipped = true;\n      var _ = a;\n      a = b;\n      b = _;\n    }\n  }\n\n  var allEqual = true;\n  var bSize = b.__iterate(function (v, k) {\n    if (\n      notAssociative\n        ? !a.has(v)\n        : flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)\n    ) {\n      allEqual = false;\n      return false;\n    }\n  });\n\n  return allEqual && a.size === bSize;\n}\n\n/**\n * Contributes additional methods to a constructor\n */\nfunction mixin(ctor, methods) {\n  var keyCopier = function (key) {\n    ctor.prototype[key] = methods[key];\n  };\n  Object.keys(methods).forEach(keyCopier);\n  Object.getOwnPropertySymbols &&\n    Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n  return ctor;\n}\n\nfunction toJS(value) {\n  return isDataStructure(value)\n    ? Seq(value)\n        .map(toJS)\n        .toJSON()\n    : value;\n}\n\nvar Set = (function (SetCollection$$1) {\n  function Set(value) {\n    return value === null || value === undefined\n      ? emptySet()\n      : isSet(value) && !isOrdered(value)\n        ? value\n        : emptySet().withMutations(function (set) {\n            var iter = SetCollection$$1(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function (v) { return set.add(v); });\n          });\n  }\n\n  if ( SetCollection$$1 ) Set.__proto__ = SetCollection$$1;\n  Set.prototype = Object.create( SetCollection$$1 && SetCollection$$1.prototype );\n  Set.prototype.constructor = Set;\n\n  Set.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  Set.fromKeys = function fromKeys (value) {\n    return this(KeyedCollection(value).keySeq());\n  };\n\n  Set.intersect = function intersect (sets) {\n    sets = Collection(sets).toArray();\n    return sets.length\n      ? SetPrototype.intersect.apply(Set(sets.pop()), sets)\n      : emptySet();\n  };\n\n  Set.union = function union (sets) {\n    sets = Collection(sets).toArray();\n    return sets.length\n      ? SetPrototype.union.apply(Set(sets.pop()), sets)\n      : emptySet();\n  };\n\n  Set.prototype.toString = function toString () {\n    return this.__toString('Set {', '}');\n  };\n\n  // @pragma Access\n\n  Set.prototype.has = function has (value) {\n    return this._map.has(value);\n  };\n\n  // @pragma Modification\n\n  Set.prototype.add = function add (value) {\n    return updateSet(this, this._map.set(value, value));\n  };\n\n  Set.prototype.remove = function remove (value) {\n    return updateSet(this, this._map.remove(value));\n  };\n\n  Set.prototype.clear = function clear () {\n    return updateSet(this, this._map.clear());\n  };\n\n  // @pragma Composition\n\n  Set.prototype.union = function union () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    iters = iters.filter(function (x) { return x.size !== 0; });\n    if (iters.length === 0) {\n      return this;\n    }\n    if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n      return this.constructor(iters[0]);\n    }\n    return this.withMutations(function (set) {\n      for (var ii = 0; ii < iters.length; ii++) {\n        SetCollection$$1(iters[ii]).forEach(function (value) { return set.add(value); });\n      }\n    });\n  };\n\n  Set.prototype.intersect = function intersect () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    if (iters.length === 0) {\n      return this;\n    }\n    iters = iters.map(function (iter) { return SetCollection$$1(iter); });\n    var toRemove = [];\n    this.forEach(function (value) {\n      if (!iters.every(function (iter) { return iter.includes(value); })) {\n        toRemove.push(value);\n      }\n    });\n    return this.withMutations(function (set) {\n      toRemove.forEach(function (value) {\n        set.remove(value);\n      });\n    });\n  };\n\n  Set.prototype.subtract = function subtract () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    if (iters.length === 0) {\n      return this;\n    }\n    iters = iters.map(function (iter) { return SetCollection$$1(iter); });\n    var toRemove = [];\n    this.forEach(function (value) {\n      if (iters.some(function (iter) { return iter.includes(value); })) {\n        toRemove.push(value);\n      }\n    });\n    return this.withMutations(function (set) {\n      toRemove.forEach(function (value) {\n        set.remove(value);\n      });\n    });\n  };\n\n  Set.prototype.sort = function sort (comparator) {\n    // Late binding\n    return OrderedSet(sortFactory(this, comparator));\n  };\n\n  Set.prototype.sortBy = function sortBy (mapper, comparator) {\n    // Late binding\n    return OrderedSet(sortFactory(this, comparator, mapper));\n  };\n\n  Set.prototype.wasAltered = function wasAltered () {\n    return this._map.wasAltered();\n  };\n\n  Set.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    return this._map.__iterate(function (k) { return fn(k, k, this$1); }, reverse);\n  };\n\n  Set.prototype.__iterator = function __iterator (type, reverse) {\n    return this._map.__iterator(type, reverse);\n  };\n\n  Set.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    var newMap = this._map.__ensureOwner(ownerID);\n    if (!ownerID) {\n      if (this.size === 0) {\n        return this.__empty();\n      }\n      this.__ownerID = ownerID;\n      this._map = newMap;\n      return this;\n    }\n    return this.__make(newMap, ownerID);\n  };\n\n  return Set;\n}(SetCollection));\n\nfunction isSet(maybeSet) {\n  return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n}\n\nSet.isSet = isSet;\n\nvar IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\nvar SetPrototype = Set.prototype;\nSetPrototype[IS_SET_SENTINEL] = true;\nSetPrototype[DELETE] = SetPrototype.remove;\nSetPrototype.merge = SetPrototype.concat = SetPrototype.union;\nSetPrototype.withMutations = withMutations;\nSetPrototype.asImmutable = asImmutable;\nSetPrototype['@@transducer/init'] = SetPrototype.asMutable = asMutable;\nSetPrototype['@@transducer/step'] = function(result, arr) {\n  return result.add(arr);\n};\nSetPrototype['@@transducer/result'] = function(obj) {\n  return obj.asImmutable();\n};\n\nSetPrototype.__empty = emptySet;\nSetPrototype.__make = makeSet;\n\nfunction updateSet(set, newMap) {\n  if (set.__ownerID) {\n    set.size = newMap.size;\n    set._map = newMap;\n    return set;\n  }\n  return newMap === set._map\n    ? set\n    : newMap.size === 0 ? set.__empty() : set.__make(newMap);\n}\n\nfunction makeSet(map, ownerID) {\n  var set = Object.create(SetPrototype);\n  set.size = map ? map.size : 0;\n  set._map = map;\n  set.__ownerID = ownerID;\n  return set;\n}\n\nvar EMPTY_SET;\nfunction emptySet() {\n  return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n}\n\n/**\n * Returns a lazy seq of nums from start (inclusive) to end\n * (exclusive), by step, where start defaults to 0, step to 1, and end to\n * infinity. When start is equal to end, returns empty list.\n */\nvar Range = (function (IndexedSeq$$1) {\n  function Range(start, end, step) {\n    if (!(this instanceof Range)) {\n      return new Range(start, end, step);\n    }\n    invariant(step !== 0, 'Cannot step a Range by 0');\n    start = start || 0;\n    if (end === undefined) {\n      end = Infinity;\n    }\n    step = step === undefined ? 1 : Math.abs(step);\n    if (end < start) {\n      step = -step;\n    }\n    this._start = start;\n    this._end = end;\n    this._step = step;\n    this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n    if (this.size === 0) {\n      if (EMPTY_RANGE) {\n        return EMPTY_RANGE;\n      }\n      EMPTY_RANGE = this;\n    }\n  }\n\n  if ( IndexedSeq$$1 ) Range.__proto__ = IndexedSeq$$1;\n  Range.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );\n  Range.prototype.constructor = Range;\n\n  Range.prototype.toString = function toString () {\n    if (this.size === 0) {\n      return 'Range []';\n    }\n    return (\n      'Range [ ' +\n      this._start +\n      '...' +\n      this._end +\n      (this._step !== 1 ? ' by ' + this._step : '') +\n      ' ]'\n    );\n  };\n\n  Range.prototype.get = function get (index, notSetValue) {\n    return this.has(index)\n      ? this._start + wrapIndex(this, index) * this._step\n      : notSetValue;\n  };\n\n  Range.prototype.includes = function includes (searchValue) {\n    var possibleIndex = (searchValue - this._start) / this._step;\n    return (\n      possibleIndex >= 0 &&\n      possibleIndex < this.size &&\n      possibleIndex === Math.floor(possibleIndex)\n    );\n  };\n\n  Range.prototype.slice = function slice (begin, end) {\n    if (wholeSlice(begin, end, this.size)) {\n      return this;\n    }\n    begin = resolveBegin(begin, this.size);\n    end = resolveEnd(end, this.size);\n    if (end <= begin) {\n      return new Range(0, 0);\n    }\n    return new Range(\n      this.get(begin, this._end),\n      this.get(end, this._end),\n      this._step\n    );\n  };\n\n  Range.prototype.indexOf = function indexOf (searchValue) {\n    var offsetValue = searchValue - this._start;\n    if (offsetValue % this._step === 0) {\n      var index = offsetValue / this._step;\n      if (index >= 0 && index < this.size) {\n        return index;\n      }\n    }\n    return -1;\n  };\n\n  Range.prototype.lastIndexOf = function lastIndexOf (searchValue) {\n    return this.indexOf(searchValue);\n  };\n\n  Range.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var size = this.size;\n    var step = this._step;\n    var value = reverse ? this._start + (size - 1) * step : this._start;\n    var i = 0;\n    while (i !== size) {\n      if (fn(value, reverse ? size - ++i : i++, this$1) === false) {\n        break;\n      }\n      value += reverse ? -step : step;\n    }\n    return i;\n  };\n\n  Range.prototype.__iterator = function __iterator (type, reverse) {\n    var size = this.size;\n    var step = this._step;\n    var value = reverse ? this._start + (size - 1) * step : this._start;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var v = value;\n      value += reverse ? -step : step;\n      return iteratorValue(type, reverse ? size - ++i : i++, v);\n    });\n  };\n\n  Range.prototype.equals = function equals (other) {\n    return other instanceof Range\n      ? this._start === other._start &&\n          this._end === other._end &&\n          this._step === other._step\n      : deepEqual(this, other);\n  };\n\n  return Range;\n}(IndexedSeq));\n\nvar EMPTY_RANGE;\n\nfunction getIn$1(collection, searchKeyPath, notSetValue) {\n  var keyPath = coerceKeyPath(searchKeyPath);\n  var i = 0;\n  while (i !== keyPath.length) {\n    collection = get(collection, keyPath[i++], NOT_SET);\n    if (collection === NOT_SET) {\n      return notSetValue;\n    }\n  }\n  return collection;\n}\n\nfunction getIn$$1(searchKeyPath, notSetValue) {\n  return getIn$1(this, searchKeyPath, notSetValue);\n}\n\nfunction hasIn$1(collection, keyPath) {\n  return getIn$1(collection, keyPath, NOT_SET) !== NOT_SET;\n}\n\nfunction hasIn$$1(searchKeyPath) {\n  return hasIn$1(this, searchKeyPath);\n}\n\nfunction toObject() {\n  assertNotInfinite(this.size);\n  var object = {};\n  this.__iterate(function (v, k) {\n    object[k] = v;\n  });\n  return object;\n}\n\n// Note: all of these methods are deprecated.\nCollection.isIterable = isCollection;\nCollection.isKeyed = isKeyed;\nCollection.isIndexed = isIndexed;\nCollection.isAssociative = isAssociative;\nCollection.isOrdered = isOrdered;\n\nCollection.Iterator = Iterator;\n\nmixin(Collection, {\n  // ### Conversion to other types\n\n  toArray: function toArray() {\n    assertNotInfinite(this.size);\n    var array = new Array(this.size || 0);\n    var useTuples = isKeyed(this);\n    var i = 0;\n    this.__iterate(function (v, k) {\n      // Keyed collections produce an array of tuples.\n      array[i++] = useTuples ? [k, v] : v;\n    });\n    return array;\n  },\n\n  toIndexedSeq: function toIndexedSeq() {\n    return new ToIndexedSequence(this);\n  },\n\n  toJS: function toJS$1() {\n    return toJS(this);\n  },\n\n  toKeyedSeq: function toKeyedSeq() {\n    return new ToKeyedSequence(this, true);\n  },\n\n  toMap: function toMap() {\n    // Use Late Binding here to solve the circular dependency.\n    return Map(this.toKeyedSeq());\n  },\n\n  toObject: toObject,\n\n  toOrderedMap: function toOrderedMap() {\n    // Use Late Binding here to solve the circular dependency.\n    return OrderedMap(this.toKeyedSeq());\n  },\n\n  toOrderedSet: function toOrderedSet() {\n    // Use Late Binding here to solve the circular dependency.\n    return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toSet: function toSet() {\n    // Use Late Binding here to solve the circular dependency.\n    return Set(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toSetSeq: function toSetSeq() {\n    return new ToSetSequence(this);\n  },\n\n  toSeq: function toSeq() {\n    return isIndexed(this)\n      ? this.toIndexedSeq()\n      : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();\n  },\n\n  toStack: function toStack() {\n    // Use Late Binding here to solve the circular dependency.\n    return Stack(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toList: function toList() {\n    // Use Late Binding here to solve the circular dependency.\n    return List(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  // ### Common JavaScript methods and properties\n\n  toString: function toString() {\n    return '[Collection]';\n  },\n\n  __toString: function __toString(head, tail) {\n    if (this.size === 0) {\n      return head + tail;\n    }\n    return (\n      head +\n      ' ' +\n      this.toSeq()\n        .map(this.__toStringMapper)\n        .join(', ') +\n      ' ' +\n      tail\n    );\n  },\n\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  concat: function concat() {\n    var values = [], len = arguments.length;\n    while ( len-- ) values[ len ] = arguments[ len ];\n\n    return reify(this, concatFactory(this, values));\n  },\n\n  includes: function includes(searchValue) {\n    return this.some(function (value) { return is(value, searchValue); });\n  },\n\n  entries: function entries() {\n    return this.__iterator(ITERATE_ENTRIES);\n  },\n\n  every: function every(predicate, context) {\n    assertNotInfinite(this.size);\n    var returnValue = true;\n    this.__iterate(function (v, k, c) {\n      if (!predicate.call(context, v, k, c)) {\n        returnValue = false;\n        return false;\n      }\n    });\n    return returnValue;\n  },\n\n  filter: function filter(predicate, context) {\n    return reify(this, filterFactory(this, predicate, context, true));\n  },\n\n  find: function find(predicate, context, notSetValue) {\n    var entry = this.findEntry(predicate, context);\n    return entry ? entry[1] : notSetValue;\n  },\n\n  forEach: function forEach(sideEffect, context) {\n    assertNotInfinite(this.size);\n    return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n  },\n\n  join: function join(separator) {\n    assertNotInfinite(this.size);\n    separator = separator !== undefined ? '' + separator : ',';\n    var joined = '';\n    var isFirst = true;\n    this.__iterate(function (v) {\n      isFirst ? (isFirst = false) : (joined += separator);\n      joined += v !== null && v !== undefined ? v.toString() : '';\n    });\n    return joined;\n  },\n\n  keys: function keys() {\n    return this.__iterator(ITERATE_KEYS);\n  },\n\n  map: function map(mapper, context) {\n    return reify(this, mapFactory(this, mapper, context));\n  },\n\n  reduce: function reduce$1(reducer, initialReduction, context) {\n    return reduce(\n      this,\n      reducer,\n      initialReduction,\n      context,\n      arguments.length < 2,\n      false\n    );\n  },\n\n  reduceRight: function reduceRight(reducer, initialReduction, context) {\n    return reduce(\n      this,\n      reducer,\n      initialReduction,\n      context,\n      arguments.length < 2,\n      true\n    );\n  },\n\n  reverse: function reverse() {\n    return reify(this, reverseFactory(this, true));\n  },\n\n  slice: function slice(begin, end) {\n    return reify(this, sliceFactory(this, begin, end, true));\n  },\n\n  some: function some(predicate, context) {\n    return !this.every(not(predicate), context);\n  },\n\n  sort: function sort(comparator) {\n    return reify(this, sortFactory(this, comparator));\n  },\n\n  values: function values() {\n    return this.__iterator(ITERATE_VALUES);\n  },\n\n  // ### More sequential methods\n\n  butLast: function butLast() {\n    return this.slice(0, -1);\n  },\n\n  isEmpty: function isEmpty() {\n    return this.size !== undefined ? this.size === 0 : !this.some(function () { return true; });\n  },\n\n  count: function count(predicate, context) {\n    return ensureSize(\n      predicate ? this.toSeq().filter(predicate, context) : this\n    );\n  },\n\n  countBy: function countBy(grouper, context) {\n    return countByFactory(this, grouper, context);\n  },\n\n  equals: function equals(other) {\n    return deepEqual(this, other);\n  },\n\n  entrySeq: function entrySeq() {\n    var collection = this;\n    if (collection._cache) {\n      // We cache as an entries array, so we can just return the cache!\n      return new ArraySeq(collection._cache);\n    }\n    var entriesSequence = collection\n      .toSeq()\n      .map(entryMapper)\n      .toIndexedSeq();\n    entriesSequence.fromEntrySeq = function () { return collection.toSeq(); };\n    return entriesSequence;\n  },\n\n  filterNot: function filterNot(predicate, context) {\n    return this.filter(not(predicate), context);\n  },\n\n  findEntry: function findEntry(predicate, context, notSetValue) {\n    var found = notSetValue;\n    this.__iterate(function (v, k, c) {\n      if (predicate.call(context, v, k, c)) {\n        found = [k, v];\n        return false;\n      }\n    });\n    return found;\n  },\n\n  findKey: function findKey(predicate, context) {\n    var entry = this.findEntry(predicate, context);\n    return entry && entry[0];\n  },\n\n  findLast: function findLast(predicate, context, notSetValue) {\n    return this.toKeyedSeq()\n      .reverse()\n      .find(predicate, context, notSetValue);\n  },\n\n  findLastEntry: function findLastEntry(predicate, context, notSetValue) {\n    return this.toKeyedSeq()\n      .reverse()\n      .findEntry(predicate, context, notSetValue);\n  },\n\n  findLastKey: function findLastKey(predicate, context) {\n    return this.toKeyedSeq()\n      .reverse()\n      .findKey(predicate, context);\n  },\n\n  first: function first() {\n    return this.find(returnTrue);\n  },\n\n  flatMap: function flatMap(mapper, context) {\n    return reify(this, flatMapFactory(this, mapper, context));\n  },\n\n  flatten: function flatten(depth) {\n    return reify(this, flattenFactory(this, depth, true));\n  },\n\n  fromEntrySeq: function fromEntrySeq() {\n    return new FromEntriesSequence(this);\n  },\n\n  get: function get(searchKey, notSetValue) {\n    return this.find(function (_, key) { return is(key, searchKey); }, undefined, notSetValue);\n  },\n\n  getIn: getIn$$1,\n\n  groupBy: function groupBy(grouper, context) {\n    return groupByFactory(this, grouper, context);\n  },\n\n  has: function has(searchKey) {\n    return this.get(searchKey, NOT_SET) !== NOT_SET;\n  },\n\n  hasIn: hasIn$$1,\n\n  isSubset: function isSubset(iter) {\n    iter = typeof iter.includes === 'function' ? iter : Collection(iter);\n    return this.every(function (value) { return iter.includes(value); });\n  },\n\n  isSuperset: function isSuperset(iter) {\n    iter = typeof iter.isSubset === 'function' ? iter : Collection(iter);\n    return iter.isSubset(this);\n  },\n\n  keyOf: function keyOf(searchValue) {\n    return this.findKey(function (value) { return is(value, searchValue); });\n  },\n\n  keySeq: function keySeq() {\n    return this.toSeq()\n      .map(keyMapper)\n      .toIndexedSeq();\n  },\n\n  last: function last() {\n    return this.toSeq()\n      .reverse()\n      .first();\n  },\n\n  lastKeyOf: function lastKeyOf(searchValue) {\n    return this.toKeyedSeq()\n      .reverse()\n      .keyOf(searchValue);\n  },\n\n  max: function max(comparator) {\n    return maxFactory(this, comparator);\n  },\n\n  maxBy: function maxBy(mapper, comparator) {\n    return maxFactory(this, comparator, mapper);\n  },\n\n  min: function min(comparator) {\n    return maxFactory(\n      this,\n      comparator ? neg(comparator) : defaultNegComparator\n    );\n  },\n\n  minBy: function minBy(mapper, comparator) {\n    return maxFactory(\n      this,\n      comparator ? neg(comparator) : defaultNegComparator,\n      mapper\n    );\n  },\n\n  rest: function rest() {\n    return this.slice(1);\n  },\n\n  skip: function skip(amount) {\n    return amount === 0 ? this : this.slice(Math.max(0, amount));\n  },\n\n  skipLast: function skipLast(amount) {\n    return amount === 0 ? this : this.slice(0, -Math.max(0, amount));\n  },\n\n  skipWhile: function skipWhile(predicate, context) {\n    return reify(this, skipWhileFactory(this, predicate, context, true));\n  },\n\n  skipUntil: function skipUntil(predicate, context) {\n    return this.skipWhile(not(predicate), context);\n  },\n\n  sortBy: function sortBy(mapper, comparator) {\n    return reify(this, sortFactory(this, comparator, mapper));\n  },\n\n  take: function take(amount) {\n    return this.slice(0, Math.max(0, amount));\n  },\n\n  takeLast: function takeLast(amount) {\n    return this.slice(-Math.max(0, amount));\n  },\n\n  takeWhile: function takeWhile(predicate, context) {\n    return reify(this, takeWhileFactory(this, predicate, context));\n  },\n\n  takeUntil: function takeUntil(predicate, context) {\n    return this.takeWhile(not(predicate), context);\n  },\n\n  update: function update(fn) {\n    return fn(this);\n  },\n\n  valueSeq: function valueSeq() {\n    return this.toIndexedSeq();\n  },\n\n  // ### Hashable Object\n\n  hashCode: function hashCode() {\n    return this.__hash || (this.__hash = hashCollection(this));\n  }\n\n  // ### Internal\n\n  // abstract __iterate(fn, reverse)\n\n  // abstract __iterator(type, reverse)\n});\n\nvar CollectionPrototype = Collection.prototype;\nCollectionPrototype[IS_ITERABLE_SENTINEL] = true;\nCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.values;\nCollectionPrototype.toJSON = CollectionPrototype.toArray;\nCollectionPrototype.__toStringMapper = quoteString;\nCollectionPrototype.inspect = CollectionPrototype.toSource = function() {\n  return this.toString();\n};\nCollectionPrototype.chain = CollectionPrototype.flatMap;\nCollectionPrototype.contains = CollectionPrototype.includes;\n\nmixin(KeyedCollection, {\n  // ### More sequential methods\n\n  flip: function flip() {\n    return reify(this, flipFactory(this));\n  },\n\n  mapEntries: function mapEntries(mapper, context) {\n    var this$1 = this;\n\n    var iterations = 0;\n    return reify(\n      this,\n      this.toSeq()\n        .map(function (v, k) { return mapper.call(context, [k, v], iterations++, this$1); })\n        .fromEntrySeq()\n    );\n  },\n\n  mapKeys: function mapKeys(mapper, context) {\n    var this$1 = this;\n\n    return reify(\n      this,\n      this.toSeq()\n        .flip()\n        .map(function (k, v) { return mapper.call(context, k, v, this$1); })\n        .flip()\n    );\n  }\n});\n\nvar KeyedCollectionPrototype = KeyedCollection.prototype;\nKeyedCollectionPrototype[IS_KEYED_SENTINEL] = true;\nKeyedCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;\nKeyedCollectionPrototype.toJSON = toObject;\nKeyedCollectionPrototype.__toStringMapper = function (v, k) { return quoteString(k) + ': ' + quoteString(v); };\n\nmixin(IndexedCollection, {\n  // ### Conversion to other types\n\n  toKeyedSeq: function toKeyedSeq() {\n    return new ToKeyedSequence(this, false);\n  },\n\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  filter: function filter(predicate, context) {\n    return reify(this, filterFactory(this, predicate, context, false));\n  },\n\n  findIndex: function findIndex(predicate, context) {\n    var entry = this.findEntry(predicate, context);\n    return entry ? entry[0] : -1;\n  },\n\n  indexOf: function indexOf(searchValue) {\n    var key = this.keyOf(searchValue);\n    return key === undefined ? -1 : key;\n  },\n\n  lastIndexOf: function lastIndexOf(searchValue) {\n    var key = this.lastKeyOf(searchValue);\n    return key === undefined ? -1 : key;\n  },\n\n  reverse: function reverse() {\n    return reify(this, reverseFactory(this, false));\n  },\n\n  slice: function slice(begin, end) {\n    return reify(this, sliceFactory(this, begin, end, false));\n  },\n\n  splice: function splice(index, removeNum /*, ...values*/) {\n    var numArgs = arguments.length;\n    removeNum = Math.max(removeNum || 0, 0);\n    if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n      return this;\n    }\n    // If index is negative, it should resolve relative to the size of the\n    // collection. However size may be expensive to compute if not cached, so\n    // only call count() if the number is in fact negative.\n    index = resolveBegin(index, index < 0 ? this.count() : this.size);\n    var spliced = this.slice(0, index);\n    return reify(\n      this,\n      numArgs === 1\n        ? spliced\n        : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n    );\n  },\n\n  // ### More collection methods\n\n  findLastIndex: function findLastIndex(predicate, context) {\n    var entry = this.findLastEntry(predicate, context);\n    return entry ? entry[0] : -1;\n  },\n\n  first: function first() {\n    return this.get(0);\n  },\n\n  flatten: function flatten(depth) {\n    return reify(this, flattenFactory(this, depth, false));\n  },\n\n  get: function get(index, notSetValue) {\n    index = wrapIndex(this, index);\n    return index < 0 ||\n      (this.size === Infinity || (this.size !== undefined && index > this.size))\n      ? notSetValue\n      : this.find(function (_, key) { return key === index; }, undefined, notSetValue);\n  },\n\n  has: function has(index) {\n    index = wrapIndex(this, index);\n    return (\n      index >= 0 &&\n      (this.size !== undefined\n        ? this.size === Infinity || index < this.size\n        : this.indexOf(index) !== -1)\n    );\n  },\n\n  interpose: function interpose(separator) {\n    return reify(this, interposeFactory(this, separator));\n  },\n\n  interleave: function interleave(/*...collections*/) {\n    var collections = [this].concat(arrCopy(arguments));\n    var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, collections);\n    var interleaved = zipped.flatten(true);\n    if (zipped.size) {\n      interleaved.size = zipped.size * collections.length;\n    }\n    return reify(this, interleaved);\n  },\n\n  keySeq: function keySeq() {\n    return Range(0, this.size);\n  },\n\n  last: function last() {\n    return this.get(-1);\n  },\n\n  skipWhile: function skipWhile(predicate, context) {\n    return reify(this, skipWhileFactory(this, predicate, context, false));\n  },\n\n  zip: function zip(/*, ...collections */) {\n    var collections = [this].concat(arrCopy(arguments));\n    return reify(this, zipWithFactory(this, defaultZipper, collections));\n  },\n\n  zipAll: function zipAll(/*, ...collections */) {\n    var collections = [this].concat(arrCopy(arguments));\n    return reify(this, zipWithFactory(this, defaultZipper, collections, true));\n  },\n\n  zipWith: function zipWith(zipper /*, ...collections */) {\n    var collections = arrCopy(arguments);\n    collections[0] = this;\n    return reify(this, zipWithFactory(this, zipper, collections));\n  }\n});\n\nvar IndexedCollectionPrototype = IndexedCollection.prototype;\nIndexedCollectionPrototype[IS_INDEXED_SENTINEL] = true;\nIndexedCollectionPrototype[IS_ORDERED_SENTINEL] = true;\n\nmixin(SetCollection, {\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  get: function get(value, notSetValue) {\n    return this.has(value) ? value : notSetValue;\n  },\n\n  includes: function includes(value) {\n    return this.has(value);\n  },\n\n  // ### More sequential methods\n\n  keySeq: function keySeq() {\n    return this.valueSeq();\n  }\n});\n\nSetCollection.prototype.has = CollectionPrototype.includes;\nSetCollection.prototype.contains = SetCollection.prototype.includes;\n\n// Mixin subclasses\n\nmixin(KeyedSeq, KeyedCollection.prototype);\nmixin(IndexedSeq, IndexedCollection.prototype);\nmixin(SetSeq, SetCollection.prototype);\n\n// #pragma Helper functions\n\nfunction reduce(collection, reducer, reduction, context, useFirst, reverse) {\n  assertNotInfinite(collection.size);\n  collection.__iterate(function (v, k, c) {\n    if (useFirst) {\n      useFirst = false;\n      reduction = v;\n    } else {\n      reduction = reducer.call(context, reduction, v, k, c);\n    }\n  }, reverse);\n  return reduction;\n}\n\nfunction keyMapper(v, k) {\n  return k;\n}\n\nfunction entryMapper(v, k) {\n  return [k, v];\n}\n\nfunction not(predicate) {\n  return function() {\n    return !predicate.apply(this, arguments);\n  };\n}\n\nfunction neg(predicate) {\n  return function() {\n    return -predicate.apply(this, arguments);\n  };\n}\n\nfunction defaultZipper() {\n  return arrCopy(arguments);\n}\n\nfunction defaultNegComparator(a, b) {\n  return a < b ? 1 : a > b ? -1 : 0;\n}\n\nfunction hashCollection(collection) {\n  if (collection.size === Infinity) {\n    return 0;\n  }\n  var ordered = isOrdered(collection);\n  var keyed = isKeyed(collection);\n  var h = ordered ? 1 : 0;\n  var size = collection.__iterate(\n    keyed\n      ? ordered\n        ? function (v, k) {\n            h = (31 * h + hashMerge(hash(v), hash(k))) | 0;\n          }\n        : function (v, k) {\n            h = (h + hashMerge(hash(v), hash(k))) | 0;\n          }\n      : ordered\n        ? function (v) {\n            h = (31 * h + hash(v)) | 0;\n          }\n        : function (v) {\n            h = (h + hash(v)) | 0;\n          }\n  );\n  return murmurHashOfSize(size, h);\n}\n\nfunction murmurHashOfSize(size, h) {\n  h = imul(h, 0xcc9e2d51);\n  h = imul((h << 15) | (h >>> -15), 0x1b873593);\n  h = imul((h << 13) | (h >>> -13), 5);\n  h = ((h + 0xe6546b64) | 0) ^ size;\n  h = imul(h ^ (h >>> 16), 0x85ebca6b);\n  h = imul(h ^ (h >>> 13), 0xc2b2ae35);\n  h = smi(h ^ (h >>> 16));\n  return h;\n}\n\nfunction hashMerge(a, b) {\n  return (a ^ (b + 0x9e3779b9 + (a << 6) + (a >> 2))) | 0; // int\n}\n\nvar OrderedSet = (function (Set$$1) {\n  function OrderedSet(value) {\n    return value === null || value === undefined\n      ? emptyOrderedSet()\n      : isOrderedSet(value)\n        ? value\n        : emptyOrderedSet().withMutations(function (set) {\n            var iter = SetCollection(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function (v) { return set.add(v); });\n          });\n  }\n\n  if ( Set$$1 ) OrderedSet.__proto__ = Set$$1;\n  OrderedSet.prototype = Object.create( Set$$1 && Set$$1.prototype );\n  OrderedSet.prototype.constructor = OrderedSet;\n\n  OrderedSet.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  OrderedSet.fromKeys = function fromKeys (value) {\n    return this(KeyedCollection(value).keySeq());\n  };\n\n  OrderedSet.prototype.toString = function toString () {\n    return this.__toString('OrderedSet {', '}');\n  };\n\n  return OrderedSet;\n}(Set));\n\nfunction isOrderedSet(maybeOrderedSet) {\n  return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n}\n\nOrderedSet.isOrderedSet = isOrderedSet;\n\nvar OrderedSetPrototype = OrderedSet.prototype;\nOrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\nOrderedSetPrototype.zip = IndexedCollectionPrototype.zip;\nOrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;\n\nOrderedSetPrototype.__empty = emptyOrderedSet;\nOrderedSetPrototype.__make = makeOrderedSet;\n\nfunction makeOrderedSet(map, ownerID) {\n  var set = Object.create(OrderedSetPrototype);\n  set.size = map ? map.size : 0;\n  set._map = map;\n  set.__ownerID = ownerID;\n  return set;\n}\n\nvar EMPTY_ORDERED_SET;\nfunction emptyOrderedSet() {\n  return (\n    EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()))\n  );\n}\n\nvar Record = function Record(defaultValues, name) {\n  var hasInitialized;\n\n  var RecordType = function Record(values) {\n    var this$1 = this;\n\n    if (values instanceof RecordType) {\n      return values;\n    }\n    if (!(this instanceof RecordType)) {\n      return new RecordType(values);\n    }\n    if (!hasInitialized) {\n      hasInitialized = true;\n      var keys = Object.keys(defaultValues);\n      var indices = (RecordTypePrototype._indices = {});\n      RecordTypePrototype._name = name;\n      RecordTypePrototype._keys = keys;\n      RecordTypePrototype._defaultValues = defaultValues;\n      for (var i = 0; i < keys.length; i++) {\n        var propName = keys[i];\n        indices[propName] = i;\n        if (RecordTypePrototype[propName]) {\n          /* eslint-disable no-console */\n          typeof console === 'object' &&\n            console.warn &&\n            console.warn(\n              'Cannot define ' +\n                recordName(this$1) +\n                ' with property \"' +\n                propName +\n                '\" since that property name is part of the Record API.'\n            );\n          /* eslint-enable no-console */\n        } else {\n          setProp(RecordTypePrototype, propName);\n        }\n      }\n    }\n    this.__ownerID = undefined;\n    this._values = List().withMutations(function (l) {\n      l.setSize(this$1._keys.length);\n      KeyedCollection(values).forEach(function (v, k) {\n        l.set(this$1._indices[k], v === this$1._defaultValues[k] ? undefined : v);\n      });\n    });\n  };\n\n  var RecordTypePrototype = (RecordType.prototype = Object.create(\n    RecordPrototype\n  ));\n  RecordTypePrototype.constructor = RecordType;\n\n  return RecordType;\n};\n\nRecord.prototype.toString = function toString () {\n    var this$1 = this;\n\n  var str = recordName(this) + ' { ';\n  var keys = this._keys;\n  var k;\n  for (var i = 0, l = keys.length; i !== l; i++) {\n    k = keys[i];\n    str += (i ? ', ' : '') + k + ': ' + quoteString(this$1.get(k));\n  }\n  return str + ' }';\n};\n\nRecord.prototype.equals = function equals (other) {\n  return (\n    this === other ||\n    (other &&\n      this._keys === other._keys &&\n      recordSeq(this).equals(recordSeq(other)))\n  );\n};\n\nRecord.prototype.hashCode = function hashCode () {\n  return recordSeq(this).hashCode();\n};\n\n// @pragma Access\n\nRecord.prototype.has = function has (k) {\n  return this._indices.hasOwnProperty(k);\n};\n\nRecord.prototype.get = function get (k, notSetValue) {\n  if (!this.has(k)) {\n    return notSetValue;\n  }\n  var index = this._indices[k];\n  var value = this._values.get(index);\n  return value === undefined ? this._defaultValues[k] : value;\n};\n\n// @pragma Modification\n\nRecord.prototype.set = function set (k, v) {\n  if (this.has(k)) {\n    var newValues = this._values.set(\n      this._indices[k],\n      v === this._defaultValues[k] ? undefined : v\n    );\n    if (newValues !== this._values && !this.__ownerID) {\n      return makeRecord(this, newValues);\n    }\n  }\n  return this;\n};\n\nRecord.prototype.remove = function remove (k) {\n  return this.set(k);\n};\n\nRecord.prototype.clear = function clear () {\n  var newValues = this._values.clear().setSize(this._keys.length);\n  return this.__ownerID ? this : makeRecord(this, newValues);\n};\n\nRecord.prototype.wasAltered = function wasAltered () {\n  return this._values.wasAltered();\n};\n\nRecord.prototype.toSeq = function toSeq () {\n  return recordSeq(this);\n};\n\nRecord.prototype.toJS = function toJS$1 () {\n  return toJS(this);\n};\n\nRecord.prototype.entries = function entries () {\n  return this.__iterator(ITERATE_ENTRIES);\n};\n\nRecord.prototype.__iterator = function __iterator (type, reverse) {\n  return recordSeq(this).__iterator(type, reverse);\n};\n\nRecord.prototype.__iterate = function __iterate (fn, reverse) {\n  return recordSeq(this).__iterate(fn, reverse);\n};\n\nRecord.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n  if (ownerID === this.__ownerID) {\n    return this;\n  }\n  var newValues = this._values.__ensureOwner(ownerID);\n  if (!ownerID) {\n    this.__ownerID = ownerID;\n    this._values = newValues;\n    return this;\n  }\n  return makeRecord(this, newValues, ownerID);\n};\n\nRecord.isRecord = isRecord;\nRecord.getDescriptiveName = recordName;\nvar RecordPrototype = Record.prototype;\nRecordPrototype[IS_RECORD_SENTINEL] = true;\nRecordPrototype[DELETE] = RecordPrototype.remove;\nRecordPrototype.deleteIn = RecordPrototype.removeIn = deleteIn;\nRecordPrototype.getIn = getIn$$1;\nRecordPrototype.hasIn = CollectionPrototype.hasIn;\nRecordPrototype.merge = merge;\nRecordPrototype.mergeWith = mergeWith;\nRecordPrototype.mergeIn = mergeIn;\nRecordPrototype.mergeDeep = mergeDeep;\nRecordPrototype.mergeDeepWith = mergeDeepWith;\nRecordPrototype.mergeDeepIn = mergeDeepIn;\nRecordPrototype.setIn = setIn$$1;\nRecordPrototype.update = update$$1;\nRecordPrototype.updateIn = updateIn$1;\nRecordPrototype.withMutations = withMutations;\nRecordPrototype.asMutable = asMutable;\nRecordPrototype.asImmutable = asImmutable;\nRecordPrototype[ITERATOR_SYMBOL] = RecordPrototype.entries;\nRecordPrototype.toJSON = RecordPrototype.toObject =\n  CollectionPrototype.toObject;\nRecordPrototype.inspect = RecordPrototype.toSource = function() {\n  return this.toString();\n};\n\nfunction makeRecord(likeRecord, values, ownerID) {\n  var record = Object.create(Object.getPrototypeOf(likeRecord));\n  record._values = values;\n  record.__ownerID = ownerID;\n  return record;\n}\n\nfunction recordName(record) {\n  return record._name || record.constructor.name || 'Record';\n}\n\nfunction recordSeq(record) {\n  return keyedSeqFromValue(record._keys.map(function (k) { return [k, record.get(k)]; }));\n}\n\nfunction setProp(prototype, name) {\n  try {\n    Object.defineProperty(prototype, name, {\n      get: function() {\n        return this.get(name);\n      },\n      set: function(value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      }\n    });\n  } catch (error) {\n    // Object.defineProperty failed. Probably IE8.\n  }\n}\n\n/**\n * Returns a lazy Seq of `value` repeated `times` times. When `times` is\n * undefined, returns an infinite sequence of `value`.\n */\nvar Repeat = (function (IndexedSeq$$1) {\n  function Repeat(value, times) {\n    if (!(this instanceof Repeat)) {\n      return new Repeat(value, times);\n    }\n    this._value = value;\n    this.size = times === undefined ? Infinity : Math.max(0, times);\n    if (this.size === 0) {\n      if (EMPTY_REPEAT) {\n        return EMPTY_REPEAT;\n      }\n      EMPTY_REPEAT = this;\n    }\n  }\n\n  if ( IndexedSeq$$1 ) Repeat.__proto__ = IndexedSeq$$1;\n  Repeat.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );\n  Repeat.prototype.constructor = Repeat;\n\n  Repeat.prototype.toString = function toString () {\n    if (this.size === 0) {\n      return 'Repeat []';\n    }\n    return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n  };\n\n  Repeat.prototype.get = function get (index, notSetValue) {\n    return this.has(index) ? this._value : notSetValue;\n  };\n\n  Repeat.prototype.includes = function includes (searchValue) {\n    return is(this._value, searchValue);\n  };\n\n  Repeat.prototype.slice = function slice (begin, end) {\n    var size = this.size;\n    return wholeSlice(begin, end, size)\n      ? this\n      : new Repeat(\n          this._value,\n          resolveEnd(end, size) - resolveBegin(begin, size)\n        );\n  };\n\n  Repeat.prototype.reverse = function reverse () {\n    return this;\n  };\n\n  Repeat.prototype.indexOf = function indexOf (searchValue) {\n    if (is(this._value, searchValue)) {\n      return 0;\n    }\n    return -1;\n  };\n\n  Repeat.prototype.lastIndexOf = function lastIndexOf (searchValue) {\n    if (is(this._value, searchValue)) {\n      return this.size;\n    }\n    return -1;\n  };\n\n  Repeat.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var size = this.size;\n    var i = 0;\n    while (i !== size) {\n      if (fn(this$1._value, reverse ? size - ++i : i++, this$1) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  Repeat.prototype.__iterator = function __iterator (type, reverse) {\n    var this$1 = this;\n\n    var size = this.size;\n    var i = 0;\n    return new Iterator(\n      function () { return i === size\n          ? iteratorDone()\n          : iteratorValue(type, reverse ? size - ++i : i++, this$1._value); }\n    );\n  };\n\n  Repeat.prototype.equals = function equals (other) {\n    return other instanceof Repeat\n      ? is(this._value, other._value)\n      : deepEqual(other);\n  };\n\n  return Repeat;\n}(IndexedSeq));\n\nvar EMPTY_REPEAT;\n\nfunction fromJS(value, converter) {\n  return fromJSWith(\n    [],\n    converter || defaultConverter,\n    value,\n    '',\n    converter && converter.length > 2 ? [] : undefined,\n    { '': value }\n  );\n}\n\nfunction fromJSWith(stack, converter, value, key, keyPath, parentValue) {\n  var toSeq = Array.isArray(value)\n    ? IndexedSeq\n    : isPlainObj(value) ? KeyedSeq : null;\n  if (toSeq) {\n    if (~stack.indexOf(value)) {\n      throw new TypeError('Cannot convert circular structure to Immutable');\n    }\n    stack.push(value);\n    keyPath && key !== '' && keyPath.push(key);\n    var converted = converter.call(\n      parentValue,\n      key,\n      toSeq(value).map(function (v, k) { return fromJSWith(stack, converter, v, k, keyPath, value); }\n      ),\n      keyPath && keyPath.slice()\n    );\n    stack.pop();\n    keyPath && keyPath.pop();\n    return converted;\n  }\n  return value;\n}\n\nfunction defaultConverter(k, v) {\n  return isKeyed(v) ? v.toMap() : v.toList();\n}\n\nvar version = \"4.0.0-rc.9\";\n\n// Functional read/write API\nvar Immutable = {\n  version: version,\n\n  Collection: Collection,\n  // Note: Iterable is deprecated\n  Iterable: Collection,\n\n  Seq: Seq,\n  Map: Map,\n  OrderedMap: OrderedMap,\n  List: List,\n  Stack: Stack,\n  Set: Set,\n  OrderedSet: OrderedSet,\n\n  Record: Record,\n  Range: Range,\n  Repeat: Repeat,\n\n  is: is,\n  fromJS: fromJS,\n  hash: hash,\n\n  isImmutable: isImmutable,\n  isCollection: isCollection,\n  isKeyed: isKeyed,\n  isIndexed: isIndexed,\n  isAssociative: isAssociative,\n  isOrdered: isOrdered,\n  isValueObject: isValueObject,\n\n  get: get,\n  getIn: getIn$1,\n  has: has,\n  hasIn: hasIn$1,\n  merge: merge$1,\n  mergeDeep: mergeDeep$1,\n  mergeWith: mergeWith$1,\n  mergeDeepWith: mergeDeepWith$1,\n  remove: remove,\n  removeIn: removeIn,\n  set: set,\n  setIn: setIn$1,\n  update: update$1,\n  updateIn: updateIn\n};\n\n// Note: Iterable is deprecated\nvar Iterable = Collection;\n\nexport { version, Collection, Iterable, Seq, Map, OrderedMap, List, Stack, Set, OrderedSet, Record, Range, Repeat, is, fromJS, hash, isImmutable, isCollection, isKeyed, isIndexed, isAssociative, isOrdered, isValueObject, get, getIn$1 as getIn, has, hasIn$1 as hasIn, merge$1 as merge, mergeDeep$1 as mergeDeep, mergeWith$1 as mergeWith, mergeDeepWith$1 as mergeDeepWith, remove, removeIn, set, setIn$1 as setIn, update$1 as update, updateIn };\nexport default Immutable;\n"
    },
    {
      "id": 2,
      "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/error.ts",
      "name": "./src/typecheck/error.ts",
      "index": 13,
      "index2": 11,
      "size": 227,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
      "issuerId": 12,
      "issuerName": "./src/typecheck/programs.ts",
      "issuerPath": [
        {
          "id": 19,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "name": "./src/demo/demo.ts",
          "profile": {
            "factory": 64,
            "building": 1924
          }
        },
        {
          "id": 12,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "name": "./src/typecheck/programs.ts",
          "profile": {
            "factory": 288,
            "building": 665,
            "dependencies": 114
          }
        }
      ],
      "profile": {
        "factory": 703,
        "building": 8,
        "dependencies": 347
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": 3,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/types.ts",
          "module": "./src/typecheck/types.ts",
          "moduleName": "./src/typecheck/types.ts",
          "type": "cjs require",
          "userRequest": "./error",
          "loc": "4:16-34"
        },
        {
          "moduleId": 5,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/expressions.ts",
          "module": "./src/typecheck/expressions.ts",
          "moduleName": "./src/typecheck/expressions.ts",
          "type": "cjs require",
          "userRequest": "./error",
          "loc": "4:16-34"
        },
        {
          "moduleId": 10,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/flow.ts",
          "module": "./src/typecheck/flow.ts",
          "moduleName": "./src/typecheck/flow.ts",
          "type": "cjs require",
          "userRequest": "./error",
          "loc": "5:16-34"
        },
        {
          "moduleId": 11,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/statements.ts",
          "module": "./src/typecheck/statements.ts",
          "moduleName": "./src/typecheck/statements.ts",
          "type": "cjs require",
          "userRequest": "./error",
          "loc": "4:16-34"
        },
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "module": "./src/typecheck/programs.ts",
          "moduleName": "./src/typecheck/programs.ts",
          "type": "cjs require",
          "userRequest": "./error",
          "loc": "5:16-34"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [
        "ModuleConcatenation bailout: Module is not an ECMAScript module"
      ],
      "depth": 2,
      "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction error(s1, s2) {\n    if (s2 === undefined)\n        throw new Error(s1);\n    throw new Error(`${s1}\\n[Hint: ${s2}]`);\n}\nexports.error = error;\n"
    },
    {
      "id": 3,
      "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/types.ts",
      "name": "./src/typecheck/types.ts",
      "index": 15,
      "index2": 13,
      "size": 11325,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
      "issuerId": 12,
      "issuerName": "./src/typecheck/programs.ts",
      "issuerPath": [
        {
          "id": 19,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "name": "./src/demo/demo.ts",
          "profile": {
            "factory": 64,
            "building": 1924
          }
        },
        {
          "id": 12,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "name": "./src/typecheck/programs.ts",
          "profile": {
            "factory": 288,
            "building": 665,
            "dependencies": 114
          }
        }
      ],
      "profile": {
        "factory": 703,
        "building": 8,
        "dependencies": 347
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": 5,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/expressions.ts",
          "module": "./src/typecheck/expressions.ts",
          "moduleName": "./src/typecheck/expressions.ts",
          "type": "cjs require",
          "userRequest": "./types",
          "loc": "6:16-34"
        },
        {
          "moduleId": 11,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/statements.ts",
          "module": "./src/typecheck/statements.ts",
          "moduleName": "./src/typecheck/statements.ts",
          "type": "cjs require",
          "userRequest": "./types",
          "loc": "5:16-34"
        },
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "module": "./src/typecheck/programs.ts",
          "moduleName": "./src/typecheck/programs.ts",
          "type": "cjs require",
          "userRequest": "./types",
          "loc": "7:16-34"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [
        "ModuleConcatenation bailout: Module is not an ECMAScript module"
      ],
      "depth": 2,
      "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst impossible_1 = require(\"@calculemus/impossible\");\nconst error_1 = require(\"./error\");\nconst globalenv_1 = require(\"./globalenv\");\nfunction actualSynthed(genv, t1) {\n    switch (t1.tag) {\n        case \"AmbiguousNullPointer\":\n        case \"NamedFunctionType\":\n        case \"AnonymousFunctionTypePointer\":\n            return t1;\n        default:\n            return globalenv_1.actualType(genv, t1);\n    }\n}\nexports.actualSynthed = actualSynthed;\nfunction equalTypes(genv, t1, t2) {\n    const actual1 = globalenv_1.actualType(genv, t1);\n    const actual2 = globalenv_1.actualType(genv, t2);\n    switch (actual1.tag) {\n        case \"IntType\":\n        case \"BoolType\":\n        case \"StringType\":\n        case \"CharType\":\n        case \"VoidType\":\n            return actual1.tag === actual2.tag;\n        case \"ArrayType\":\n        case \"PointerType\":\n            return actual1.tag === actual2.tag && equalTypes(genv, actual1.argument, actual2.argument);\n        case \"StructType\":\n            return actual1.tag === actual2.tag && actual1.id.name === actual2.id.name;\n        case \"NamedFunctionType\":\n            return actual1.tag === actual2.tag && actual1.definition.id.name === actual2.definition.id.name;\n        default:\n            return impossible_1.impossible(actual1);\n    }\n}\nexports.equalTypes = equalTypes;\nfunction equalFunctionTypes(genv, decl1, decl2) {\n    if (!equalTypes(genv, decl1.returns, decl2.returns))\n        return false;\n    if (decl1.params.length !== decl2.params.length)\n        return false;\n    for (let i = 0; i < decl1.params.length; i++) {\n        if (!equalTypes(genv, decl1.params[i].kind, decl2.params[i].kind))\n            return false;\n    }\n    return true;\n}\nexports.equalFunctionTypes = equalFunctionTypes;\n/**\n * Least upper bound is only used by e ? e1 : e2, to determine the type of e1 and e2 from the type of e\n */\nfunction leastUpperBoundType(genv, t1, t2) {\n    const actual1 = globalenv_1.actualType(genv, t1);\n    const actual2 = globalenv_1.actualType(genv, t2);\n    switch (actual1.tag) {\n        case \"IntType\":\n        case \"BoolType\":\n        case \"StringType\":\n        case \"CharType\":\n        case \"VoidType\":\n            return actual1.tag === actual2.tag ? t1 : null;\n        case \"ArrayType\":\n        case \"PointerType\": {\n            if (actual1.tag !== actual2.tag)\n                return null;\n            const sublub = leastUpperBoundType(genv, actual1.argument, actual2.argument);\n            if (sublub === null)\n                return null;\n            return actual1.tag === \"ArrayType\"\n                ? { tag: actual1.tag, argument: sublub }\n                : { tag: actual1.tag, argument: sublub };\n        }\n        case \"StructType\":\n            return actual1.tag === actual2.tag && actual1.id.name === actual2.id.name ? t1 : null;\n        case \"NamedFunctionType\":\n            return actual1.tag === actual2.tag && actual1.definition.id.name === actual2.definition.id.name\n                ? t1\n                : null;\n        default:\n            return impossible_1.impossible(actual1);\n    }\n}\n/**\n * Almost entirely here to deal with the mess that is functions, and only (seemingly) because of conditionals.\n * (Perhaps this function can be reused for equality comparisions?)\n */\nfunction leastUpperBoundSynthedType(genv, t1, t2) {\n    if (t1.tag === \"AmbiguousNullPointer\" || t2.tag === \"AmbiguousNullPointer\") {\n        if (t1.tag === t2.tag)\n            return t1;\n        if (t1.tag === \"AnonymousFunctionTypePointer\")\n            return t1;\n        if (t2.tag === \"AnonymousFunctionTypePointer\")\n            return t2;\n        if (t1.tag === \"NamedFunctionType\")\n            return null;\n        if (t2.tag === \"NamedFunctionType\")\n            return null;\n        if (t1.tag !== \"AmbiguousNullPointer\" && globalenv_1.actualType(genv, t1).tag === \"PointerType\")\n            return t1;\n        if (t2.tag !== \"AmbiguousNullPointer\" && globalenv_1.actualType(genv, t2).tag === \"PointerType\")\n            return t2;\n        return null;\n    }\n    if (t1.tag === \"AnonymousFunctionTypePointer\") {\n        if (t2.tag === \"AnonymousFunctionTypePointer\") {\n            return equalFunctionTypes(genv, t1.definition, t2.definition) ? t1 : null;\n        }\n        else if (t2.tag === \"NamedFunctionType\") {\n            return error_1.error(`Named function type ${t2.definition.id.name} is not equal to a function pointer`, \"don't dereference the function pointer\");\n        }\n        else {\n            const actual2 = globalenv_1.actualType(genv, t2);\n            if (actual2.tag !== \"PointerType\")\n                return null;\n            const actual2arg = globalenv_1.actualType(genv, actual2.argument);\n            if (actual2arg.tag !== \"NamedFunctionType\")\n                return null;\n            return equalFunctionTypes(genv, t1.definition, actual2arg.definition) ? t1 : null;\n        }\n    }\n    else if (t2.tag === \"AnonymousFunctionTypePointer\") {\n        if (t1.tag === \"NamedFunctionType\") {\n            return error_1.error(`Named function type ${t1.definition.id.name} is not equal to a function pointer`, `try not dereferencing ${t1.definition.id.name}`);\n        }\n        else {\n            const actual1 = globalenv_1.actualType(genv, t1);\n            if (actual1.tag !== \"PointerType\")\n                return null;\n            const actual1arg = globalenv_1.actualType(genv, actual1.argument);\n            if (actual1arg.tag !== \"NamedFunctionType\")\n                return null;\n            return equalFunctionTypes(genv, actual1arg.definition, t2.definition) ? t2 : null;\n        }\n    }\n    else if (t1.tag === \"NamedFunctionType\" || t2.tag === \"NamedFunctionType\") {\n        return t1.tag === \"NamedFunctionType\" &&\n            t2.tag === \"NamedFunctionType\" &&\n            t1.definition.id.name == t2.definition.id.name\n            ? t1\n            : null;\n    }\n    else {\n        return leastUpperBoundType(genv, t1, t2);\n    }\n}\nexports.leastUpperBoundSynthedType = leastUpperBoundSynthedType;\n/**\n * Checks that a value of the abstract type is usable in a hole requiring the concrete type:\n * in other words, checks that abstract <: concrete, where \"<:\" is the usual subtyping relationship.\n */\nfunction isSubtype(genv, abstract, concrete) {\n    const actualConcrete = globalenv_1.actualType(genv, concrete);\n    const actualAbstract = actualSynthed(genv, abstract);\n    switch (actualAbstract.tag) {\n        case \"IntType\":\n        case \"BoolType\":\n        case \"StringType\":\n        case \"CharType\":\n        case \"VoidType\":\n            return actualAbstract.tag === actualConcrete.tag;\n        case \"PointerType\":\n            return (actualConcrete.tag === \"PointerType\" &&\n                isSubtype(genv, actualAbstract.argument, actualConcrete.argument));\n        case \"ArrayType\":\n            return (actualConcrete.tag === \"ArrayType\" &&\n                isSubtype(genv, actualAbstract.argument, actualConcrete.argument));\n        case \"StructType\":\n            return actualConcrete.tag === \"StructType\" && actualAbstract.id.name === actualConcrete.id.name;\n        case \"NamedFunctionType\":\n            return (actualConcrete.tag === \"NamedFunctionType\" &&\n                actualAbstract.definition.id.name === actualConcrete.definition.id.name);\n        case \"AmbiguousNullPointer\":\n            return actualConcrete.tag === \"PointerType\";\n        case \"NamedFunctionType\":\n            return (actualConcrete.tag === \"NamedFunctionType\" &&\n                actualAbstract.definition.id.name === actualConcrete.definition.id.name);\n        case \"AnonymousFunctionTypePointer\":\n            if (actualConcrete.tag !== \"PointerType\")\n                return false;\n            const concreteFunctionType = globalenv_1.actualType(genv, actualConcrete.argument);\n            return (concreteFunctionType.tag === \"NamedFunctionType\" &&\n                equalFunctionTypes(genv, actualAbstract.definition, concreteFunctionType.definition));\n        default:\n            return impossible_1.impossible(actualAbstract);\n    }\n}\nexports.isSubtype = isSubtype;\n/**\n * Ensures that a type is not void or (recursively) void[]\n */\nfunction checkTypeIsNotVoid(genv, tp) {\n    const actual = globalenv_1.actualType(genv, tp);\n    switch (actual.tag) {\n        case \"VoidType\":\n            return error_1.error(\"illegal use of type 'void'\", \"'void' can only be used as a return type for functions\");\n        case \"PointerType\": {\n            if (actual.argument.tag === \"VoidType\")\n                return;\n            return checkTypeIsNotVoid(genv, actual.argument);\n        }\n        case \"ArrayType\":\n            return checkTypeIsNotVoid(genv, actual.argument);\n        case \"IntType\":\n        case \"BoolType\":\n        case \"StringType\":\n        case \"CharType\":\n        case \"StructType\": // Always okay, even if not defined\n        case \"NamedFunctionType\": // This case is actually impossible\n            return;\n        default:\n            return impossible_1.impossible(actual);\n    }\n}\nexports.checkTypeIsNotVoid = checkTypeIsNotVoid;\n/**\n * Asserts type mentioned in variable declaration or function argument has small type\n */\nfunction checkTypeInDeclaration(genv, tp, isFunctionArg) {\n    const actual = globalenv_1.actualType(genv, tp);\n    switch (actual.tag) {\n        case \"StructType\": {\n            return error_1.error(`type struct ${actual.id.name} not small`, isFunctionArg\n                ? \"cannot pass structs to or from functions; use pointers\"\n                : \"cannot store structs as locals; use pointers\");\n        }\n        case \"NamedFunctionType\": {\n            return error_1.error(`Function type ${actual.definition.id.name} is not small`, isFunctionArg\n                ? \"cannot pass functions directly to or from functions; use pointers\"\n                : \"cannot store functions as locals; store a function pointer\");\n        }\n        default:\n            return checkTypeIsNotVoid(genv, tp);\n    }\n}\nexports.checkTypeInDeclaration = checkTypeInDeclaration;\n/**\n * Checks that a function return type is valid (void or small)\n */\nfunction checkFunctionReturnType(genv, t) {\n    switch (t.tag) {\n        case \"VoidType\":\n            return;\n        default:\n            return checkTypeInDeclaration(genv, t, true);\n    }\n}\nexports.checkFunctionReturnType = checkFunctionReturnType;\n/**\n * Checks whether a type is fully defined - whether all its constituent struct parts are\n * Returns the undefined struct as a string if the type is not fully defined (for the error message)\n */\nfunction typeSizeFullyDefined(genv, t) {\n    const actual = globalenv_1.actualType(genv, t);\n    switch (actual.tag) {\n        case \"IntType\":\n        case \"BoolType\":\n        case \"StringType\":\n        case \"CharType\":\n        case \"VoidType\":\n        case \"ArrayType\":\n        case \"PointerType\":\n        case \"NamedFunctionType\":\n            return null;\n        case \"StructType\": {\n            const defn = globalenv_1.getStructDefinition(genv, actual.id.name);\n            if (defn === null || defn.definitions === null)\n                return actual.id.name;\n            return null;\n        }\n        default:\n            return impossible_1.impossible(actual);\n    }\n}\nexports.typeSizeFullyDefined = typeSizeFullyDefined;\n"
    },
    {
      "id": 4,
      "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/globalenv.ts",
      "name": "./src/typecheck/globalenv.ts",
      "index": 14,
      "index2": 12,
      "size": 3042,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
      "issuerId": 12,
      "issuerName": "./src/typecheck/programs.ts",
      "issuerPath": [
        {
          "id": 19,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "name": "./src/demo/demo.ts",
          "profile": {
            "factory": 64,
            "building": 1924
          }
        },
        {
          "id": 12,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "name": "./src/typecheck/programs.ts",
          "profile": {
            "factory": 288,
            "building": 665,
            "dependencies": 114
          }
        }
      ],
      "profile": {
        "factory": 703,
        "building": 8,
        "dependencies": 347
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": 3,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/types.ts",
          "module": "./src/typecheck/types.ts",
          "moduleName": "./src/typecheck/types.ts",
          "type": "cjs require",
          "userRequest": "./globalenv",
          "loc": "5:20-42"
        },
        {
          "moduleId": 5,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/expressions.ts",
          "module": "./src/typecheck/expressions.ts",
          "moduleName": "./src/typecheck/expressions.ts",
          "type": "cjs require",
          "userRequest": "./globalenv",
          "loc": "5:20-42"
        },
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "module": "./src/typecheck/programs.ts",
          "moduleName": "./src/typecheck/programs.ts",
          "type": "cjs require",
          "userRequest": "./globalenv",
          "loc": "6:20-42"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [
        "ModuleConcatenation bailout: Module is not an ECMAScript module"
      ],
      "depth": 2,
      "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst immutable_1 = require(\"immutable\");\nfunction getTypeDef(genv, t) {\n    for (let decl of genv.decls) {\n        if (decl.tag === \"TypeDefinition\" && decl.definition.id.name === t) {\n            return decl.definition.kind;\n        }\n        else if (decl.tag === \"FunctionTypeDefinition\" && decl.definition.id.name === t) {\n            return {\n                tag: \"NamedFunctionType\",\n                definition: decl.definition\n            };\n        }\n    }\n    return null;\n}\nexports.getTypeDef = getTypeDef;\nexports.initMain = {\n    libstructs: immutable_1.Set(),\n    libfuncs: immutable_1.Set(),\n    decls: immutable_1.List([\n        {\n            tag: \"FunctionDeclaration\",\n            returns: { tag: \"IntType\" },\n            id: { tag: \"Identifier\", name: \"main\" },\n            params: [],\n            preconditions: [],\n            postconditions: [],\n            body: null\n        }\n    ])\n};\nfunction addDecl(library, genv, decl) {\n    return {\n        libstructs: library && decl.tag == \"StructDeclaration\" ? genv.libstructs.add(decl.id.name) : genv.libstructs,\n        libfuncs: library && decl.tag == \"FunctionDeclaration\" ? genv.libfuncs.add(decl.id.name) : genv.libfuncs,\n        decls: genv.decls.push(decl)\n    };\n}\nexports.addDecl = addDecl;\nfunction isLibraryFunction(genv, t) {\n    return genv.libfuncs.has(t);\n}\nexports.isLibraryFunction = isLibraryFunction;\nfunction isLibraryStruct(genv, t) {\n    return genv.libfuncs.has(t);\n}\nexports.isLibraryStruct = isLibraryStruct;\nfunction getFunctionDeclaration(genv, t) {\n    let result = null;\n    for (let decl of genv.decls) {\n        if (decl.tag === \"FunctionDeclaration\" && decl.id.name === t) {\n            if (result === null)\n                result = decl;\n            if (decl.body !== null)\n                return decl;\n        }\n    }\n    return result;\n}\nexports.getFunctionDeclaration = getFunctionDeclaration;\nfunction getStructDefinition(genv, t) {\n    let result = null;\n    for (let decl of genv.decls) {\n        if (decl.tag === \"StructDeclaration\" && decl.id.name === t) {\n            if (result === null)\n                result = decl;\n            if (decl.definitions !== null)\n                return decl;\n        }\n    }\n    return result;\n}\nexports.getStructDefinition = getStructDefinition;\n/**\n * Returns a non-Identifier Type based on a type name\n * If parsing is done correctly, this function should only be given type Identifiers,\n * which must have a previous definition.\n */\nfunction expandTypeDef(genv, t) {\n    let tp = getTypeDef(genv, t.name);\n    /* instanbul ignore if */\n    if (tp === null) {\n        throw new Error(`Could not lookup ${t.name} (this should be impossible, please report)`);\n    }\n    else if (tp.tag === \"Identifier\") {\n        return expandTypeDef(genv, tp);\n    }\n    else {\n        return tp;\n    }\n}\nfunction actualType(genv, t) {\n    return t.tag === \"Identifier\" ? expandTypeDef(genv, t) : t;\n}\nexports.actualType = actualType;\n"
    },
    {
      "id": 5,
      "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/expressions.ts",
      "name": "./src/typecheck/expressions.ts",
      "index": 16,
      "index2": 14,
      "size": 20634,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
      "issuerId": 12,
      "issuerName": "./src/typecheck/programs.ts",
      "issuerPath": [
        {
          "id": 19,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "name": "./src/demo/demo.ts",
          "profile": {
            "factory": 64,
            "building": 1924
          }
        },
        {
          "id": 12,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "name": "./src/typecheck/programs.ts",
          "profile": {
            "factory": 288,
            "building": 665,
            "dependencies": 114
          }
        }
      ],
      "profile": {
        "factory": 703,
        "building": 8,
        "dependencies": 347
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": 11,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/statements.ts",
          "module": "./src/typecheck/statements.ts",
          "moduleName": "./src/typecheck/statements.ts",
          "type": "cjs require",
          "userRequest": "./expressions",
          "loc": "6:22-46"
        },
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "module": "./src/typecheck/programs.ts",
          "moduleName": "./src/typecheck/programs.ts",
          "type": "cjs require",
          "userRequest": "./expressions",
          "loc": "8:22-46"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [
        "ModuleConcatenation bailout: Module is not an ECMAScript module"
      ],
      "depth": 2,
      "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst impossible_1 = require(\"@calculemus/impossible\");\nconst error_1 = require(\"./error\");\nconst globalenv_1 = require(\"./globalenv\");\nconst types_1 = require(\"./types\");\n/** Asserts that a synthesized type has small type */\nfunction synthLValue(genv, env, mode, exp) {\n    let synthedType = synthExpression(genv, env, mode, exp);\n    switch (synthedType.tag) {\n        case \"AmbiguousNullPointer\":\n            return error_1.error(`LValue cannot be null (should be impossible, please report)`);\n        case \"AnonymousFunctionTypePointer\":\n            return error_1.error(`LValue cannot be address-of (should be impossible, please report)`);\n        case \"NamedFunctionType\":\n            return error_1.error(`LValue has function type ${synthedType.definition.id.name}, which is not small`);\n        case \"VoidType\":\n            return error_1.error(`LValue cannot have void type`);\n    }\n    let actualSynthedType = globalenv_1.actualType(genv, synthedType);\n    switch (actualSynthedType.tag) {\n        case \"StructType\": {\n            return error_1.error(`assignment uses has type 'struct ${actualSynthedType.id.name}', which is not small`, \"Assign the parts of the struct individually\");\n        }\n        case \"NamedFunctionType\":\n            return error_1.error(`LValue has function type ${actualSynthedType.definition.id.name}, which is not small`);\n        default:\n            return synthedType;\n    }\n}\nexports.synthLValue = synthLValue;\nfunction synthExpression(genv, env, mode, exp) {\n    switch (exp.tag) {\n        case \"Identifier\": {\n            const t = env.get(exp.name);\n            if (t === undefined) {\n                return error_1.error(`Undeclared variable ${exp.name}`);\n            }\n            else {\n                return t;\n            }\n        }\n        case \"IntLiteral\":\n            return { tag: \"IntType\" };\n        case \"StringLiteral\":\n            return { tag: \"StringType\" };\n        case \"CharLiteral\":\n            return { tag: \"CharType\" };\n        case \"BoolLiteral\":\n            return { tag: \"BoolType\" };\n        case \"NullLiteral\":\n            return { tag: \"AmbiguousNullPointer\" };\n        case \"ArrayMemberExpression\": {\n            let objectType = synthExpression(genv, env, mode, exp.object);\n            if (objectType.tag === \"AmbiguousNullPointer\" ||\n                objectType.tag === \"AnonymousFunctionTypePointer\" ||\n                objectType.tag === \"NamedFunctionType\")\n                return error_1.error(\"subject of indexing '[...]' not an array\"); // TODO: \"inferred type t1\"\n            let actualObjectType = globalenv_1.actualType(genv, objectType);\n            if (actualObjectType.tag !== \"ArrayType\") {\n                return error_1.error(\"subject of indexing '[...]' not an array\"); // TODO: \"inferred type t1\"\n            }\n            else {\n                checkExpression(genv, env, mode, exp.index, { tag: \"IntType\" });\n                return actualObjectType.argument;\n            }\n        }\n        case \"StructMemberExpression\": {\n            let objectType = synthExpression(genv, env, mode, exp.object);\n            if (objectType.tag === \"AmbiguousNullPointer\" ||\n                objectType.tag === \"AnonymousFunctionTypePointer\" ||\n                objectType.tag === \"NamedFunctionType\")\n                return error_1.error(`can only dereference structs and pointers to structs`);\n            let actualObjectType = globalenv_1.actualType(genv, objectType);\n            if (exp.deref) {\n                if (actualObjectType.tag === \"StructType\")\n                    return error_1.error(`cannot dereference non-pointer struct with e->${exp.field.name}`, `try e.${exp.field.name}`);\n                if (actualObjectType.tag !== \"PointerType\")\n                    return error_1.error(\"can only dereference structs and pointers to structs\");\n                actualObjectType = globalenv_1.actualType(genv, actualObjectType.argument);\n            }\n            if (actualObjectType.tag !== \"StructType\")\n                return error_1.error(`subject of ${exp.deref ? \"->\" : \".\"}${exp.field.name} not a struct${exp.deref ? \" pointer\" : \"\"}`); // TODO add inferred type\n            let structDef = globalenv_1.getStructDefinition(genv, actualObjectType.id.name);\n            if (structDef === null)\n                return error_1.error(`'struct ${actualObjectType.id.name}' not defined`);\n            if (structDef.definitions === null)\n                return error_1.error(`'struct ${actualObjectType.id.name}' declared but not defined`);\n            for (let field of structDef.definitions) {\n                if (field.id.name === exp.field.name)\n                    return field.kind;\n            }\n            return error_1.error(`field '${exp.field.name}' not declared in 'struct ${actualObjectType.id.name}'`);\n        }\n        case \"CallExpression\": {\n            if (env.has(exp.callee.name))\n                return error_1.error(`variable ${exp.callee.name} used as function`, `if ${exp.callee.name} is a function pointer, try try (*${exp.callee.name})(...)  instead of ${exp.callee.name}(...)`);\n            const func = globalenv_1.getFunctionDeclaration(genv, exp.callee.name);\n            if (func === null)\n                return error_1.error(`undeclared function ${exp.callee.name}`);\n            if (exp.arguments.length !== func.params.length)\n                return error_1.error(`function ${exp.callee.name} requires ${func.params.length} argument${func.params.length === 1 ? \"\" : \"s\"} but was given ${exp.arguments.length}`);\n            exp.arguments.forEach((exp, i) => checkExpression(genv, env, mode, exp, func.params[i].kind));\n            return func.returns;\n        }\n        case \"IndirectCallExpression\": {\n            const callType = synthExpression(genv, env, mode, exp.callee);\n            if (callType.tag === \"AnonymousFunctionTypePointer\")\n                return error_1.error(\"Functions pointers must be stored in locals before they are called\");\n            if (callType.tag === \"AmbiguousNullPointer\")\n                return error_1.error(\"Cannot call NULL as a function\");\n            if (callType.tag === \"NamedFunctionType\")\n                return error_1.error(`Can only call pointers to functions, the function type '${callType.definition.id.name}' is not a pointer`);\n            const actualCallType = globalenv_1.actualType(genv, callType);\n            if (actualCallType.tag !== \"PointerType\")\n                return error_1.error(\"Only pointers to functions can be called\");\n            const actualFunctionType = globalenv_1.actualType(genv, actualCallType.argument);\n            if (actualFunctionType.tag !== \"NamedFunctionType\")\n                return error_1.error(\"Only pointers to functions can be called\");\n            if (exp.arguments.length !== actualFunctionType.definition.params.length)\n                return error_1.error(`function pointer call requires ${actualFunctionType.definition.params.length} argument${actualFunctionType.definition.params.length === 1 ? \"\" : \"s\"} but was given ${exp.arguments.length}`);\n            exp.arguments.forEach((exp, i) => checkExpression(genv, env, mode, exp, actualFunctionType.definition.params[i].kind));\n            return actualFunctionType.definition.returns;\n        }\n        case \"CastExpression\": {\n            const castType = globalenv_1.actualType(genv, exp.kind);\n            if (castType.tag !== \"PointerType\")\n                return error_1.error(\"Type of cast must be a pointer or void*\"); // TODO what was the type\n            const argumentType = synthExpression(genv, env, mode, exp.argument);\n            if (argumentType.tag === \"AmbiguousNullPointer\")\n                return exp.kind; // NULL cast always ok\n            if (argumentType.tag === \"NamedFunctionType\" ||\n                argumentType.tag == \"AnonymousFunctionTypePointer\")\n                return error_1.error(\"Only function pointers with assigned types can be cast to 'void*'\", \"assign to a variable and then cast to 'void*'\");\n            const expandedArgumentType = globalenv_1.actualType(genv, argumentType);\n            if (expandedArgumentType.tag !== \"PointerType\")\n                return error_1.error(\"Only pointer and void* types can be cast\"); // TODO what was the type\n            if (castType.argument.tag === \"VoidType\") {\n                if (expandedArgumentType.argument.tag === \"VoidType\")\n                    return error_1.error(\"Casting a void* as a void* not permitted\\n\");\n            }\n            else if (expandedArgumentType.argument.tag !== \"VoidType\") {\n                return error_1.error(\"Only casts to or from void* allowed\");\n            }\n            return exp.kind;\n        }\n        case \"UnaryExpression\": {\n            switch (exp.operator) {\n                case \"!\": {\n                    checkExpression(genv, env, mode, exp.argument, { tag: \"BoolType\" });\n                    return { tag: \"BoolType\" };\n                }\n                case \"&\": {\n                    if (exp.argument.tag !== \"Identifier\")\n                        return error_1.error(\"Address-of operation '&' can only be applied directly to a function name\");\n                    const definition = globalenv_1.getFunctionDeclaration(genv, exp.argument.name);\n                    if (definition === null)\n                        return error_1.error(`There is no function named ${exp.argument.name}`);\n                    if (env.has(exp.argument.name))\n                        return error_1.error(`Cannot take the address of function ${exp.argument.name} when it is also the name of a local`);\n                    return { tag: \"AnonymousFunctionTypePointer\", definition: definition };\n                }\n                case \"~\":\n                case \"-\": {\n                    checkExpression(genv, env, mode, exp.argument, { tag: \"IntType\" });\n                    return { tag: \"IntType\" };\n                }\n                case \"*\": {\n                    const pointerType = synthExpression(genv, env, mode, exp.argument);\n                    if (pointerType.tag === \"AmbiguousNullPointer\")\n                        return error_1.error(\"cannot dereference NULL\");\n                    if (pointerType.tag === \"AnonymousFunctionTypePointer\")\n                        return error_1.error(\"Cannot dereference a pointer\", \"assign it to a variable first\");\n                    if (pointerType.tag === \"NamedFunctionType\")\n                        return error_1.error(\"You only dereference a function pointer when that function is being called\");\n                    const actualPointerType = globalenv_1.actualType(genv, pointerType);\n                    switch (actualPointerType.tag) {\n                        case \"PointerType\": {\n                            if (actualPointerType.argument.tag === \"VoidType\") {\n                                return error_1.error(\"cannot dereference value of type 'void*'\", \"cast to another pointer type with '(t*)'\");\n                            }\n                            else {\n                                return actualPointerType.argument;\n                            }\n                        }\n                        default:\n                            return error_1.error(\"subject of '*' not a pointer\"); // TODO: inferred type\n                    }\n                }\n                default:\n                    return impossible_1.impossible(exp.operator);\n            }\n        }\n        case \"BinaryExpression\": {\n            switch (exp.operator) {\n                case \"*\":\n                case \"/\":\n                case \"%\":\n                case \"+\":\n                case \"-\":\n                case \"<<\":\n                case \">>\":\n                case \"&\":\n                case \"^\":\n                case \"|\": {\n                    checkExpression(genv, env, mode, exp.left, { tag: \"IntType\" });\n                    checkExpression(genv, env, mode, exp.right, { tag: \"IntType\" });\n                    return { tag: \"IntType\" };\n                }\n                case \"<\":\n                case \"<=\":\n                case \">=\":\n                case \">\": {\n                    const leftType = synthExpression(genv, env, mode, exp.left);\n                    if (leftType.tag === \"AmbiguousNullPointer\")\n                        return error_1.error(`Cannot compare pointers with ${exp.operator}`);\n                    if (leftType.tag === \"AnonymousFunctionTypePointer\")\n                        return error_1.error(`Cannot compare function pointers with ${exp.operator}`);\n                    if (leftType.tag === \"NamedFunctionType\")\n                        return error_1.error(\"Cannot compare functions for inequality\");\n                    switch (globalenv_1.actualType(genv, leftType).tag) {\n                        case \"IntType\":\n                        case \"CharType\": {\n                            checkExpression(genv, env, mode, exp.right, leftType);\n                            return { tag: \"BoolType\" };\n                        }\n                        case \"StringType\": {\n                            return error_1.error(`cannot compare strings with '${exp.operator}'`, \"use string_compare in library <string>\");\n                        }\n                        default: {\n                            return error_1.error(`cannot compare with '${exp.operator}' at this type`, `only values of type 'int' and 'char' can be used with '${exp.operator}'`); // TODO which type\n                        }\n                    }\n                }\n                case \"==\":\n                case \"!=\": {\n                    const left = synthExpression(genv, env, mode, exp.left);\n                    switch (left.tag) {\n                        case \"AmbiguousNullPointer\": {\n                            const right = synthExpression(genv, env, mode, exp.right);\n                            if (right.tag === \"AmbiguousNullPointer\")\n                                return { tag: \"BoolType\" };\n                            if (right.tag === \"AnonymousFunctionTypePointer\")\n                                return { tag: \"BoolType\" };\n                            if (right.tag === \"NamedFunctionType\")\n                                return error_1.error(\"cannot compare NULL and a function\");\n                            if (globalenv_1.actualType(genv, right).tag === \"PointerType\")\n                                return { tag: \"BoolType\" };\n                            else\n                                return error_1.error(`cannot compare 'NULL' to a non-pointer type with ${exp.operator}`);\n                        }\n                        case \"AnonymousFunctionTypePointer\": {\n                            const right = synthExpression(genv, env, mode, exp.right);\n                            if (right.tag === \"AmbiguousNullPointer\")\n                                return { tag: \"BoolType\" };\n                            return error_1.error(\"can only compare an function pointer '&f' against NULL\");\n                        }\n                    }\n                    const actualLeft = globalenv_1.actualType(genv, left);\n                    switch (actualLeft.tag) {\n                        case \"NamedFunctionType\":\n                            return error_1.error(`cannot compare functions for equality directly with ${exp.operator}`);\n                        case \"StructType\":\n                            return error_1.error(`cannot compare structs for equality directly with ${exp.operator}`, \"pointers to struts can be compared\");\n                        case \"VoidType\":\n                            return error_1.error(`cannot compare void expressions for equality`);\n                        case \"StringType\":\n                            return error_1.error(`cannot compare strings with '${exp.operator}'`, \"try using string_equal in library <string>\");\n                    }\n                    checkExpression(genv, env, mode, exp.right, actualLeft);\n                    return { tag: \"BoolType\" };\n                }\n                default:\n                    return impossible_1.impossible(exp.operator);\n            }\n        }\n        case \"LogicalExpression\": {\n            checkExpression(genv, env, mode, exp.left, { tag: \"BoolType\" });\n            checkExpression(genv, env, mode, exp.right, { tag: \"BoolType\" });\n            return { tag: \"BoolType\" };\n        }\n        case \"ConditionalExpression\": {\n            checkExpression(genv, env, mode, exp.test, { tag: \"BoolType\" });\n            const left = synthExpression(genv, env, mode, exp.consequent);\n            const right = synthExpression(genv, env, mode, exp.alternate);\n            const lub = types_1.leastUpperBoundSynthedType(genv, left, right);\n            if (lub === null)\n                return error_1.error(\"Branches of ternary expression 'e ? e1 : e2' have incompatible types\"); // todo types\n            const actualLub = types_1.actualSynthed(genv, lub);\n            switch (actualLub.tag) {\n                case \"VoidType\":\n                    return error_1.error(\"condition expression branches cannot have void type\");\n                case \"NamedFunctionType\":\n                    return error_1.error(`functions with type ${actualLub.definition.id.name} cannot be returned from a conditional`, \"use function pointers\");\n                case \"StructType\":\n                    return error_1.error(`values of type 'struct${actualLub.id.name}' cannot be used in a conditional`, \"use struct pointers\");\n            }\n            return lub;\n        }\n        case \"AllocExpression\": {\n            const undefinedTypePart = types_1.typeSizeFullyDefined(genv, exp.kind);\n            if (undefinedTypePart !== null)\n                return error_1.error(\"cannot allocate an undefined type\", `give a definition for 'struct ${undefinedTypePart}`);\n            return { tag: \"PointerType\", argument: exp.kind };\n        }\n        case \"AllocArrayExpression\": {\n            const undefinedTypePart = types_1.typeSizeFullyDefined(genv, exp.kind);\n            if (undefinedTypePart !== null)\n                return error_1.error(\"cannot allocate an undefined type\", `give a definition for 'struct ${undefinedTypePart}`);\n            checkExpression(genv, env, mode, exp.size, { tag: \"IntType\" });\n            return { tag: \"ArrayType\", argument: exp.kind };\n        }\n        case \"ResultExpression\": {\n            if (mode === null)\n                return error_1.error(\"\\\\result illegal in ordinary expressions\", \"use only in @ensures annotations\");\n            else if (mode.tag === \"@ensures\") {\n                if (mode.returns.tag === \"VoidType\") {\n                    return error_1.error(\"\\\\result illegal in functions that return 'void'\");\n                }\n                else {\n                    return mode.returns;\n                }\n            }\n            else {\n                return error_1.error(`\\\\result illegal in ${mode.tag} annotations`, \"use only in @ensures annotations\");\n            }\n        }\n        case \"LengthExpression\": {\n            if (mode === null)\n                return error_1.error(\"\\\\length illegal in ordinary expressions\", \"use only in annotations\");\n            const tp = synthExpression(genv, env, mode, exp.argument);\n            if (tp.tag !== \"ArrayType\") {\n                return error_1.error(\"argument to \\\\length not an array\");\n            }\n            else {\n                return { tag: \"IntType\" };\n            }\n        }\n        case \"HasTagExpression\": {\n            if (mode === null)\n                return error_1.error(\"\\\\hastag illegal in ordinary expressions\", \"use only in annotations\");\n            if (exp.kind.tag !== \"PointerType\")\n                return error_1.error(\"tag must be a pointer type\"); // TODO prettyprint;\n            if (exp.kind.argument.tag === \"VoidType\")\n                return error_1.error(\"tag can never be 'void*'\");\n            const tp = synthExpression(genv, env, mode, exp.argument);\n            if (tp.tag !== \"PointerType\" || tp.argument.tag !== \"VoidType\") {\n                return error_1.error(\"tagged expression must have type void*\"); // TODO inferred\n            }\n        }\n        default:\n            return impossible_1.impossible(exp);\n    }\n}\nexports.synthExpression = synthExpression;\nfunction checkExpression(genv, env, mode, exp, tp) {\n    const synthed = synthExpression(genv, env, mode, exp);\n    if (!types_1.isSubtype(genv, synthed, tp)) {\n        return error_1.error(\"type mismatch\"); // TODO: expected/found\n    }\n}\nexports.checkExpression = checkExpression;\n"
    },
    {
      "id": 6,
      "identifier": "/Users/robs/r/jaco/lib/parser-util.js",
      "name": "./lib/parser-util.js",
      "index": 10,
      "index2": 7,
      "size": 12120,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "issuer": "/Users/robs/r/jaco/lib/expression-rules.js",
      "issuerId": 14,
      "issuerName": "./lib/expression-rules.js",
      "issuerPath": [
        {
          "id": 19,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "name": "./src/demo/demo.ts",
          "profile": {
            "factory": 64,
            "building": 1924
          }
        },
        {
          "id": 18,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
          "name": "./src/parse.ts",
          "profile": {
            "factory": 288,
            "building": 665,
            "dependencies": 114
          }
        },
        {
          "id": 14,
          "identifier": "/Users/robs/r/jaco/lib/expression-rules.js",
          "name": "./lib/expression-rules.js",
          "profile": {
            "factory": 808,
            "building": 8,
            "dependencies": 637
          }
        }
      ],
      "profile": {
        "factory": 30,
        "building": 12,
        "dependencies": 21
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": 13,
          "moduleIdentifier": "/Users/robs/r/jaco/lib/program-rules.js",
          "module": "./lib/program-rules.js",
          "moduleName": "./lib/program-rules.js",
          "type": "cjs require",
          "userRequest": "./parser-util",
          "loc": "7:13-37"
        },
        {
          "moduleId": 14,
          "moduleIdentifier": "/Users/robs/r/jaco/lib/expression-rules.js",
          "module": "./lib/expression-rules.js",
          "moduleName": "./lib/expression-rules.js",
          "type": "cjs require",
          "userRequest": "./parser-util",
          "loc": "7:13-37"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [
        "ModuleConcatenation bailout: Module is not an ECMAScript module"
      ],
      "depth": 3,
      "source": "\"use strict\";\n/**\n * Consumes (and documents) the messy output produced by the parser, and turns it into parsedsyntax.ts types.\n * This file could easily produce garbage output if there's a mismatch between the documented types and the types\n * that the parser produces. This file should only throw errors to document invariants of the parser; user\n * errors should be thrown in restrictsyntax.ts.\n *\n * The structure of this file should match parsedsyntax.ts as much as practical.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction Identifier([{ value, text, offset, lineBreaks, line, col }]) {\n    return {\n        tag: \"Identifier\",\n        name: text\n    };\n}\nexports.Identifier = Identifier;\nfunction IntType([tok]) {\n    return {\n        tag: \"IntType\"\n    };\n}\nexports.IntType = IntType;\nfunction BoolType([tok]) {\n    return {\n        tag: \"BoolType\"\n    };\n}\nexports.BoolType = BoolType;\nfunction StringType([tok]) {\n    return {\n        tag: \"StringType\"\n    };\n}\nexports.StringType = StringType;\nfunction CharType([tok]) {\n    return {\n        tag: \"CharType\"\n    };\n}\nexports.CharType = CharType;\nfunction VoidType([tok]) {\n    return {\n        tag: \"VoidType\"\n    };\n}\nexports.VoidType = VoidType;\nfunction PointerType([tp, s, tok]) {\n    return {\n        tag: \"PointerType\",\n        argument: tp\n    };\n}\nexports.PointerType = PointerType;\nfunction ArrayType([tp, s1, l, s2, r]) {\n    return {\n        tag: \"ArrayType\",\n        argument: tp\n    };\n}\nexports.ArrayType = ArrayType;\nfunction StructType([str, s, id]) {\n    return {\n        tag: \"StructType\",\n        id: id\n    };\n}\nexports.StructType = StructType;\nfunction IntLiteral([{ value, text, offset, lineBreaks, line, col }]) {\n    return {\n        tag: \"IntLiteral\",\n        raw: text\n    };\n}\nexports.IntLiteral = IntLiteral;\nfunction CharLiteral([[start, [tok], end]]) {\n    return {\n        tag: \"CharLiteral\",\n        raw: tok.value\n    };\n}\nexports.CharLiteral = CharLiteral;\nfunction StringLiteral([[start, toks, end]]) {\n    return {\n        tag: \"StringLiteral\",\n        raw: toks.map(x => x[0].value)\n    };\n}\nexports.StringLiteral = StringLiteral;\nfunction BoolLiteral([t]) {\n    return {\n        tag: \"BoolLiteral\",\n        value: t.value === \"true\"\n    };\n}\nexports.BoolLiteral = BoolLiteral;\nfunction NullLiteral() {\n    return {\n        tag: \"NullLiteral\"\n    };\n}\nexports.NullLiteral = NullLiteral;\nfunction ArrayMemberExpression([object, s1, l, s2, index, s3, r]) {\n    return {\n        tag: \"ArrayMemberExpression\",\n        object: object,\n        index: index\n    };\n}\nexports.ArrayMemberExpression = ArrayMemberExpression;\nfunction Arguments([l, s1, args, r]) {\n    if (args === null)\n        return [];\n    return [args[0]].concat(args[1].map(x => x[3]));\n}\nexports.Arguments = Arguments;\nfunction StructMemberExpression([object, s1, deref, s2, field]) {\n    return {\n        tag: \"StructMemberExpression\",\n        deref: deref instanceof Array,\n        object: object,\n        field: field\n    };\n}\nexports.StructMemberExpression = StructMemberExpression;\nfunction CallExpression([f, ws, args]) {\n    return {\n        tag: \"CallExpression\",\n        callee: f,\n        arguments: Arguments(args)\n    };\n}\nexports.CallExpression = CallExpression;\nfunction IndirectCallExpression([l, s1, s, s2, f, s3, r, s4, args]) {\n    return {\n        tag: \"IndirectCallExpression\",\n        callee: f,\n        arguments: Arguments(args)\n    };\n}\nexports.IndirectCallExpression = IndirectCallExpression;\nfunction UnaryExpression([operator, s, argument]) {\n    if (operator.length == 1) {\n        switch (operator[0].value) {\n            case \"&\":\n            case \"!\":\n            case \"~\":\n            case \"-\":\n            case \"*\":\n                return {\n                    tag: \"UnaryExpression\",\n                    operator: operator[0].value,\n                    argument: argument\n                };\n            default:\n                throw new Error(operator[0].value);\n        }\n    }\n    else {\n        return {\n            tag: \"CastExpression\",\n            kind: operator[2],\n            argument: argument\n        };\n    }\n}\nexports.UnaryExpression = UnaryExpression;\nfunction BinaryExpression([left, s1, opertoks, s2, right]) {\n    const operator = opertoks.map((tok) => tok.text).join(\"\");\n    switch (operator) {\n        case \"*\":\n        case \"/\":\n        case \"%\":\n        case \"+\":\n        case \"-\":\n        case \"<<\":\n        case \">>\":\n        case \"<\":\n        case \"<=\":\n        case \">=\":\n        case \">\":\n        case \"==\":\n        case \"!=\":\n        case \"&\":\n        case \"^\":\n        case \"|\":\n            return {\n                tag: \"BinaryExpression\",\n                operator: operator,\n                left: left,\n                right: right\n            };\n        case \"&&\":\n        case \"||\":\n            return {\n                tag: \"LogicalExpression\",\n                operator: operator,\n                left: left,\n                right: right\n            };\n        case \"=\":\n        case \"+=\":\n        case \"-=\":\n        case \"*=\":\n        case \"/=\":\n        case \"%=\":\n        case \"&=\":\n        case \"^=\":\n        case \"|=\":\n        case \"<<=\":\n        case \">>=\":\n            return {\n                tag: \"AssignmentExpression\",\n                operator: operator,\n                left: left,\n                right: right\n            };\n        default:\n            throw new Error(operator);\n    }\n}\nexports.BinaryExpression = BinaryExpression;\nfunction ConditionalExpression([test, s1, op1, s2, consequent, s3, op2, s4, alternate]) {\n    return {\n        tag: \"ConditionalExpression\",\n        test: test,\n        consequent: consequent,\n        alternate: alternate\n    };\n}\nexports.ConditionalExpression = ConditionalExpression;\nfunction AllocExpression([alloc, s1, l, s2, typ, s3, r]) {\n    return {\n        tag: \"AllocExpression\",\n        kind: typ\n    };\n}\nexports.AllocExpression = AllocExpression;\nfunction AllocArrayExpression([alloc, s1, l, s2, typ, s3, c, s4, size, sp, r]) {\n    return {\n        tag: \"AllocArrayExpression\",\n        kind: typ,\n        size: size\n    };\n}\nexports.AllocArrayExpression = AllocArrayExpression;\nfunction ResultExpression([b, res]) {\n    return {\n        tag: \"ResultExpression\"\n    };\n}\nexports.ResultExpression = ResultExpression;\nfunction LengthExpression([b, length, s1, l, s2, argument, s3, r]) {\n    return {\n        tag: \"LengthExpression\",\n        argument: argument\n    };\n}\nexports.LengthExpression = LengthExpression;\nfunction HasTagExpression([b, hastag, s1, l, s2, typ, s3, c, s4, argument, s5, r]) {\n    return {\n        tag: \"HasTagExpression\",\n        kind: typ,\n        argument: argument\n    };\n}\nexports.HasTagExpression = HasTagExpression;\nfunction UpdateExpression([argument, s1, op1, op2]) {\n    return {\n        tag: \"UpdateExpression\",\n        argument: argument,\n        operator: op1.value === \"+\" ? \"++\" : \"--\"\n    };\n}\nexports.UpdateExpression = UpdateExpression;\nfunction AssertExpression([assert, s1, l, s2, test, s3, r]) {\n    return {\n        tag: \"AssertExpression\",\n        test: test\n    };\n}\nexports.AssertExpression = AssertExpression;\nfunction ErrorExpression([error, s1, l, s2, argument, s3, r]) {\n    return {\n        tag: \"ErrorExpression\",\n        argument: argument\n    };\n}\nexports.ErrorExpression = ErrorExpression;\nfunction SimpleStatement([stm, s1, semi]) {\n    if (stm instanceof Array) {\n        const init = stm[3];\n        return {\n            tag: \"VariableDeclaration\",\n            kind: stm[0],\n            id: stm[2],\n            init: init === null ? null : init[3]\n        };\n    }\n    else {\n        return {\n            tag: \"ExpressionStatement\",\n            expression: stm\n        };\n    }\n}\nexports.SimpleStatement = SimpleStatement;\nfunction IfStatement([i, s1, l, s2, test, s3, r, s4, [annos, consequent]]) {\n    return {\n        tag: \"IfStatement\",\n        test: test,\n        consequent: [annos, consequent]\n    };\n}\nexports.IfStatement = IfStatement;\nfunction IfElseStatement([i, s1, l1, s2, test, s3, r, annos1, s4, consequent, s5, e, annos2, s6, alternate]) {\n    return {\n        tag: \"IfStatement\",\n        test: test,\n        consequent: [annos1, consequent],\n        alternate: [annos2, alternate]\n    };\n}\nexports.IfElseStatement = IfElseStatement;\nfunction WhileStatement([w, s1, l, s2, test, s3, r, annos, s4, body]) {\n    return {\n        tag: \"WhileStatement\",\n        test: test,\n        annos: annos,\n        body: body\n    };\n}\nexports.WhileStatement = WhileStatement;\nfunction ForStatement([f, s1, l, init, s2, semi1, s3, test, s4, semi2, update, s5, r, annos, s6, body]) {\n    return {\n        tag: \"ForStatement\",\n        init: init === null ? null : SimpleStatement([init[1], s2, semi1]),\n        test: test,\n        update: update === null ? null : update[1],\n        annos: annos,\n        body: body\n    };\n}\nexports.ForStatement = ForStatement;\nfunction ReturnStatement([r, argument, s1, semi]) {\n    return {\n        tag: \"ReturnStatement\",\n        argument: argument === null ? null : argument[1]\n    };\n}\nexports.ReturnStatement = ReturnStatement;\nfunction BlockStatement([l, stms, annos, s, r]) {\n    const stms1 = stms.map(x => x[1][0].map((y) => ({ tag: \"AnnoStatement\", anno: y })).concat([x[1][1]]));\n    const stms2 = annos.map((x) => ({\n        tag: \"AnnoStatement\",\n        anno: x[1][0]\n    }));\n    const stmsAll = stms1\n        .concat([stms2])\n        .reduce((collect, stms) => collect.concat(stms), []);\n    return {\n        tag: \"BlockStatement\",\n        body: stmsAll\n    };\n}\nexports.BlockStatement = BlockStatement;\nfunction BreakStatement([stm, s1, semi]) {\n    return { tag: \"BreakStatement\" };\n}\nexports.BreakStatement = BreakStatement;\nfunction ContinueStatement([stm, s1, semi]) {\n    return { tag: \"ContinueStatement\" };\n}\nexports.ContinueStatement = ContinueStatement;\nfunction Anno1(annos) {\n    const start = annos[0];\n    const end = annos[5] ? annos[5] : annos[3];\n    if (start.type === \"anno_line_start\" && start.line !== end.line)\n        throw new Error(`Single-line annotations cannot be extended onto multiple lines with multiline comments.`);\n    return annos[2];\n}\nexports.Anno1 = Anno1;\nfunction FunctionDeclarationArgs([l, s1, params, r]) {\n    if (params === null)\n        return [];\n    const first = {\n        tag: \"VariableDeclaration\",\n        kind: params[0],\n        id: params[2]\n    };\n    return [first].concat(params[4].map((x) => ({\n        tag: \"VariableDeclaration\",\n        kind: x[2],\n        id: x[4]\n    })));\n}\nexports.FunctionDeclarationArgs = FunctionDeclarationArgs;\nfunction StructDeclaration([struct, s1, s, s2, semi]) {\n    return {\n        tag: \"StructDeclaration\",\n        id: s,\n        definitions: null\n    };\n}\nexports.StructDeclaration = StructDeclaration;\nfunction StructDefinition([struct, s1, s, s2, l, s3, defs, r, s5, semi]) {\n    return {\n        tag: \"StructDeclaration\",\n        id: s,\n        definitions: defs.map((value) => ({\n            tag: \"VariableDeclaration\",\n            id: value[2],\n            kind: value[0]\n        }))\n    };\n}\nexports.StructDefinition = StructDefinition;\nfunction TypeDefinition([typedef, s1, tp, s2, id]) {\n    return {\n        tag: \"TypeDefinition\",\n        definition: {\n            tag: \"VariableDeclaration\",\n            id: id,\n            kind: tp\n        }\n    };\n}\nexports.TypeDefinition = TypeDefinition;\nfunction FunctionTypeDefinition([typedef, s1, ty, s2, f, s3, args, annos]) {\n    return {\n        tag: \"FunctionTypeDefinition\",\n        definition: {\n            tag: \"FunctionDeclaration\",\n            returns: ty,\n            id: f,\n            params: args,\n            annos: annos,\n            body: null\n        }\n    };\n}\nexports.FunctionTypeDefinition = FunctionTypeDefinition;\nfunction FunctionDeclaration([ty, s1, f, s2, args, annos, s3, def]) {\n    return {\n        tag: \"FunctionDeclaration\",\n        returns: ty,\n        id: f,\n        params: args,\n        annos: annos,\n        body: def\n    };\n}\nexports.FunctionDeclaration = FunctionDeclaration;\n//# sourceMappingURL=parser-util.js.map"
    },
    {
      "id": 7,
      "identifier": "/Users/robs/r/jaco/lib/lex.js",
      "name": "./lib/lex.js",
      "index": 9,
      "index2": 6,
      "size": 7510,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "issuer": "/Users/robs/r/jaco/lib/expression-rules.js",
      "issuerId": 14,
      "issuerName": "./lib/expression-rules.js",
      "issuerPath": [
        {
          "id": 19,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "name": "./src/demo/demo.ts",
          "profile": {
            "factory": 64,
            "building": 1924
          }
        },
        {
          "id": 18,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
          "name": "./src/parse.ts",
          "profile": {
            "factory": 288,
            "building": 665,
            "dependencies": 114
          }
        },
        {
          "id": 14,
          "identifier": "/Users/robs/r/jaco/lib/expression-rules.js",
          "name": "./lib/expression-rules.js",
          "profile": {
            "factory": 808,
            "building": 8,
            "dependencies": 637
          }
        }
      ],
      "profile": {
        "factory": 30,
        "building": 12,
        "dependencies": 21
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": 13,
          "moduleIdentifier": "/Users/robs/r/jaco/lib/program-rules.js",
          "module": "./lib/program-rules.js",
          "moduleName": "./lib/program-rules.js",
          "type": "cjs require",
          "userRequest": "./lex",
          "loc": "6:14-30"
        },
        {
          "moduleId": 14,
          "moduleIdentifier": "/Users/robs/r/jaco/lib/expression-rules.js",
          "module": "./lib/expression-rules.js",
          "moduleName": "./lib/expression-rules.js",
          "type": "cjs require",
          "userRequest": "./lex",
          "loc": "6:14-30"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [
        "ModuleConcatenation bailout: Module is not an ECMAScript module"
      ],
      "depth": 3,
      "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst moo_1 = require(\"moo\");\nconst immutable_1 = require(\"immutable\");\nconst impossible_1 = require(\"../node_modules/@calculemus/impossible\");\n/**\n * Ambitious Goal: \"invalid syntax\" errors from the lexer are unclear. Can we take errors out of the lexer to\n * the point we can clearly enumerate all files that will _not_ be accepted by the lexer? This would also\n * facilitate.\n *\n * Desired spec:\n * All UTF-8 strings should lex, unless they:\n *  1. Contain non-printable characters.\n *  2. Contain the character ` outside of a string/char/comment.\n *  3. Contain characters outside of the UTF-8 range.\n */\nconst basicLexing = {\n    identifier: {\n        match: /[A-Za-z_][A-Za-z0-9_]*/,\n        keywords: {\n            keyword: [\n                \"int\",\n                \"bool\",\n                \"string\",\n                \"char\",\n                \"void\",\n                \"struct\",\n                \"typedef\",\n                \"if\",\n                \"else\",\n                \"while\",\n                \"for\",\n                \"continue\",\n                \"break\",\n                \"return\",\n                \"assert\",\n                \"error\",\n                \"true\",\n                \"false\",\n                \"NULL\",\n                \"alloc\",\n                \"alloc_array\"\n            ]\n        }\n    },\n    numeric_literal: { match: /(?:0[0-9a-zA-Z_]+)|(?:[1-9][A-Za-z0-9_]*)|0/ },\n    char_delimiter: { match: /'/, push: \"charComponents\" },\n    string_delimiter: { match: /\\\"/, push: \"stringComponents\" },\n    logical_and: \"&&\",\n    decrement: \"--\",\n    increment: \"++\",\n    symbol: /[!$%&\\(\\)*+,\\-.\\/:;<=>?\\[\\\\\\]^{\\|}~]/,\n    unexpected_unicode_character: { match: /[\\x00-\\u{10FFFF}]/, lineBreaks: true },\n    invalid_character: { match: /./, lineBreaks: true },\n    type_identifier: \"<placeholder>\",\n    space: \"<placeholder>\"\n};\nfunction createLexer() {\n    return moo_1.states({\n        main: Object.assign({\n            newline: { match: /\\r?\\n/, lineBreaks: true },\n            whitespace: { match: /[ \\t\\v\\f\\r]+/ },\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            comment_line_start: { match: \"//\", push: \"lineComment\" },\n            pragma: /#.*/\n        }, basicLexing),\n        stringComponents: {\n            string_delimiter: { match: /\"/, pop: 1 },\n            characters: { match: /[^\\\\\\n\\r\"]+/, lineBreaks: false },\n            special_character: { match: /\\\\[^\\n\\r]/, lineBreaks: false },\n            invalid_string_character: { match: /[\\x00-xFF]/, lineBreaks: true }\n        },\n        charComponents: {\n            char_delimiter: { match: /'/, pop: 1 },\n            special_character: { match: /\\\\./, lineBreaks: true },\n            character: { match: /./, lineBreaks: false },\n            invalid_string_character: { match: /[\\x00-xFF]/, lineBreaks: true, pop: 1 }\n        },\n        multiLineComment: {\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            comment_end: { match: \"*/\", pop: 1 },\n            comment: { match: /\\*|\\/|[^*\\/\\n]+/, lineBreaks: false },\n            newline: { match: /\\r?\\n/, lineBreaks: true }\n        },\n        lineComment: {\n            comment: { match: /[^\\n]/, lineBreaks: false },\n            comment_line_end: { match: /\\r?\\n/, lineBreaks: true, pop: 1 }\n        }\n    }, \"main\");\n}\nexports.createLexer = createLexer;\nfunction createAnnoLexer() {\n    return moo_1.states({\n        main: Object.assign({\n            newline: { match: /\\r?\\n/, lineBreaks: true },\n            whitespace: { match: /[ \\t\\v\\f\\r]+/ },\n            anno_start: { match: \"/*@\", push: \"multiLineAnno\" },\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            anno_line_start: { match: \"//@\", push: \"lineAnno\" },\n            comment_line_start: { match: \"//\", push: \"lineComment\" },\n            pragma: /#.*/\n        }, basicLexing),\n        multiLineAnno: Object.assign({\n            newline: { match: /\\r?\\n/, lineBreaks: true },\n            whitespace: { match: /[ \\t\\v\\f\\r]+/ },\n            anno_end: { match: \"@*/\", pop: 1 },\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            comment_line_start: { match: \"//\", push: \"lineComment\" },\n            annospace: { match: \"@\" }\n        }, basicLexing),\n        lineAnno: Object.assign({\n            anno_end: { match: /\\r?\\n/, pop: 1, lineBreaks: true },\n            whitespace: { match: /[ \\t\\v\\f]+/ },\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            comment_line_start: { match: \"//\", next: \"lineComment\" },\n            annospace: { match: \"@\" }\n        }, basicLexing),\n        stringComponents: {\n            string_delimiter: { match: /\"/, pop: 1 },\n            characters: { match: /[^\\\\\\n\\r\"]+/, lineBreaks: false },\n            special_character: { match: /\\\\[^\\n\\r]/, lineBreaks: false },\n            invalid_string_character: { match: /[\\x00-xFF]/, lineBreaks: true }\n        },\n        charComponents: {\n            char_delimiter: { match: /'/, pop: 1 },\n            special_character: { match: /\\\\./, lineBreaks: true },\n            character: { match: /./, lineBreaks: false },\n            invalid_string_character: { match: /[\\x00-xFF]/, lineBreaks: true, pop: 1 }\n        },\n        multiLineComment: {\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            comment_end: { match: \"*/\", pop: 1 },\n            comment: { match: /\\*|\\/|[^*\\/\\n]+/, lineBreaks: false },\n            newline: { match: /\\r?\\n/, lineBreaks: true }\n        },\n        lineComment: {\n            comment: { match: /[^\\n]/, lineBreaks: false },\n            comment_line_end: { match: /\\r?\\n/, lineBreaks: true, pop: 1 }\n        }\n    }, \"main\");\n}\nexports.createAnnoLexer = createAnnoLexer;\nclass TypeLexer {\n    constructor(lang, typeIds, parsePragma) {\n        this.typeIds = typeIds;\n        switch (lang) {\n            case \"L1\":\n            case \"L2\":\n            case \"L3\":\n            case \"L4\": {\n                this.coreLexer = createLexer();\n                break;\n            }\n            case \"C0\":\n            case \"C1\": {\n                this.coreLexer = createAnnoLexer();\n                break;\n            }\n            default: {\n                this.coreLexer = impossible_1.impossible(lang);\n            }\n        }\n        this.parsePragma = parsePragma || (() => immutable_1.Set());\n    }\n    addIdentifier(typeIdentifier) {\n        this.typeIds = this.typeIds.add(typeIdentifier);\n    }\n    next() {\n        const tok = this.coreLexer.next();\n        if (!tok)\n            return undefined;\n        else if (tok[\"type\"] === \"pragma\") {\n            this.typeIds = this.typeIds.union(this.parsePragma(tok.text));\n            return tok;\n        }\n        else if (tok[\"type\"] === \"identifier\" && this.typeIds.has(tok.value)) {\n            tok[\"type\"] = \"type_identifier\";\n            return tok;\n        }\n        else if (tok[\"type\"] === \"identifier\") {\n            return tok;\n        }\n        else {\n            return tok;\n        }\n    }\n    save() {\n        return this.coreLexer.save();\n    }\n    reset(chunk, state) {\n        this.coreLexer.reset(chunk, state);\n    }\n    formatError(token, message) {\n        return this.coreLexer.formatError(token, message);\n    }\n    has(tokenType) {\n        return this.coreLexer.has(tokenType);\n    }\n}\nexports.TypeLexer = TypeLexer;\nexports.lexer = new TypeLexer(\"C1\", immutable_1.Set());\n//# sourceMappingURL=lex.js.map"
    },
    {
      "id": 8,
      "identifier": "/Users/robs/r/jaco/node_modules/moo/moo.js",
      "name": "./node_modules/moo/moo.js",
      "index": 4,
      "index2": 1,
      "size": 12745,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/lex.ts",
      "issuerId": 17,
      "issuerName": "./src/lex.ts",
      "issuerPath": [
        {
          "id": 19,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "name": "./src/demo/demo.ts",
          "profile": {
            "factory": 64,
            "building": 1924
          }
        },
        {
          "id": 18,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
          "name": "./src/parse.ts",
          "profile": {
            "factory": 288,
            "building": 665,
            "dependencies": 114
          }
        },
        {
          "id": 17,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/lex.ts",
          "name": "./src/lex.ts",
          "profile": {
            "factory": 808,
            "building": 8,
            "dependencies": 637
          }
        }
      ],
      "profile": {
        "factory": 646,
        "building": 24
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": 7,
          "moduleIdentifier": "/Users/robs/r/jaco/lib/lex.js",
          "module": "./lib/lex.js",
          "moduleName": "./lib/lex.js",
          "type": "cjs require",
          "userRequest": "moo",
          "loc": "3:14-28"
        },
        {
          "moduleId": 17,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/lex.ts",
          "module": "./src/lex.ts",
          "moduleName": "./src/lex.ts",
          "type": "cjs require",
          "userRequest": "moo",
          "loc": "3:14-28"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [
        "ModuleConcatenation bailout: Module is not an ECMAScript module"
      ],
      "depth": 3,
      "source": "(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory) /* global define */\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory()\n  } else {\n    root.moo = factory()\n  }\n}(this, function() {\n  'use strict';\n\n  var hasOwnProperty = Object.prototype.hasOwnProperty\n\n  // polyfill assign(), so we support IE9+\n  var assign = typeof Object.assign === 'function' ? Object.assign :\n    // https://tc39.github.io/ecma262/#sec-object.assign\n    function(target, sources) {\n      if (target == null) {\n        throw new TypeError('Target cannot be null or undefined');\n      }\n      target = Object(target)\n\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i]\n        if (source == null) continue\n\n        for (var key in source) {\n          if (hasOwnProperty.call(source, key)) {\n            target[key] = source[key]\n          }\n        }\n      }\n      return target\n    }\n\n  var hasSticky = typeof new RegExp().sticky === 'boolean'\n\n  /***************************************************************************/\n\n  function isRegExp(o) { return o && o.constructor === RegExp }\n  function isObject(o) { return o && typeof o === 'object' && o.constructor !== RegExp && !Array.isArray(o) }\n\n  function reEscape(s) {\n    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n  }\n  function reGroups(s) {\n    var re = new RegExp('|' + s)\n    return re.exec('').length - 1\n  }\n  function reCapture(s) {\n    return '(' + s + ')'\n  }\n  function reUnion(regexps) {\n    var source =  regexps.map(function(s) {\n      return \"(?:\" + s + \")\"\n    }).join('|')\n    return \"(?:\" + source + \")\"\n  }\n\n  function regexpOrLiteral(obj) {\n    if (typeof obj === 'string') {\n      return '(?:' + reEscape(obj) + ')'\n\n    } else if (isRegExp(obj)) {\n      // TODO: consider /u support\n      if (obj.ignoreCase) { throw new Error('RegExp /i flag not allowed') }\n      if (obj.global) { throw new Error('RegExp /g flag is implied') }\n      if (obj.sticky) { throw new Error('RegExp /y flag is implied') }\n      if (obj.multiline) { throw new Error('RegExp /m flag is implied') }\n      return obj.source\n\n    } else {\n      throw new Error('not a pattern: ' + obj)\n    }\n  }\n\n  function objectToRules(object) {\n    var keys = Object.getOwnPropertyNames(object)\n    var result = []\n    for (var i=0; i<keys.length; i++) {\n      var key = keys[i]\n      var thing = object[key]\n      var rules = Array.isArray(thing) ? thing : [thing]\n      var match = []\n      rules.forEach(function(rule) {\n        if (isObject(rule)) {\n          if (match.length) result.push(ruleOptions(key, match))\n          result.push(ruleOptions(key, rule))\n          match = []\n        } else {\n          match.push(rule)\n        }\n      })\n      if (match.length) result.push(ruleOptions(key, match))\n    }\n    return result\n  }\n\n  function arrayToRules(array) {\n    var result = []\n    for (var i=0; i<array.length; i++) {\n      var obj = array[i]\n      if (!obj.name) {\n        throw new Error('Rule has no name: ' + JSON.stringify(obj))\n      }\n      result.push(ruleOptions(obj.name, obj))\n    }\n    return result\n  }\n\n  function ruleOptions(name, obj) {\n    if (typeof obj !== 'object' || Array.isArray(obj) || isRegExp(obj)) {\n      obj = { match: obj }\n    }\n\n    // nb. error implies lineBreaks\n    var options = assign({\n      tokenType: name,\n      lineBreaks: !!obj.error,\n      pop: false,\n      next: null,\n      push: null,\n      error: false,\n      value: null,\n      getType: null,\n    }, obj)\n\n    // convert to array\n    var match = options.match\n    options.match = Array.isArray(match) ? match : match ? [match] : []\n    options.match.sort(function(a, b) {\n      return isRegExp(a) && isRegExp(b) ? 0\n           : isRegExp(b) ? -1 : isRegExp(a) ? +1 : b.length - a.length\n    })\n    if (options.keywords) {\n      options.getType = keywordTransform(options.keywords)\n    }\n    return options\n  }\n\n  function compileRules(rules, hasStates) {\n    rules = Array.isArray(rules) ? arrayToRules(rules) : objectToRules(rules)\n\n    var errorRule = null\n    var groups = []\n    var parts = []\n    for (var i=0; i<rules.length; i++) {\n      var options = rules[i]\n\n      if (options.error) {\n        if (errorRule) {\n          throw new Error(\"Multiple error rules not allowed: (for token '\" + options.tokenType + \"')\")\n        }\n        errorRule = options\n      }\n\n      // skip rules with no match\n      if (options.match.length === 0) {\n        continue\n      }\n      groups.push(options)\n\n      // convert to RegExp\n      var pat = reUnion(options.match.map(regexpOrLiteral))\n\n      // validate\n      var regexp = new RegExp(pat)\n      if (regexp.test(\"\")) {\n        throw new Error(\"RegExp matches empty string: \" + regexp)\n      }\n      var groupCount = reGroups(pat)\n      if (groupCount > 0) {\n        throw new Error(\"RegExp has capture groups: \" + regexp + \"\\nUse (?: … ) instead\")\n      }\n      if (!hasStates && (options.pop || options.push || options.next)) {\n        throw new Error(\"State-switching options are not allowed in stateless lexers (for token '\" + options.tokenType + \"')\")\n      }\n\n      // try and detect rules matching newlines\n      if (!options.lineBreaks && regexp.test('\\n')) {\n        throw new Error('Rule should declare lineBreaks: ' + regexp)\n      }\n\n      // store regex\n      parts.push(reCapture(pat))\n    }\n\n    var suffix = hasSticky ? '' : '|(?:)'\n    var flags = hasSticky ? 'ym' : 'gm'\n    var combined = new RegExp(reUnion(parts) + suffix, flags)\n\n    return {regexp: combined, groups: groups, error: errorRule}\n  }\n\n  function compile(rules) {\n    var result = compileRules(rules)\n    return new Lexer({start: result}, 'start')\n  }\n\n  function compileStates(states, start) {\n    var keys = Object.getOwnPropertyNames(states)\n    if (!start) start = keys[0]\n\n    var map = Object.create(null)\n    for (var i=0; i<keys.length; i++) {\n      var key = keys[i]\n      map[key] = compileRules(states[key], true)\n    }\n\n    for (var i=0; i<keys.length; i++) {\n      var groups = map[keys[i]].groups\n      for (var j=0; j<groups.length; j++) {\n        var g = groups[j]\n        var state = g && (g.push || g.next)\n        if (state && !map[state]) {\n          throw new Error(\"Missing state '\" + state + \"' (in token '\" + g.tokenType + \"' of state '\" + keys[i] + \"')\")\n        }\n        if (g && g.pop && +g.pop !== 1) {\n          throw new Error(\"pop must be 1 (in token '\" + g.tokenType + \"' of state '\" + keys[i] + \"')\")\n        }\n      }\n    }\n\n    return new Lexer(map, start)\n  }\n\n  function keywordTransform(map) {\n    var reverseMap = Object.create(null)\n    var byLength = Object.create(null)\n    var types = Object.getOwnPropertyNames(map)\n    for (var i=0; i<types.length; i++) {\n      var tokenType = types[i]\n      var item = map[tokenType]\n      var keywordList = Array.isArray(item) ? item : [item]\n      keywordList.forEach(function(keyword) {\n        (byLength[keyword.length] = byLength[keyword.length] || []).push(keyword)\n        if (typeof keyword !== 'string') {\n          throw new Error(\"keyword must be string (in keyword '\" + tokenType + \"')\")\n        }\n        reverseMap[keyword] = tokenType\n      })\n    }\n\n    // fast string lookup\n    // https://jsperf.com/string-lookups\n    function str(x) { return JSON.stringify(x) }\n    var source = ''\n    source += '(function(value) {\\n'\n    source += 'switch (value.length) {\\n'\n    for (var length in byLength) {\n      var keywords = byLength[length]\n      source += 'case ' + length + ':\\n'\n      source += 'switch (value) {\\n'\n      keywords.forEach(function(keyword) {\n        var tokenType = reverseMap[keyword]\n        source += 'case ' + str(keyword) + ': return ' + str(tokenType) + '\\n'\n      })\n      source += '}\\n'\n    }\n    source += '}\\n'\n    source += '})'\n    return eval(source) // getType\n  }\n\n  /***************************************************************************/\n\n  var Lexer = function(states, state) {\n    this.startState = state\n    this.states = states\n    this.buffer = ''\n    this.stack = []\n    this.reset()\n  }\n\n  Lexer.prototype.reset = function(data, info) {\n    this.buffer = data || ''\n    this.index = 0\n    this.line = info ? info.line : 1\n    this.col = info ? info.col : 1\n    this.setState(info ? info.state : this.startState)\n    return this\n  }\n\n  Lexer.prototype.save = function() {\n    return {\n      line: this.line,\n      col: this.col,\n      state: this.state,\n    }\n  }\n\n  Lexer.prototype.setState = function(state) {\n    if (!state || this.state === state) return\n    this.state = state\n    var info = this.states[state]\n    this.groups = info.groups\n    this.error = info.error || {lineBreaks: true, shouldThrow: true}\n    this.re = info.regexp\n  }\n\n  Lexer.prototype.popState = function() {\n    this.setState(this.stack.pop())\n  }\n\n  Lexer.prototype.pushState = function(state) {\n    this.stack.push(this.state)\n    this.setState(state)\n  }\n\n  Lexer.prototype._eat = hasSticky ? function(re) { // assume re is /y\n    return re.exec(this.buffer)\n  } : function(re) { // assume re is /g\n    var match = re.exec(this.buffer)\n    // will always match, since we used the |(?:) trick\n    if (match[0].length === 0) {\n      return null\n    }\n    return match\n  }\n\n  Lexer.prototype._getGroup = function(match) {\n    if (match === null) {\n      return -1\n    }\n\n    var groupCount = this.groups.length\n    for (var i = 0; i < groupCount; i++) {\n      if (match[i + 1] !== undefined) {\n        return i\n      }\n    }\n    throw new Error('oops')\n  }\n\n  function tokenToString() {\n    return this.value\n  }\n\n  Lexer.prototype.next = function() {\n    var re = this.re\n    var buffer = this.buffer\n\n    var index = re.lastIndex = this.index\n    if (index === buffer.length) {\n      return // EOF\n    }\n\n    var match = this._eat(re)\n    var i = this._getGroup(match)\n\n    var group, text\n    if (i === -1) {\n      group = this.error\n\n      // consume rest of buffer\n      text = buffer.slice(index)\n\n    } else {\n      text = match[0]\n      group = this.groups[i]\n    }\n\n    // count line breaks\n    var lineBreaks = 0\n    if (group.lineBreaks) {\n      var matchNL = /\\n/g\n      var nl = 1\n      if (text === '\\n') {\n        lineBreaks = 1\n      } else {\n        while (matchNL.exec(text)) { lineBreaks++; nl = matchNL.lastIndex }\n      }\n    }\n\n    var token = {\n      type: (group.getType && group.getType(text)) || group.tokenType,\n      value: group.value ? group.value(text) : text,\n      text: text,\n      toString: tokenToString,\n      offset: index,\n      lineBreaks: lineBreaks,\n      line: this.line,\n      col: this.col,\n    }\n    // nb. adding more props to token object will make V8 sad!\n\n    var size = text.length\n    this.index += size\n    this.line += lineBreaks\n    if (lineBreaks !== 0) {\n      this.col = size - nl + 1\n    } else {\n      this.col += size\n    }\n    // throw, if no rule with {error: true}\n    if (group.shouldThrow) {\n      throw new Error(this.formatError(token, \"invalid syntax\"))\n    }\n\n    if (group.pop) this.popState()\n    else if (group.push) this.pushState(group.push)\n    else if (group.next) this.setState(group.next)\n    return token\n  }\n\n  if (typeof Symbol !== 'undefined' && Symbol.iterator) {\n    var LexerIterator = function(lexer) {\n      this.lexer = lexer\n    }\n\n    LexerIterator.prototype.next = function() {\n      var token = this.lexer.next()\n      return {value: token, done: !token}\n    }\n\n    LexerIterator.prototype[Symbol.iterator] = function() {\n      return this\n    }\n\n    Lexer.prototype[Symbol.iterator] = function() {\n      return new LexerIterator(this)\n    }\n  }\n\n  Lexer.prototype.formatError = function(token, message) {\n    var value = token.value\n    var index = token.offset\n    var eol = token.lineBreaks ? value.indexOf('\\n') : value.length\n    var start = Math.max(0, index - token.col + 1)\n    var firstLine = this.buffer.substring(start, index + eol)\n    message += \" at line \" + token.line + \" col \" + token.col + \":\\n\\n\"\n    message += \"  \" + firstLine + \"\\n\"\n    message += \"  \" + Array(token.col).join(\" \") + \"^\"\n    return message\n  }\n\n  Lexer.prototype.clone = function() {\n    return new Lexer(this.states, this.state)\n  }\n\n  Lexer.prototype.has = function(tokenType) {\n    for (var s in this.states) {\n      var groups = this.states[s].groups\n      for (var i=0; i<groups.length; i++) {\n        var group = groups[i]\n        if (group.tokenType === tokenType) return true\n        if (group.keywords && hasOwnProperty.call(group.keywords, tokenType)) {\n          return true\n        }\n      }\n    }\n    return false\n  }\n\n\n  return {\n    compile: compile,\n    states: compileStates,\n    error: Object.freeze({error: true}),\n  }\n\n}))\n"
    },
    {
      "id": 9,
      "identifier": "external \"CodeMirror\"",
      "name": "external \"CodeMirror\"",
      "index": 19,
      "index2": 18,
      "size": 42,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
      "issuerId": 19,
      "issuerName": "./src/demo/demo.ts",
      "issuerPath": [
        {
          "id": 19,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "name": "./src/demo/demo.ts",
          "profile": {
            "factory": 64,
            "building": 1924
          }
        }
      ],
      "profile": {
        "factory": 288,
        "building": 665,
        "dependencies": 114
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": 19,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "module": "./src/demo/demo.ts",
          "moduleName": "./src/demo/demo.ts",
          "type": "cjs require",
          "userRequest": "codemirror",
          "loc": "5:19-40"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [
        "ModuleConcatenation bailout: Module is not an ECMAScript module"
      ],
      "depth": 1
    },
    {
      "id": 10,
      "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/flow.ts",
      "name": "./src/typecheck/flow.ts",
      "index": 18,
      "index2": 16,
      "size": 9676,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
      "issuerId": 12,
      "issuerName": "./src/typecheck/programs.ts",
      "issuerPath": [
        {
          "id": 19,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "name": "./src/demo/demo.ts",
          "profile": {
            "factory": 64,
            "building": 1924
          }
        },
        {
          "id": 12,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "name": "./src/typecheck/programs.ts",
          "profile": {
            "factory": 288,
            "building": 665,
            "dependencies": 114
          }
        }
      ],
      "profile": {
        "factory": 703,
        "building": 8,
        "dependencies": 347
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "module": "./src/typecheck/programs.ts",
          "moduleName": "./src/typecheck/programs.ts",
          "type": "cjs require",
          "userRequest": "./flow",
          "loc": "10:15-32"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [
        "ModuleConcatenation bailout: Module is not an ECMAScript module"
      ],
      "depth": 2,
      "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst impossible_1 = require(\"@calculemus/impossible\");\nconst immutable_1 = require(\"immutable\");\nconst error_1 = require(\"./error\");\n/**\n * Returns the free locals and free functions of an expression. (The type system ensures these are\n * disjoint within any top-level declaration.)\n */\nfunction expressionFreeVars(exp) {\n    switch (exp.tag) {\n        case \"Identifier\":\n            return immutable_1.Set([exp.name]);\n        case \"IntLiteral\":\n        case \"StringLiteral\":\n        case \"CharLiteral\":\n        case \"BoolLiteral\":\n        case \"NullLiteral\":\n        case \"AllocExpression\":\n        case \"ResultExpression\":\n            return immutable_1.Set();\n        case \"ArrayMemberExpression\":\n            return expressionFreeVars(exp.object).union(expressionFreeVars(exp.index));\n        case \"StructMemberExpression\":\n            return expressionFreeVars(exp.object);\n        case \"CallExpression\":\n        case \"IndirectCallExpression\":\n            return exp.arguments.reduce((fv, arg) => fv.union(expressionFreeVars(arg)), expressionFreeVars(exp.callee));\n        case \"UnaryExpression\":\n        case \"CastExpression\":\n        case \"LengthExpression\":\n        case \"HasTagExpression\":\n            return expressionFreeVars(exp.argument);\n        case \"BinaryExpression\":\n        case \"LogicalExpression\":\n            return expressionFreeVars(exp.left).union(expressionFreeVars(exp.right));\n        case \"ConditionalExpression\":\n            return expressionFreeVars(exp.test)\n                .union(expressionFreeVars(exp.consequent))\n                .union(expressionFreeVars(exp.alternate));\n        case \"AllocArrayExpression\":\n            return expressionFreeVars(exp.size);\n        default:\n            return impossible_1.impossible(exp);\n    }\n}\nexports.expressionFreeVars = expressionFreeVars;\n/**\n * Ensures that the free locals of an expression have been defined along every control path\n * Raises an error if there are potentially un-initialized stack locals\n *  - Precondition: the expression must have passed typechecking\n *  - Precondition: all the current stack locals must be in [locals]\n *  - Precondition: [defined] is the subset of [locals] defined on every\n *  - Returns the free functions (the free locals that are not stack-allocated locals)\n */\nfunction checkExpressionUsesGetFreeFunctions(locals, defined, exp) {\n    const freeVars = expressionFreeVars(exp);\n    const freeLocals = freeVars.intersect(locals);\n    const undefinedFreeLocals = freeLocals.subtract(defined);\n    for (let badLocal of undefinedFreeLocals.values()) {\n        return error_1.error(`local ${badLocal} used without necessarily being defined`);\n    }\n    return freeVars.subtract(locals);\n}\nexports.checkExpressionUsesGetFreeFunctions = checkExpressionUsesGetFreeFunctions;\n/**\n *\n * @param locals All locals valid at this point in the program\n * @param constants Locals that are free in the postcondition and so must not be modified\n * @param defined Locals that have been previously defined on all control paths to this point\n * @param stm The statement being analyized\n * @returns\n *   - locals: locals valid after running this statement (changes when the statement is a declaration)\n *   - defined: definitely-defined locals after running this statement\n *   - functions: free functions in this statement\n *   - returns: does\n */\nfunction checkStatementFlow(locals, constants, defined, stm) {\n    switch (stm.tag) {\n        case \"AssignmentStatement\": {\n            let functions = checkExpressionUsesGetFreeFunctions(locals, defined, stm.right);\n            if (stm.operator === \"=\" && stm.left.tag === \"Identifier\") {\n                if (constants.has(stm.left.name)) {\n                    error_1.error(`assigning to ${stm.left.name} is not permitted when ${stm.left.name} is used in postcondition`);\n                }\n                defined = defined.add(stm.left.name);\n            }\n            else {\n                functions = functions.union(checkExpressionUsesGetFreeFunctions(locals, defined, stm.left));\n            }\n            return { locals: locals, defined: defined, functions: functions, returns: false };\n        }\n        case \"UpdateStatement\": {\n            return {\n                locals: locals,\n                defined: defined,\n                functions: checkExpressionUsesGetFreeFunctions(locals, defined, stm.argument),\n                returns: false\n            };\n        }\n        case \"ExpressionStatement\": {\n            return {\n                locals: locals,\n                defined: defined,\n                functions: checkExpressionUsesGetFreeFunctions(locals, defined, stm.expression),\n                returns: false\n            };\n        }\n        case \"VariableDeclaration\": {\n            if (stm.init === null)\n                return {\n                    locals: locals.add(stm.id.name),\n                    defined: defined,\n                    functions: immutable_1.Set(),\n                    returns: false\n                };\n            return {\n                locals: locals.add(stm.id.name),\n                defined: defined.add(stm.id.name),\n                functions: checkExpressionUsesGetFreeFunctions(locals, defined, stm.init),\n                returns: false\n            };\n        }\n        case \"IfStatement\": {\n            const test = checkExpressionUsesGetFreeFunctions(locals, defined, stm.test);\n            const consequent = checkStatementFlow(locals, constants, defined, stm.consequent);\n            if (stm.alternate) {\n                const alternate = checkStatementFlow(locals, constants, defined, stm.alternate);\n                return {\n                    locals: locals,\n                    defined: consequent.defined.intersect(alternate.defined),\n                    functions: test.union(consequent.functions).union(alternate.functions),\n                    returns: consequent.returns && alternate.returns\n                };\n            }\n            else {\n                return {\n                    locals: locals,\n                    defined: defined,\n                    functions: test.union(consequent.functions),\n                    returns: false\n                };\n            }\n        }\n        case \"WhileStatement\": {\n            const test = stm.invariants.reduce((set, exp) => set.union(checkExpressionUsesGetFreeFunctions(locals, defined, exp)), checkExpressionUsesGetFreeFunctions(locals, defined, stm.test));\n            const body = checkStatementFlow(locals, constants, defined, stm.body);\n            return {\n                locals: locals,\n                defined: defined,\n                functions: test.union(body.functions),\n                returns: false\n            };\n        }\n        case \"ForStatement\": {\n            const init = checkStatementFlow(locals, constants, defined, stm.init || { tag: \"BlockStatement\", body: [] });\n            const test = stm.invariants.reduce((set, exp) => set.union(checkExpressionUsesGetFreeFunctions(init.locals, init.defined, exp)), checkExpressionUsesGetFreeFunctions(init.locals, init.defined, stm.test));\n            const body = checkStatementFlow(init.locals, constants, init.defined, stm.body);\n            const update = checkStatementFlow(init.locals, constants, body.defined, stm.update || { tag: \"BlockStatement\", body: [] });\n            return {\n                locals: locals,\n                defined: init.defined,\n                functions: init.functions\n                    .union(test)\n                    .union(body.functions)\n                    .union(update.functions),\n                returns: false\n            };\n        }\n        case \"ReturnStatement\": {\n            return {\n                locals: locals,\n                defined: locals,\n                functions: stm.argument === null\n                    ? immutable_1.Set()\n                    : checkExpressionUsesGetFreeFunctions(locals, defined, stm.argument),\n                returns: true\n            };\n        }\n        case \"BlockStatement\": {\n            const body = stm.body.reduce(({ locals, defined, functions, returns }, stm) => {\n                const result = checkStatementFlow(locals, constants, defined, stm);\n                return {\n                    locals: result.locals,\n                    defined: result.defined,\n                    functions: functions.union(result.functions),\n                    returns: returns || result.returns\n                };\n            }, { locals: locals, defined: defined, functions: immutable_1.Set(), returns: false });\n            return {\n                locals: locals,\n                defined: body.defined.intersect(locals),\n                functions: body.functions,\n                returns: body.returns\n            };\n        }\n        case \"AssertStatement\": {\n            return {\n                locals: locals,\n                defined: defined,\n                functions: checkExpressionUsesGetFreeFunctions(locals, defined, stm.test),\n                returns: false\n            };\n        }\n        case \"ErrorStatement\": {\n            return {\n                locals: locals,\n                defined: defined,\n                functions: checkExpressionUsesGetFreeFunctions(locals, defined, stm.argument),\n                returns: true\n            };\n        }\n        case \"BreakStatement\":\n        case \"ContinueStatement\": {\n            return { locals: locals, defined: locals, functions: immutable_1.Set(), returns: false };\n        }\n        default:\n            return impossible_1.impossible(stm);\n    }\n}\nexports.checkStatementFlow = checkStatementFlow;\n"
    },
    {
      "id": 11,
      "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/statements.ts",
      "name": "./src/typecheck/statements.ts",
      "index": 17,
      "index2": 15,
      "size": 5497,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
      "issuerId": 12,
      "issuerName": "./src/typecheck/programs.ts",
      "issuerPath": [
        {
          "id": 19,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "name": "./src/demo/demo.ts",
          "profile": {
            "factory": 64,
            "building": 1924
          }
        },
        {
          "id": 12,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "name": "./src/typecheck/programs.ts",
          "profile": {
            "factory": 288,
            "building": 665,
            "dependencies": 114
          }
        }
      ],
      "profile": {
        "factory": 703,
        "building": 8,
        "dependencies": 347
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
          "module": "./src/typecheck/programs.ts",
          "moduleName": "./src/typecheck/programs.ts",
          "type": "cjs require",
          "userRequest": "./statements",
          "loc": "9:21-44"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [
        "ModuleConcatenation bailout: Module is not an ECMAScript module"
      ],
      "depth": 2,
      "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst impossible_1 = require(\"@calculemus/impossible\");\nconst error_1 = require(\"./error\");\nconst types_1 = require(\"./types\");\nconst expressions_1 = require(\"./expressions\");\nfunction checkStatements(genv, env, stms, returning, inLoop) {\n    stms.reduce((env, stm) => checkStatement(genv, env, stm, returning, inLoop), env);\n}\nexports.checkStatements = checkStatements;\nfunction checkStatement(genv, env, stm, returning, inLoop) {\n    switch (stm.tag) {\n        case \"AssignmentStatement\": {\n            const left = expressions_1.synthLValue(genv, env, null, stm.left);\n            const right = expressions_1.checkExpression(genv, env, null, stm.right, left);\n            left;\n            right; // TODO bogus\n            return env;\n            /*\n            if (left.tag === \"AmbiguousNullPointer\") {\n                throw new Error(\n                    \"LValue cannot have ambiguous pointer type (should be impossible, please report)\"\n                );\n            } else if (!isSubtype(genv, right, left)) {\n                return error(\"sides of assignment have different type\"); // TODO: types\n            } else {\n                return env;\n            }\n            */\n        }\n        case \"UpdateStatement\": {\n            expressions_1.checkExpression(genv, env, null, stm.argument, { tag: \"IntType\" });\n            return env;\n        }\n        case \"ExpressionStatement\": {\n            const expType = types_1.actualSynthed(genv, expressions_1.synthExpression(genv, env, null, stm.expression));\n            if (expType.tag === \"StructType\")\n                return error_1.error(`expression used as statements cannot have type 'struct ${expType.id.name}'`);\n            if (expType.tag === \"NamedFunctionType\")\n                return error_1.error(`expression used as statements cannot have function type '${expType.definition.id.name}'`);\n            return env;\n        }\n        case \"VariableDeclaration\": {\n            types_1.checkTypeInDeclaration(genv, stm.kind);\n            if (env.has(stm.id.name)) {\n                return error_1.error(`variable '${stm.id.name}' declared twice`);\n            }\n            else if (stm.init !== null) {\n                expressions_1.checkExpression(genv, env, null, stm.init, stm.kind);\n            }\n            return env.set(stm.id.name, stm.kind);\n        }\n        case \"IfStatement\": {\n            expressions_1.checkExpression(genv, env, null, stm.test, { tag: \"BoolType\" });\n            checkStatement(genv, env, stm.consequent, returning, inLoop);\n            if (stm.alternate)\n                checkStatement(genv, env, stm.alternate, returning, inLoop);\n            return env;\n        }\n        case \"WhileStatement\": {\n            expressions_1.checkExpression(genv, env, null, stm.test, { tag: \"BoolType\" });\n            stm.invariants.forEach(anno => expressions_1.checkExpression(genv, env, { tag: \"@loop_invariant\" }, anno, { tag: \"BoolType\" }));\n            checkStatement(genv, env, stm.body, returning, true);\n            return env;\n        }\n        case \"ForStatement\": {\n            const env0 = stm.init ? checkStatement(genv, env, stm.init, null, false) : env;\n            expressions_1.checkExpression(genv, env0, null, stm.test, { tag: \"BoolType\" });\n            if (stm.update)\n                checkStatement(genv, env0, stm.update, null, false);\n            stm.invariants.forEach(anno => expressions_1.checkExpression(genv, env0, { tag: \"@loop_invariant\" }, anno, { tag: \"BoolType\" }));\n            checkStatement(genv, env0, stm.body, returning, true);\n            return env;\n        }\n        case \"ReturnStatement\": {\n            if (returning === null) {\n                return error_1.error(`return statements not allowed`);\n            }\n            else if (returning.tag === \"VoidType\") {\n                if (stm.argument !== null) {\n                    return error_1.error(\"function returning void must invoke 'return', not 'return e'\");\n                }\n            }\n            else {\n                if (stm.argument === null) {\n                    return error_1.error(\"type mismatch, expected a return type found void\");\n                }\n                else {\n                    expressions_1.checkExpression(genv, env, null, stm.argument, returning);\n                }\n            }\n            return env;\n        }\n        case \"BlockStatement\": {\n            checkStatements(genv, env, stm.body, returning, inLoop);\n            return env;\n        }\n        case \"AssertStatement\": {\n            expressions_1.checkExpression(genv, env, stm.contract ? { tag: \"@assert\" } : null, stm.test, {\n                tag: \"BoolType\"\n            });\n            return env;\n        }\n        case \"ErrorStatement\": {\n            expressions_1.checkExpression(genv, env, null, stm.argument, { tag: \"StringType\" });\n            return env;\n        }\n        case \"BreakStatement\": {\n            if (!inLoop)\n                return error_1.error(\"break statement not allowed\", \"break statements must be inside the body of a for-loop or while-loop\");\n            return env;\n        }\n        case \"ContinueStatement\": {\n            if (!inLoop)\n                return error_1.error(\"continue statement not allowed\", \"continue statements must be inside the body of a for-loop or while-loop\");\n            return env;\n        }\n        default: {\n            return impossible_1.impossible(stm);\n        }\n    }\n}\n"
    },
    {
      "id": 12,
      "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/typecheck/programs.ts",
      "name": "./src/typecheck/programs.ts",
      "index": 12,
      "index2": 17,
      "size": 9016,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
      "issuerId": 19,
      "issuerName": "./src/demo/demo.ts",
      "issuerPath": [
        {
          "id": 19,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "name": "./src/demo/demo.ts",
          "profile": {
            "factory": 64,
            "building": 1924
          }
        }
      ],
      "profile": {
        "factory": 288,
        "building": 665,
        "dependencies": 114
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": 19,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "module": "./src/demo/demo.ts",
          "moduleName": "./src/demo/demo.ts",
          "type": "cjs require",
          "userRequest": "../typecheck/programs",
          "loc": "4:19-51"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [
        "ModuleConcatenation bailout: Module is not an ECMAScript module"
      ],
      "depth": 1,
      "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst impossible_1 = require(\"@calculemus/impossible\");\nconst immutable_1 = require(\"immutable\");\nconst error_1 = require(\"./error\");\nconst globalenv_1 = require(\"./globalenv\");\nconst types_1 = require(\"./types\");\nconst expressions_1 = require(\"./expressions\");\nconst statements_1 = require(\"./statements\");\nconst flow_1 = require(\"./flow\");\nfunction getDefinedFromParams(params) {\n    return params.reduce((set, param) => set.add(param.id.name), immutable_1.Set());\n}\nfunction getEnvironmentFromParams(genv, params) {\n    return params.reduce((env, param) => {\n        types_1.checkTypeInDeclaration(genv, param.kind, true);\n        if (env.has(param.id.name)) {\n            return error_1.error(`variable ${param.id.name} declared twice`);\n        }\n        else {\n            return env.set(param.id.name, param.kind);\n        }\n    }, immutable_1.Map());\n}\nfunction checkDeclaration(library, genv, decl) {\n    switch (decl.tag) {\n        case \"Pragma\": {\n            return immutable_1.Set();\n        }\n        case \"StructDeclaration\": {\n            if (decl.definitions === null)\n                return immutable_1.Set();\n            if (!library && globalenv_1.isLibraryStruct(genv, decl.id.name))\n                return error_1.error(`struct ${decl.id.name} is declared in a library and cannot be defined here`);\n            const previousStruct = globalenv_1.getStructDefinition(genv, decl.id.name);\n            if (previousStruct !== null && previousStruct.definitions !== null)\n                return error_1.error(`struct ${decl.id.name} is defined twice`, \"structs can only be defined once\");\n            decl.definitions.reduce((set, definition) => {\n                if (set.has(definition.id.name))\n                    error_1.error(`field '${definition.id.name}' used more than once in definition of struct '${decl.id.name}'`);\n                const undefinedTypePart = types_1.typeSizeFullyDefined(genv, definition.kind);\n                if (undefinedTypePart !== null) {\n                    return error_1.error(`cannot define struct ${decl.id.name} because component struct ${undefinedTypePart} is not fully defined`);\n                }\n                return set.add(definition.id.name);\n            }, immutable_1.Set());\n            return immutable_1.Set();\n        }\n        case \"TypeDefinition\": {\n            const previousTypeDef = globalenv_1.getTypeDef(genv, decl.definition.id.name);\n            const previousFunction = globalenv_1.getFunctionDeclaration(genv, decl.definition.id.name);\n            if (previousTypeDef !== null)\n                return error_1.error(`type name '${decl.definition.id.name}' already defined as a type`);\n            if (previousFunction !== null)\n                return error_1.error(`type name '${decl.definition.id.name}' already used in a function ${previousFunction.body === null ? \"declaration\" : \"definition\"}`);\n            return immutable_1.Set();\n        }\n        case \"FunctionTypeDefinition\": {\n            const previousTypeDef = globalenv_1.getTypeDef(genv, decl.definition.id.name);\n            const previousFunction = globalenv_1.getFunctionDeclaration(genv, decl.definition.id.name);\n            if (previousTypeDef !== null)\n                return error_1.error(`function type name '${decl.definition.id.name}' already defined as a type`);\n            if (previousFunction !== null)\n                return error_1.error(`function type name '${decl.definition.id.name}' already used in a function ${previousFunction.body === null ? \"declaration\" : \"definition\"}`);\n            types_1.checkFunctionReturnType(genv, decl.definition.returns);\n            const env = getEnvironmentFromParams(genv, decl.definition.params);\n            const defined = getDefinedFromParams(decl.definition.params);\n            let functionsUsed = decl.definition.preconditions.reduce((functionsUsed, anno) => {\n                expressions_1.checkExpression(genv, env, { tag: \"@requires\" }, anno, { tag: \"BoolType\" });\n                return functionsUsed.union(flow_1.checkExpressionUsesGetFreeFunctions(defined, defined, anno));\n            }, decl.definition.postconditions.reduce((functionsUsed, anno) => {\n                expressions_1.checkExpression(genv, env, { tag: \"@ensures\", returns: decl.definition.returns }, anno, {\n                    tag: \"BoolType\"\n                });\n                return functionsUsed.union(flow_1.checkExpressionUsesGetFreeFunctions(defined, defined, anno));\n            }, immutable_1.Set()));\n            return functionsUsed;\n        }\n        case \"FunctionDeclaration\": {\n            types_1.checkFunctionReturnType(genv, decl.returns);\n            const env = getEnvironmentFromParams(genv, decl.params);\n            const defined = getDefinedFromParams(decl.params);\n            let functionsUsed = decl.preconditions.reduce((functionsUsed, anno) => {\n                expressions_1.checkExpression(genv, env, { tag: \"@requires\" }, anno, { tag: \"BoolType\" });\n                return functionsUsed.union(flow_1.checkExpressionUsesGetFreeFunctions(defined, defined, anno));\n            }, decl.postconditions.reduce((functionsUsed, anno) => {\n                expressions_1.checkExpression(genv, env, { tag: \"@ensures\", returns: decl.returns }, anno, {\n                    tag: \"BoolType\"\n                });\n                return functionsUsed.union(flow_1.checkExpressionUsesGetFreeFunctions(defined, defined, anno));\n            }, immutable_1.Set()));\n            const previousFunction = globalenv_1.getFunctionDeclaration(genv, decl.id.name);\n            if (previousFunction !== null) {\n                if (previousFunction.body !== null && decl.body !== null)\n                    error_1.error(`function ${decl.id.name} defined more than once`);\n                if (!types_1.equalFunctionTypes(genv, previousFunction, decl)) {\n                    const oldone = previousFunction.body === null ? \"declaration\" : \"definition\";\n                    const newone = decl.body === null ? \"declaration\" : \"definition\";\n                    error_1.error(`function ${newone} for '${decl.id.name}' does not match previous function ${oldone}`);\n                }\n            }\n            if (decl.body !== null) {\n                if (library)\n                    error_1.error(`functions cannot be defined in a library header file`);\n                if (globalenv_1.isLibraryFunction(genv, decl.id.name))\n                    error_1.error(`function ${decl.id.name} is declared in a library header and cannot be defined`);\n                const recursiveGlobalEnv = globalenv_1.addDecl(false, genv, {\n                    tag: \"FunctionDeclaration\",\n                    id: decl.id,\n                    returns: decl.returns,\n                    params: decl.params,\n                    preconditions: [],\n                    postconditions: [],\n                    body: null\n                });\n                statements_1.checkStatements(recursiveGlobalEnv, env, decl.body.body, decl.returns, false);\n                let constants = decl.postconditions.reduce((constants, anno) => constants.union(flow_1.expressionFreeVars(anno).intersect(defined)), immutable_1.Set());\n                const functionAnalysis = flow_1.checkStatementFlow(defined, constants, defined, decl.body);\n                if (decl.returns.tag !== \"VoidType\" && !functionAnalysis.returns)\n                    return error_1.error(`function ${decl.id.name} has non-void return type but does not return along every path`);\n                functionsUsed = functionAnalysis.functions.union(functionsUsed);\n            }\n            return functionsUsed;\n        }\n        /* instanbul ignore next */\n        default: {\n            return impossible_1.impossible(decl);\n        }\n    }\n}\nfunction checkProgram(libs, decls) {\n    const libenv = libs.reduce(({ genv, functionsUsed }, decl) => {\n        const newFunctions = checkDeclaration(true, genv, decl);\n        return {\n            genv: globalenv_1.addDecl(true, genv, decl),\n            functionsUsed: newFunctions.union(functionsUsed)\n        };\n    }, { genv: globalenv_1.initMain, functionsUsed: immutable_1.Set() });\n    const progenv = decls.reduce(({ genv, functionsUsed }, decl) => {\n        const newFunctions = checkDeclaration(false, genv, decl);\n        return {\n            genv: globalenv_1.addDecl(false, genv, decl),\n            functionsUsed: newFunctions.union(functionsUsed)\n        };\n    }, libenv);\n    progenv.functionsUsed.union(immutable_1.Set([\"main\"])).forEach((name) => {\n        const def = globalenv_1.getFunctionDeclaration(progenv.genv, name);\n        if (def === null)\n            return error_1.error(`No definition for ${name} (should be impossible, please report)`);\n        if (def.body === null && !globalenv_1.isLibraryFunction(progenv.genv, def.id.name))\n            return error_1.error(`function ${name} is never defined`);\n    });\n}\nexports.checkProgram = checkProgram;\n"
    },
    {
      "id": 13,
      "identifier": "/Users/robs/r/jaco/lib/program-rules.js",
      "name": "./lib/program-rules.js",
      "index": 11,
      "index2": 9,
      "size": 24128,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
      "issuerId": 18,
      "issuerName": "./src/parse.ts",
      "issuerPath": [
        {
          "id": 19,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "name": "./src/demo/demo.ts",
          "profile": {
            "factory": 64,
            "building": 1924
          }
        },
        {
          "id": 18,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
          "name": "./src/parse.ts",
          "profile": {
            "factory": 288,
            "building": 665,
            "dependencies": 114
          }
        }
      ],
      "profile": {
        "factory": 808,
        "building": 8,
        "dependencies": 637
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": 18,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
          "module": "./src/parse.ts",
          "moduleName": "./src/parse.ts",
          "type": "cjs require",
          "userRequest": "../lib/program-rules",
          "loc": "9:21-52"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [
        "ModuleConcatenation bailout: Module is not an ECMAScript module"
      ],
      "depth": 2,
      "source": "// Generated automatically by nearley, version 2.13.0\n// http://github.com/Hardmath123/nearley\n(function () {\nfunction id(x) { return x[0]; }\n\nconst lexer = require('./lex').lexer;\nconst util = require('./parser-util');\nvar grammar = {\n    Lexer: lexer,\n    ParserRules: [\n    {\"name\": \"Expression\", \"symbols\": [\"Exp0\"], \"postprocess\": id},\n    {\"name\": \"Identifier\", \"symbols\": [(lexer.has(\"identifier\") ? {type: \"identifier\"} : identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"TypeIdentifier\", \"symbols\": [(lexer.has(\"type_identifier\") ? {type: \"type_identifier\"} : type_identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"StructName\", \"symbols\": [(lexer.has(\"identifier\") ? {type: \"identifier\"} : identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"StructName\", \"symbols\": [(lexer.has(\"type_identifier\") ? {type: \"type_identifier\"} : type_identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"FieldName\", \"symbols\": [(lexer.has(\"identifier\") ? {type: \"identifier\"} : identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"FieldName\", \"symbols\": [(lexer.has(\"type_identifier\") ? {type: \"type_identifier\"} : type_identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"!\"}]},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"~\"}]},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"-\"}]},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"*\"}]},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"&\"}]},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"(\"}, \"_\", \"Tp\", \"_\", {\"literal\":\")\"}]},\n    {\"name\": \"BinopB\", \"symbols\": [{\"literal\":\"*\"}]},\n    {\"name\": \"BinopB\", \"symbols\": [{\"literal\":\"/\"}]},\n    {\"name\": \"BinopB\", \"symbols\": [{\"literal\":\"%\"}]},\n    {\"name\": \"BinopA\", \"symbols\": [{\"literal\":\"+\"}]},\n    {\"name\": \"BinopA\", \"symbols\": [{\"literal\":\"-\"}]},\n    {\"name\": \"Binop9\", \"symbols\": [{\"literal\":\"<\"}, {\"literal\":\"<\"}]},\n    {\"name\": \"Binop9\", \"symbols\": [{\"literal\":\">\"}, {\"literal\":\">\"}]},\n    {\"name\": \"Binop8\", \"symbols\": [{\"literal\":\"<\"}]},\n    {\"name\": \"Binop8\", \"symbols\": [{\"literal\":\"<\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop8\", \"symbols\": [{\"literal\":\">\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop8\", \"symbols\": [{\"literal\":\">\"}]},\n    {\"name\": \"Binop7\", \"symbols\": [{\"literal\":\"=\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop7\", \"symbols\": [{\"literal\":\"!\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop6\", \"symbols\": [{\"literal\":\"&\"}]},\n    {\"name\": \"Binop5\", \"symbols\": [{\"literal\":\"^\"}]},\n    {\"name\": \"Binop4\", \"symbols\": [{\"literal\":\"|\"}]},\n    {\"name\": \"Binop3\", \"symbols\": [{\"literal\":\"&&\"}]},\n    {\"name\": \"Binop2\", \"symbols\": [{\"literal\":\"|\"}, {\"literal\":\"|\"}]},\n    {\"name\": \"Binop1\", \"symbols\": [{\"literal\":\"?\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"+\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"-\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"*\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"/\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"%\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"&\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"^\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"|\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"<\"}, {\"literal\":\"<\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\">\"}, {\"literal\":\">\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": x => x[2]},\n    {\"name\": \"ExpD\", \"symbols\": [(lexer.has(\"numeric_literal\") ? {type: \"numeric_literal\"} : numeric_literal)], \"postprocess\": util.IntLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [\"StringLiteral\"], \"postprocess\": util.StringLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [\"CharLiteral\"], \"postprocess\": util.CharLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"true\"}], \"postprocess\": util.BoolLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"false\"}], \"postprocess\": util.BoolLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"NULL\"}], \"postprocess\": util.NullLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [\"Identifier\"], \"postprocess\": id},\n    {\"name\": \"ExpD\", \"symbols\": [\"Identifier\", \"_\", \"Funargs\"], \"postprocess\": util.CallExpression},\n    {\"name\": \"ExpD\", \"symbols\": [\"ExpD\", \"_\", {\"literal\":\".\"}, \"_\", \"FieldName\"], \"postprocess\": util.StructMemberExpression},\n    {\"name\": \"ExpD$subexpression$1\", \"symbols\": [{\"literal\":\"-\"}, {\"literal\":\">\"}]},\n    {\"name\": \"ExpD\", \"symbols\": [\"ExpD\", \"_\", \"ExpD$subexpression$1\", \"_\", \"FieldName\"], \"postprocess\": util.StructMemberExpression},\n    {\"name\": \"ExpD\", \"symbols\": [\"ExpD\", \"_\", {\"literal\":\"[\"}, \"_\", \"Expression\", \"_\", {\"literal\":\"]\"}], \"postprocess\": util.ArrayMemberExpression},\n    {\"name\": \"ExpD\", \"symbols\": [\"ExpD\", \"_\", {\"literal\":\"++\"}], \"postprocess\": util.UpdateExpression},\n    {\"name\": \"ExpD\", \"symbols\": [\"ExpD\", \"_\", {\"literal\":\"--\"}], \"postprocess\": util.UpdateExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"alloc\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Tp\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.AllocExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"alloc_array\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Tp\", \"_\", {\"literal\":\",\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.AllocArrayExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"assert\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.AssertExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"error\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.ErrorExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"\\\\\"}, {\"literal\":\"result\"}], \"postprocess\": util.ResultExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"\\\\\"}, {\"literal\":\"length\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.LengthExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"\\\\\"}, {\"literal\":\"hastag\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Tp\", \"_\", {\"literal\":\",\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.HasTagExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"(\"}, \"_\", {\"literal\":\"*\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}, \"_\", \"Funargs\"], \"postprocess\": util.IndirectCallExpression},\n    {\"name\": \"ExpC\", \"symbols\": [\"ExpD\"], \"postprocess\": id},\n    {\"name\": \"ExpC\", \"symbols\": [\"Unop\", \"_\", \"ExpC\"], \"postprocess\": util.UnaryExpression},\n    {\"name\": \"ExpB\", \"symbols\": [\"ExpC\"], \"postprocess\": id},\n    {\"name\": \"ExpB\", \"symbols\": [\"ExpB\", \"_\", \"BinopB\", \"_\", \"ExpC\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"ExpA\", \"symbols\": [\"ExpB\"], \"postprocess\": id},\n    {\"name\": \"ExpA\", \"symbols\": [\"ExpA\", \"_\", \"BinopA\", \"_\", \"ExpB\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp9\", \"symbols\": [\"ExpA\"], \"postprocess\": id},\n    {\"name\": \"Exp9\", \"symbols\": [\"Exp9\", \"_\", \"Binop9\", \"_\", \"ExpA\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp8\", \"symbols\": [\"Exp9\"], \"postprocess\": id},\n    {\"name\": \"Exp8\", \"symbols\": [\"Exp8\", \"_\", \"Binop8\", \"_\", \"Exp9\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp7\", \"symbols\": [\"Exp8\"], \"postprocess\": id},\n    {\"name\": \"Exp7\", \"symbols\": [\"Exp7\", \"_\", \"Binop7\", \"_\", \"Exp8\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp6\", \"symbols\": [\"Exp7\"], \"postprocess\": id},\n    {\"name\": \"Exp6\", \"symbols\": [\"Exp6\", \"_\", \"Binop6\", \"_\", \"Exp7\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp5\", \"symbols\": [\"Exp6\"], \"postprocess\": id},\n    {\"name\": \"Exp5\", \"symbols\": [\"Exp5\", \"_\", \"Binop5\", \"_\", \"Exp6\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp4\", \"symbols\": [\"Exp5\"], \"postprocess\": id},\n    {\"name\": \"Exp4\", \"symbols\": [\"Exp4\", \"_\", \"Binop4\", \"_\", \"Exp5\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp3\", \"symbols\": [\"Exp4\"], \"postprocess\": id},\n    {\"name\": \"Exp3\", \"symbols\": [\"Exp3\", \"_\", \"Binop3\", \"_\", \"Exp4\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp2\", \"symbols\": [\"Exp3\"], \"postprocess\": id},\n    {\"name\": \"Exp2\", \"symbols\": [\"Exp2\", \"_\", \"Binop2\", \"_\", \"Exp3\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp1\", \"symbols\": [\"Exp2\"], \"postprocess\": id},\n    {\"name\": \"Exp1\", \"symbols\": [\"Exp2\", \"_\", \"Binop1\", \"_\", \"Expression\", \"_\", {\"literal\":\":\"}, \"_\", \"Exp1\"], \"postprocess\": util.ConditionalExpression},\n    {\"name\": \"Exp0\", \"symbols\": [\"Exp1\"], \"postprocess\": id},\n    {\"name\": \"Exp0\", \"symbols\": [\"Exp1\", \"_\", \"Binop0\", \"_\", \"Exp0\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Funargs$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"Funargs$ebnf$1$subexpression$1$ebnf$1$subexpression$1\", \"symbols\": [\"_\", {\"literal\":\",\"}, \"_\", \"Expression\"]},\n    {\"name\": \"Funargs$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": [\"Funargs$ebnf$1$subexpression$1$ebnf$1\", \"Funargs$ebnf$1$subexpression$1$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"Funargs$ebnf$1$subexpression$1\", \"symbols\": [\"Expression\", \"Funargs$ebnf$1$subexpression$1$ebnf$1\", \"_\"]},\n    {\"name\": \"Funargs$ebnf$1\", \"symbols\": [\"Funargs$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"Funargs$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"Funargs\", \"symbols\": [{\"literal\":\"(\"}, \"_\", \"Funargs$ebnf$1\", {\"literal\":\")\"}]},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"int\"}], \"postprocess\": util.IntType},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"bool\"}], \"postprocess\": util.BoolType},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"string\"}], \"postprocess\": util.StringType},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"char\"}], \"postprocess\": util.CharType},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"void\"}], \"postprocess\": util.VoidType},\n    {\"name\": \"Tp\", \"symbols\": [\"Tp\", \"_\", {\"literal\":\"*\"}], \"postprocess\": util.PointerType},\n    {\"name\": \"Tp\", \"symbols\": [\"Tp\", \"_\", {\"literal\":\"[\"}, \"_\", {\"literal\":\"]\"}], \"postprocess\": util.ArrayType},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"struct\"}, \"_\", \"StructName\"], \"postprocess\": util.StructType},\n    {\"name\": \"Tp\", \"symbols\": [\"TypeIdentifier\"], \"postprocess\": id},\n    {\"name\": \"StringLiteral$ebnf$1\", \"symbols\": []},\n    {\"name\": \"StringLiteral$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"special_character\") ? {type: \"special_character\"} : special_character)]},\n    {\"name\": \"StringLiteral$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"characters\") ? {type: \"characters\"} : characters)]},\n    {\"name\": \"StringLiteral$ebnf$1\", \"symbols\": [\"StringLiteral$ebnf$1\", \"StringLiteral$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"StringLiteral\", \"symbols\": [(lexer.has(\"string_delimiter\") ? {type: \"string_delimiter\"} : string_delimiter), \"StringLiteral$ebnf$1\", (lexer.has(\"string_delimiter\") ? {type: \"string_delimiter\"} : string_delimiter)]},\n    {\"name\": \"CharLiteral$subexpression$1\", \"symbols\": [(lexer.has(\"special_character\") ? {type: \"special_character\"} : special_character)]},\n    {\"name\": \"CharLiteral$subexpression$1\", \"symbols\": [(lexer.has(\"character\") ? {type: \"character\"} : character)]},\n    {\"name\": \"CharLiteral\", \"symbols\": [(lexer.has(\"char_delimiter\") ? {type: \"char_delimiter\"} : char_delimiter), \"CharLiteral$subexpression$1\", (lexer.has(\"char_delimiter\") ? {type: \"char_delimiter\"} : char_delimiter)]},\n    {\"name\": \"_$ebnf$1\", \"symbols\": []},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"whitespace\") ? {type: \"whitespace\"} : whitespace)]},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"newline\") ? {type: \"newline\"} : newline)]},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"annospace\") ? {type: \"annospace\"} : annospace)]},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [\"LineComment\"]},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [\"MultiComment\"]},\n    {\"name\": \"_$ebnf$1\", \"symbols\": [\"_$ebnf$1\", \"_$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"_\", \"symbols\": [\"_$ebnf$1\"]},\n    {\"name\": \"LineComment$ebnf$1\", \"symbols\": []},\n    {\"name\": \"LineComment$ebnf$1\", \"symbols\": [\"LineComment$ebnf$1\", (lexer.has(\"comment\") ? {type: \"comment\"} : comment)], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"LineComment\", \"symbols\": [(lexer.has(\"comment_line_start\") ? {type: \"comment_line_start\"} : comment_line_start), \"LineComment$ebnf$1\", (lexer.has(\"comment_line_end\") ? {type: \"comment_line_end\"} : comment_line_end)]},\n    {\"name\": \"MultiComment$ebnf$1\", \"symbols\": []},\n    {\"name\": \"MultiComment$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"comment\") ? {type: \"comment\"} : comment)]},\n    {\"name\": \"MultiComment$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"newline\") ? {type: \"newline\"} : newline)]},\n    {\"name\": \"MultiComment$ebnf$1$subexpression$1\", \"symbols\": [\"MultiComment\"]},\n    {\"name\": \"MultiComment$ebnf$1\", \"symbols\": [\"MultiComment$ebnf$1\", \"MultiComment$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"MultiComment\", \"symbols\": [(lexer.has(\"comment_start\") ? {type: \"comment_start\"} : comment_start), \"MultiComment$ebnf$1\", (lexer.has(\"comment_end\") ? {type: \"comment_end\"} : comment_end)]},\n    {\"name\": \"Statement\", \"symbols\": [\"Annos_\", \"DanglingIf\"]},\n    {\"name\": \"Statement\", \"symbols\": [\"Annos_\", \"NoDanglingIf\"]},\n    {\"name\": \"NoDanglingIf\", \"symbols\": [\"Simple\", \"_\", {\"literal\":\";\"}], \"postprocess\": util.SimpleStatement},\n    {\"name\": \"NoDanglingIf\", \"symbols\": [{\"literal\":\"while\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}, \"_Annos\", \"_\", \"NoDanglingIf\"], \"postprocess\": util.WhileStatement},\n    {\"name\": \"NoDanglingIf$ebnf$1$subexpression$1\", \"symbols\": [\"_\", \"Simple\"]},\n    {\"name\": \"NoDanglingIf$ebnf$1\", \"symbols\": [\"NoDanglingIf$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"NoDanglingIf$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"NoDanglingIf$ebnf$2$subexpression$1\", \"symbols\": [\"_\", \"Expression\"]},\n    {\"name\": \"NoDanglingIf$ebnf$2\", \"symbols\": [\"NoDanglingIf$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"NoDanglingIf$ebnf$2\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"NoDanglingIf\", \"symbols\": [{\"literal\":\"for\"}, \"_\", {\"literal\":\"(\"}, \"NoDanglingIf$ebnf$1\", \"_\", {\"literal\":\";\"}, \"_\", \"Expression\", \"_\", {\"literal\":\";\"}, \"NoDanglingIf$ebnf$2\", \"_\", {\"literal\":\")\"}, \"_Annos\", \"_\", \"NoDanglingIf\"], \"postprocess\": util.ForStatement},\n    {\"name\": \"NoDanglingIf\", \"symbols\": [{\"literal\":\"if\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}, \"_Annos\", \"_\", \"NoDanglingIf\", \"_\", {\"literal\":\"else\"}, \"_Annos\", \"_\", \"NoDanglingIf\"], \"postprocess\": util.IfElseStatement},\n    {\"name\": \"NoDanglingIf$ebnf$3$subexpression$1\", \"symbols\": [\"_\", \"Expression\"]},\n    {\"name\": \"NoDanglingIf$ebnf$3\", \"symbols\": [\"NoDanglingIf$ebnf$3$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"NoDanglingIf$ebnf$3\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"NoDanglingIf\", \"symbols\": [{\"literal\":\"return\"}, \"NoDanglingIf$ebnf$3\", \"_\", {\"literal\":\";\"}], \"postprocess\": util.ReturnStatement},\n    {\"name\": \"NoDanglingIf\", \"symbols\": [\"StatementBlock\"], \"postprocess\": id},\n    {\"name\": \"NoDanglingIf\", \"symbols\": [{\"literal\":\"break\"}, \"_\", {\"literal\":\";\"}], \"postprocess\": util.BreakStatement},\n    {\"name\": \"NoDanglingIf\", \"symbols\": [{\"literal\":\"continue\"}, \"_\", {\"literal\":\";\"}], \"postprocess\": util.ContinueStatement},\n    {\"name\": \"DanglingIf\", \"symbols\": [{\"literal\":\"while\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}, \"_Annos\", \"_\", \"DanglingIf\"], \"postprocess\": util.WhileStatement},\n    {\"name\": \"DanglingIf$ebnf$1$subexpression$1\", \"symbols\": [\"_\", \"Simple\"]},\n    {\"name\": \"DanglingIf$ebnf$1\", \"symbols\": [\"DanglingIf$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"DanglingIf$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"DanglingIf$ebnf$2$subexpression$1\", \"symbols\": [\"_\", \"Expression\"]},\n    {\"name\": \"DanglingIf$ebnf$2\", \"symbols\": [\"DanglingIf$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"DanglingIf$ebnf$2\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"DanglingIf\", \"symbols\": [{\"literal\":\"for\"}, \"_\", {\"literal\":\"(\"}, \"DanglingIf$ebnf$1\", \"_\", {\"literal\":\";\"}, \"_\", \"Expression\", \"_\", {\"literal\":\";\"}, \"DanglingIf$ebnf$2\", \"_\", {\"literal\":\")\"}, \"_Annos\", \"_\", \"DanglingIf\"], \"postprocess\": util.ForStatement},\n    {\"name\": \"DanglingIf\", \"symbols\": [{\"literal\":\"if\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}, \"_\", \"Statement\"], \"postprocess\": util.IfStatement},\n    {\"name\": \"DanglingIf\", \"symbols\": [{\"literal\":\"if\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}, \"_Annos\", \"_\", \"NoDanglingIf\", \"_\", {\"literal\":\"else\"}, \"_Annos\", \"_\", \"DanglingIf\"], \"postprocess\": util.IfElseStatement},\n    {\"name\": \"Simple$ebnf$1$subexpression$1\", \"symbols\": [\"_\", {\"literal\":\"=\"}, \"_\", \"Expression\"]},\n    {\"name\": \"Simple$ebnf$1\", \"symbols\": [\"Simple$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"Simple$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"Simple\", \"symbols\": [\"Tp\", \"_\", \"Identifier\", \"Simple$ebnf$1\"]},\n    {\"name\": \"Simple\", \"symbols\": [\"Expression\"], \"postprocess\": id},\n    {\"name\": \"StatementBlock$ebnf$1\", \"symbols\": []},\n    {\"name\": \"StatementBlock$ebnf$1$subexpression$1\", \"symbols\": [\"_\", \"Statement\"]},\n    {\"name\": \"StatementBlock$ebnf$1\", \"symbols\": [\"StatementBlock$ebnf$1\", \"StatementBlock$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"StatementBlock$ebnf$2\", \"symbols\": []},\n    {\"name\": \"StatementBlock$ebnf$2$subexpression$1\", \"symbols\": [\"_\", \"Anno1\"]},\n    {\"name\": \"StatementBlock$ebnf$2\", \"symbols\": [\"StatementBlock$ebnf$2\", \"StatementBlock$ebnf$2$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"StatementBlock\", \"symbols\": [{\"literal\":\"{\"}, \"StatementBlock$ebnf$1\", \"StatementBlock$ebnf$2\", \"_\", {\"literal\":\"}\"}], \"postprocess\": util.BlockStatement},\n    {\"name\": \"Anno_$subexpression$1\", \"symbols\": [{\"literal\":\"loop_invariant\"}]},\n    {\"name\": \"Anno_$subexpression$1\", \"symbols\": [{\"literal\":\"assert\"}]},\n    {\"name\": \"Anno_$subexpression$1\", \"symbols\": [{\"literal\":\"requires\"}]},\n    {\"name\": \"Anno_$subexpression$1\", \"symbols\": [{\"literal\":\"ensures\"}]},\n    {\"name\": \"Anno_\", \"symbols\": [\"Anno_$subexpression$1\", \"_\", \"Expression\", \"_\", {\"literal\":\";\"}, \"_\"], \"postprocess\": x => ({ tag: x[0][0].value, test: x[2] })},\n    {\"name\": \"Anno1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"Anno1$ebnf$1\", \"symbols\": [\"Anno1$ebnf$1\", \"Anno_\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"Anno1\", \"symbols\": [(lexer.has(\"anno_start\") ? {type: \"anno_start\"} : anno_start), \"_\", \"Anno1$ebnf$1\", (lexer.has(\"anno_end\") ? {type: \"anno_end\"} : anno_end)], \"postprocess\": util.Anno1},\n    {\"name\": \"Anno1$ebnf$2\", \"symbols\": []},\n    {\"name\": \"Anno1$ebnf$2\", \"symbols\": [\"Anno1$ebnf$2\", \"Anno_\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"Anno1\", \"symbols\": [(lexer.has(\"anno_line_start\") ? {type: \"anno_line_start\"} : anno_line_start), \"_\", \"Anno1$ebnf$2\", (lexer.has(\"anno_end\") ? {type: \"anno_end\"} : anno_end)], \"postprocess\": util.Anno1},\n    {\"name\": \"Anno1$ebnf$3\", \"symbols\": []},\n    {\"name\": \"Anno1$ebnf$3\", \"symbols\": [\"Anno1$ebnf$3\", \"Anno_\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"Anno1$ebnf$4\", \"symbols\": []},\n    {\"name\": \"Anno1$ebnf$4\", \"symbols\": [\"Anno1$ebnf$4\", (lexer.has(\"comment\") ? {type: \"comment\"} : comment)], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"Anno1\", \"symbols\": [(lexer.has(\"anno_line_start\") ? {type: \"anno_line_start\"} : anno_line_start), \"_\", \"Anno1$ebnf$3\", (lexer.has(\"comment_line_start\") ? {type: \"comment_line_start\"} : comment_line_start), \"Anno1$ebnf$4\", (lexer.has(\"comment_line_end\") ? {type: \"comment_line_end\"} : comment_line_end)], \"postprocess\": util.Anno1},\n    {\"name\": \"Annos_$ebnf$1\", \"symbols\": []},\n    {\"name\": \"Annos_$ebnf$1$subexpression$1\", \"symbols\": [\"Anno1\", \"_\"]},\n    {\"name\": \"Annos_$ebnf$1\", \"symbols\": [\"Annos_$ebnf$1\", \"Annos_$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"Annos_\", \"symbols\": [\"Annos_$ebnf$1\"], \"postprocess\": x => x[0].reduce((xs, y) => xs.concat(y[0]), [])},\n    {\"name\": \"_Annos$ebnf$1\", \"symbols\": []},\n    {\"name\": \"_Annos$ebnf$1$subexpression$1\", \"symbols\": [\"_\", \"Anno1\"]},\n    {\"name\": \"_Annos$ebnf$1\", \"symbols\": [\"_Annos$ebnf$1\", \"_Annos$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"_Annos\", \"symbols\": [\"_Annos$ebnf$1\"], \"postprocess\": x => x[0].reduce((xs, y) => xs.concat(y[1]), [])},\n    {\"name\": \"Program$ebnf$1\", \"symbols\": []},\n    {\"name\": \"Program$ebnf$1\", \"symbols\": [\"Program$ebnf$1\", \"_GlobalDecl\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"Program\", \"symbols\": [\"Program$ebnf$1\", \"_\"], \"postprocess\": x => x[0]},\n    {\"name\": \"_GlobalDecl\", \"symbols\": [\"_\", \"GlobalDecl\"], \"postprocess\": x => x[1]},\n    {\"name\": \"GlobalDecl\", \"symbols\": [(lexer.has(\"pragma\") ? {type: \"pragma\"} : pragma)]},\n    {\"name\": \"GlobalDecl\", \"symbols\": [{\"literal\":\"struct\"}, \"_\", \"StructName\", \"_\", {\"literal\":\";\"}], \"postprocess\": util.StructDeclaration},\n    {\"name\": \"GlobalDecl$ebnf$1\", \"symbols\": []},\n    {\"name\": \"GlobalDecl$ebnf$1$subexpression$1\", \"symbols\": [\"Tp\", \"_\", \"FieldName\", \"_\", {\"literal\":\";\"}, \"_\"]},\n    {\"name\": \"GlobalDecl$ebnf$1\", \"symbols\": [\"GlobalDecl$ebnf$1\", \"GlobalDecl$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"GlobalDecl\", \"symbols\": [{\"literal\":\"struct\"}, \"_\", \"StructName\", \"_\", {\"literal\":\"{\"}, \"_\", \"GlobalDecl$ebnf$1\", {\"literal\":\"}\"}, \"_\", {\"literal\":\";\"}], \"postprocess\": util.StructDefinition},\n    {\"name\": \"GlobalDecl\", \"symbols\": [\"Tp\", \"_\", \"Identifier\", \"_\", \"FunDeclArgs\", \"_Annos\", \"_\", \"FunDeclEnd\"], \"postprocess\": util.FunctionDeclaration},\n    {\"name\": \"GlobalDecl\", \"symbols\": [{\"literal\":\"typedef\"}, \"_\", \"Tp\", \"_\", \"Identifier\"], \"postprocess\": util.TypeDefinition},\n    {\"name\": \"GlobalDecl\", \"symbols\": [{\"literal\":\"typedef\"}, \"_\", \"Tp\", \"_\", \"Identifier\", \"_\", \"FunDeclArgs\", \"_Annos\"], \"postprocess\": util.FunctionTypeDefinition},\n    {\"name\": \"FunDeclArgs$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"FunDeclArgs$ebnf$1$subexpression$1$ebnf$1$subexpression$1\", \"symbols\": [{\"literal\":\",\"}, \"_\", \"Tp\", \"_\", \"Identifier\", \"_\"]},\n    {\"name\": \"FunDeclArgs$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": [\"FunDeclArgs$ebnf$1$subexpression$1$ebnf$1\", \"FunDeclArgs$ebnf$1$subexpression$1$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"FunDeclArgs$ebnf$1$subexpression$1\", \"symbols\": [\"Tp\", \"_\", \"Identifier\", \"_\", \"FunDeclArgs$ebnf$1$subexpression$1$ebnf$1\"]},\n    {\"name\": \"FunDeclArgs$ebnf$1\", \"symbols\": [\"FunDeclArgs$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"FunDeclArgs$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"FunDeclArgs\", \"symbols\": [{\"literal\":\"(\"}, \"_\", \"FunDeclArgs$ebnf$1\", {\"literal\":\")\"}], \"postprocess\": util.FunctionDeclarationArgs},\n    {\"name\": \"FunDeclEnd\", \"symbols\": [{\"literal\":\";\"}], \"postprocess\": x => null},\n    {\"name\": \"FunDeclEnd\", \"symbols\": [\"StatementBlock\"], \"postprocess\": id}\n]\n  , ParserStart: \"Program\"\n}\nif (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {\n   module.exports = grammar;\n} else {\n   window.grammar = grammar;\n}\n})();\n"
    },
    {
      "id": 14,
      "identifier": "/Users/robs/r/jaco/lib/expression-rules.js",
      "name": "./lib/expression-rules.js",
      "index": 8,
      "index2": 8,
      "size": 13640,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
      "issuerId": 18,
      "issuerName": "./src/parse.ts",
      "issuerPath": [
        {
          "id": 19,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "name": "./src/demo/demo.ts",
          "profile": {
            "factory": 64,
            "building": 1924
          }
        },
        {
          "id": 18,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
          "name": "./src/parse.ts",
          "profile": {
            "factory": 288,
            "building": 665,
            "dependencies": 114
          }
        }
      ],
      "profile": {
        "factory": 808,
        "building": 8,
        "dependencies": 637
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": 18,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
          "module": "./src/parse.ts",
          "moduleName": "./src/parse.ts",
          "type": "cjs require",
          "userRequest": "../lib/expression-rules",
          "loc": "7:24-58"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [
        "ModuleConcatenation bailout: Module is not an ECMAScript module"
      ],
      "depth": 2,
      "source": "// Generated automatically by nearley, version 2.13.0\n// http://github.com/Hardmath123/nearley\n(function () {\nfunction id(x) { return x[0]; }\n\nconst lexer = require('./lex').lexer;\nconst util = require('./parser-util');\nvar grammar = {\n    Lexer: lexer,\n    ParserRules: [\n    {\"name\": \"Expression\", \"symbols\": [\"Exp0\"], \"postprocess\": id},\n    {\"name\": \"Identifier\", \"symbols\": [(lexer.has(\"identifier\") ? {type: \"identifier\"} : identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"TypeIdentifier\", \"symbols\": [(lexer.has(\"type_identifier\") ? {type: \"type_identifier\"} : type_identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"StructName\", \"symbols\": [(lexer.has(\"identifier\") ? {type: \"identifier\"} : identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"StructName\", \"symbols\": [(lexer.has(\"type_identifier\") ? {type: \"type_identifier\"} : type_identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"FieldName\", \"symbols\": [(lexer.has(\"identifier\") ? {type: \"identifier\"} : identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"FieldName\", \"symbols\": [(lexer.has(\"type_identifier\") ? {type: \"type_identifier\"} : type_identifier)], \"postprocess\": util.Identifier},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"!\"}]},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"~\"}]},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"-\"}]},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"*\"}]},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"&\"}]},\n    {\"name\": \"Unop\", \"symbols\": [{\"literal\":\"(\"}, \"_\", \"Tp\", \"_\", {\"literal\":\")\"}]},\n    {\"name\": \"BinopB\", \"symbols\": [{\"literal\":\"*\"}]},\n    {\"name\": \"BinopB\", \"symbols\": [{\"literal\":\"/\"}]},\n    {\"name\": \"BinopB\", \"symbols\": [{\"literal\":\"%\"}]},\n    {\"name\": \"BinopA\", \"symbols\": [{\"literal\":\"+\"}]},\n    {\"name\": \"BinopA\", \"symbols\": [{\"literal\":\"-\"}]},\n    {\"name\": \"Binop9\", \"symbols\": [{\"literal\":\"<\"}, {\"literal\":\"<\"}]},\n    {\"name\": \"Binop9\", \"symbols\": [{\"literal\":\">\"}, {\"literal\":\">\"}]},\n    {\"name\": \"Binop8\", \"symbols\": [{\"literal\":\"<\"}]},\n    {\"name\": \"Binop8\", \"symbols\": [{\"literal\":\"<\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop8\", \"symbols\": [{\"literal\":\">\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop8\", \"symbols\": [{\"literal\":\">\"}]},\n    {\"name\": \"Binop7\", \"symbols\": [{\"literal\":\"=\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop7\", \"symbols\": [{\"literal\":\"!\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop6\", \"symbols\": [{\"literal\":\"&\"}]},\n    {\"name\": \"Binop5\", \"symbols\": [{\"literal\":\"^\"}]},\n    {\"name\": \"Binop4\", \"symbols\": [{\"literal\":\"|\"}]},\n    {\"name\": \"Binop3\", \"symbols\": [{\"literal\":\"&&\"}]},\n    {\"name\": \"Binop2\", \"symbols\": [{\"literal\":\"|\"}, {\"literal\":\"|\"}]},\n    {\"name\": \"Binop1\", \"symbols\": [{\"literal\":\"?\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"+\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"-\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"*\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"/\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"%\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"&\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"^\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"|\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\"<\"}, {\"literal\":\"<\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"Binop0\", \"symbols\": [{\"literal\":\">\"}, {\"literal\":\">\"}, {\"literal\":\"=\"}]},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": x => x[2]},\n    {\"name\": \"ExpD\", \"symbols\": [(lexer.has(\"numeric_literal\") ? {type: \"numeric_literal\"} : numeric_literal)], \"postprocess\": util.IntLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [\"StringLiteral\"], \"postprocess\": util.StringLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [\"CharLiteral\"], \"postprocess\": util.CharLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"true\"}], \"postprocess\": util.BoolLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"false\"}], \"postprocess\": util.BoolLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"NULL\"}], \"postprocess\": util.NullLiteral},\n    {\"name\": \"ExpD\", \"symbols\": [\"Identifier\"], \"postprocess\": id},\n    {\"name\": \"ExpD\", \"symbols\": [\"Identifier\", \"_\", \"Funargs\"], \"postprocess\": util.CallExpression},\n    {\"name\": \"ExpD\", \"symbols\": [\"ExpD\", \"_\", {\"literal\":\".\"}, \"_\", \"FieldName\"], \"postprocess\": util.StructMemberExpression},\n    {\"name\": \"ExpD$subexpression$1\", \"symbols\": [{\"literal\":\"-\"}, {\"literal\":\">\"}]},\n    {\"name\": \"ExpD\", \"symbols\": [\"ExpD\", \"_\", \"ExpD$subexpression$1\", \"_\", \"FieldName\"], \"postprocess\": util.StructMemberExpression},\n    {\"name\": \"ExpD\", \"symbols\": [\"ExpD\", \"_\", {\"literal\":\"[\"}, \"_\", \"Expression\", \"_\", {\"literal\":\"]\"}], \"postprocess\": util.ArrayMemberExpression},\n    {\"name\": \"ExpD\", \"symbols\": [\"ExpD\", \"_\", {\"literal\":\"++\"}], \"postprocess\": util.UpdateExpression},\n    {\"name\": \"ExpD\", \"symbols\": [\"ExpD\", \"_\", {\"literal\":\"--\"}], \"postprocess\": util.UpdateExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"alloc\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Tp\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.AllocExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"alloc_array\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Tp\", \"_\", {\"literal\":\",\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.AllocArrayExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"assert\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.AssertExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"error\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.ErrorExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"\\\\\"}, {\"literal\":\"result\"}], \"postprocess\": util.ResultExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"\\\\\"}, {\"literal\":\"length\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.LengthExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"\\\\\"}, {\"literal\":\"hastag\"}, \"_\", {\"literal\":\"(\"}, \"_\", \"Tp\", \"_\", {\"literal\":\",\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}], \"postprocess\": util.HasTagExpression},\n    {\"name\": \"ExpD\", \"symbols\": [{\"literal\":\"(\"}, \"_\", {\"literal\":\"*\"}, \"_\", \"Expression\", \"_\", {\"literal\":\")\"}, \"_\", \"Funargs\"], \"postprocess\": util.IndirectCallExpression},\n    {\"name\": \"ExpC\", \"symbols\": [\"ExpD\"], \"postprocess\": id},\n    {\"name\": \"ExpC\", \"symbols\": [\"Unop\", \"_\", \"ExpC\"], \"postprocess\": util.UnaryExpression},\n    {\"name\": \"ExpB\", \"symbols\": [\"ExpC\"], \"postprocess\": id},\n    {\"name\": \"ExpB\", \"symbols\": [\"ExpB\", \"_\", \"BinopB\", \"_\", \"ExpC\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"ExpA\", \"symbols\": [\"ExpB\"], \"postprocess\": id},\n    {\"name\": \"ExpA\", \"symbols\": [\"ExpA\", \"_\", \"BinopA\", \"_\", \"ExpB\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp9\", \"symbols\": [\"ExpA\"], \"postprocess\": id},\n    {\"name\": \"Exp9\", \"symbols\": [\"Exp9\", \"_\", \"Binop9\", \"_\", \"ExpA\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp8\", \"symbols\": [\"Exp9\"], \"postprocess\": id},\n    {\"name\": \"Exp8\", \"symbols\": [\"Exp8\", \"_\", \"Binop8\", \"_\", \"Exp9\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp7\", \"symbols\": [\"Exp8\"], \"postprocess\": id},\n    {\"name\": \"Exp7\", \"symbols\": [\"Exp7\", \"_\", \"Binop7\", \"_\", \"Exp8\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp6\", \"symbols\": [\"Exp7\"], \"postprocess\": id},\n    {\"name\": \"Exp6\", \"symbols\": [\"Exp6\", \"_\", \"Binop6\", \"_\", \"Exp7\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp5\", \"symbols\": [\"Exp6\"], \"postprocess\": id},\n    {\"name\": \"Exp5\", \"symbols\": [\"Exp5\", \"_\", \"Binop5\", \"_\", \"Exp6\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp4\", \"symbols\": [\"Exp5\"], \"postprocess\": id},\n    {\"name\": \"Exp4\", \"symbols\": [\"Exp4\", \"_\", \"Binop4\", \"_\", \"Exp5\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp3\", \"symbols\": [\"Exp4\"], \"postprocess\": id},\n    {\"name\": \"Exp3\", \"symbols\": [\"Exp3\", \"_\", \"Binop3\", \"_\", \"Exp4\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp2\", \"symbols\": [\"Exp3\"], \"postprocess\": id},\n    {\"name\": \"Exp2\", \"symbols\": [\"Exp2\", \"_\", \"Binop2\", \"_\", \"Exp3\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Exp1\", \"symbols\": [\"Exp2\"], \"postprocess\": id},\n    {\"name\": \"Exp1\", \"symbols\": [\"Exp2\", \"_\", \"Binop1\", \"_\", \"Expression\", \"_\", {\"literal\":\":\"}, \"_\", \"Exp1\"], \"postprocess\": util.ConditionalExpression},\n    {\"name\": \"Exp0\", \"symbols\": [\"Exp1\"], \"postprocess\": id},\n    {\"name\": \"Exp0\", \"symbols\": [\"Exp1\", \"_\", \"Binop0\", \"_\", \"Exp0\"], \"postprocess\": util.BinaryExpression},\n    {\"name\": \"Funargs$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"Funargs$ebnf$1$subexpression$1$ebnf$1$subexpression$1\", \"symbols\": [\"_\", {\"literal\":\",\"}, \"_\", \"Expression\"]},\n    {\"name\": \"Funargs$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": [\"Funargs$ebnf$1$subexpression$1$ebnf$1\", \"Funargs$ebnf$1$subexpression$1$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"Funargs$ebnf$1$subexpression$1\", \"symbols\": [\"Expression\", \"Funargs$ebnf$1$subexpression$1$ebnf$1\", \"_\"]},\n    {\"name\": \"Funargs$ebnf$1\", \"symbols\": [\"Funargs$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"Funargs$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"Funargs\", \"symbols\": [{\"literal\":\"(\"}, \"_\", \"Funargs$ebnf$1\", {\"literal\":\")\"}]},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"int\"}], \"postprocess\": util.IntType},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"bool\"}], \"postprocess\": util.BoolType},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"string\"}], \"postprocess\": util.StringType},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"char\"}], \"postprocess\": util.CharType},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"void\"}], \"postprocess\": util.VoidType},\n    {\"name\": \"Tp\", \"symbols\": [\"Tp\", \"_\", {\"literal\":\"*\"}], \"postprocess\": util.PointerType},\n    {\"name\": \"Tp\", \"symbols\": [\"Tp\", \"_\", {\"literal\":\"[\"}, \"_\", {\"literal\":\"]\"}], \"postprocess\": util.ArrayType},\n    {\"name\": \"Tp\", \"symbols\": [{\"literal\":\"struct\"}, \"_\", \"StructName\"], \"postprocess\": util.StructType},\n    {\"name\": \"Tp\", \"symbols\": [\"TypeIdentifier\"], \"postprocess\": id},\n    {\"name\": \"StringLiteral$ebnf$1\", \"symbols\": []},\n    {\"name\": \"StringLiteral$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"special_character\") ? {type: \"special_character\"} : special_character)]},\n    {\"name\": \"StringLiteral$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"characters\") ? {type: \"characters\"} : characters)]},\n    {\"name\": \"StringLiteral$ebnf$1\", \"symbols\": [\"StringLiteral$ebnf$1\", \"StringLiteral$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"StringLiteral\", \"symbols\": [(lexer.has(\"string_delimiter\") ? {type: \"string_delimiter\"} : string_delimiter), \"StringLiteral$ebnf$1\", (lexer.has(\"string_delimiter\") ? {type: \"string_delimiter\"} : string_delimiter)]},\n    {\"name\": \"CharLiteral$subexpression$1\", \"symbols\": [(lexer.has(\"special_character\") ? {type: \"special_character\"} : special_character)]},\n    {\"name\": \"CharLiteral$subexpression$1\", \"symbols\": [(lexer.has(\"character\") ? {type: \"character\"} : character)]},\n    {\"name\": \"CharLiteral\", \"symbols\": [(lexer.has(\"char_delimiter\") ? {type: \"char_delimiter\"} : char_delimiter), \"CharLiteral$subexpression$1\", (lexer.has(\"char_delimiter\") ? {type: \"char_delimiter\"} : char_delimiter)]},\n    {\"name\": \"_$ebnf$1\", \"symbols\": []},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"whitespace\") ? {type: \"whitespace\"} : whitespace)]},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"newline\") ? {type: \"newline\"} : newline)]},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"annospace\") ? {type: \"annospace\"} : annospace)]},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [\"LineComment\"]},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [\"MultiComment\"]},\n    {\"name\": \"_$ebnf$1\", \"symbols\": [\"_$ebnf$1\", \"_$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"_\", \"symbols\": [\"_$ebnf$1\"]},\n    {\"name\": \"LineComment$ebnf$1\", \"symbols\": []},\n    {\"name\": \"LineComment$ebnf$1\", \"symbols\": [\"LineComment$ebnf$1\", (lexer.has(\"comment\") ? {type: \"comment\"} : comment)], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"LineComment\", \"symbols\": [(lexer.has(\"comment_line_start\") ? {type: \"comment_line_start\"} : comment_line_start), \"LineComment$ebnf$1\", (lexer.has(\"comment_line_end\") ? {type: \"comment_line_end\"} : comment_line_end)]},\n    {\"name\": \"MultiComment$ebnf$1\", \"symbols\": []},\n    {\"name\": \"MultiComment$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"comment\") ? {type: \"comment\"} : comment)]},\n    {\"name\": \"MultiComment$ebnf$1$subexpression$1\", \"symbols\": [(lexer.has(\"newline\") ? {type: \"newline\"} : newline)]},\n    {\"name\": \"MultiComment$ebnf$1$subexpression$1\", \"symbols\": [\"MultiComment\"]},\n    {\"name\": \"MultiComment$ebnf$1\", \"symbols\": [\"MultiComment$ebnf$1\", \"MultiComment$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"MultiComment\", \"symbols\": [(lexer.has(\"comment_start\") ? {type: \"comment_start\"} : comment_start), \"MultiComment$ebnf$1\", (lexer.has(\"comment_end\") ? {type: \"comment_end\"} : comment_end)]}\n]\n  , ParserStart: \"Expression\"\n}\nif (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {\n   module.exports = grammar;\n} else {\n   window.grammar = grammar;\n}\n})();\n"
    },
    {
      "id": 15,
      "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/restrictsyntax.ts",
      "name": "./src/restrictsyntax.ts",
      "index": 7,
      "index2": 5,
      "size": 26455,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
      "issuerId": 18,
      "issuerName": "./src/parse.ts",
      "issuerPath": [
        {
          "id": 19,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "name": "./src/demo/demo.ts",
          "profile": {
            "factory": 64,
            "building": 1924
          }
        },
        {
          "id": 18,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
          "name": "./src/parse.ts",
          "profile": {
            "factory": 288,
            "building": 665,
            "dependencies": 114
          }
        }
      ],
      "profile": {
        "factory": 808,
        "building": 8,
        "dependencies": 637
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": 18,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
          "module": "./src/parse.ts",
          "moduleName": "./src/parse.ts",
          "type": "cjs require",
          "userRequest": "./restrictsyntax",
          "loc": "6:25-52"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [
        "ModuleConcatenation bailout: Module is not an ECMAScript module"
      ],
      "depth": 2,
      "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst impossible_1 = require(\"@calculemus/impossible\");\nfunction restrictType(lang, syn) {\n    switch (syn.tag) {\n        case \"IntType\":\n            return syn;\n        case \"BoolType\":\n            if (lang === \"L1\")\n                throw new Error(`The type 'bool' is not a part of ${lang}`);\n            return syn;\n        case \"StringType\":\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\" || lang === \"L4\")\n                throw new Error(`The type 'string' is not a part of ${lang}`);\n            return syn;\n        case \"CharType\":\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\" || lang === \"L4\")\n                throw new Error(`The type 'char' is not a part of ${lang}`);\n        case \"VoidType\":\n            if (lang === \"L1\" || lang === \"L2\")\n                throw new Error(`The type 'void' is not a part of ${lang}`);\n            return syn;\n        case \"PointerType\":\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`Pointer types are not a part of ${lang}`);\n            const argument = restrictType(lang, syn.argument);\n            if ((lang === \"L4\" || lang === \"C0\") && argument.tag === \"VoidType\")\n                throw new Error(`The type 'void*' is not a part of ${lang}`);\n            return {\n                tag: \"PointerType\",\n                argument: argument\n            };\n        case \"ArrayType\":\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`Array types are not a part of ${lang}`);\n            return {\n                tag: \"ArrayType\",\n                argument: restrictType(lang, syn.argument)\n            };\n        case \"StructType\":\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`Struct types are not a part of ${lang}`);\n            return syn;\n        case \"Identifier\":\n            if (lang === \"L1\" || lang === \"L2\")\n                throw new Error(`Defined types are not a part of ${lang}`);\n            return syn;\n        default:\n            return impossible_1.impossible(syn);\n    }\n}\nexports.restrictType = restrictType;\nfunction restrictValueType(lang, syn) {\n    const type = restrictType(lang, syn);\n    if (type.tag === \"VoidType\") {\n        throw new Error(`Type 'void' can only be used as the return type of a function.`);\n    }\n    return type;\n}\nexports.restrictValueType = restrictValueType;\nfunction restrictExpression(lang, syn) {\n    switch (syn.tag) {\n        case \"StringLiteral\": {\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\" || lang === \"L4\")\n                throw new Error(`String and char literals are not a part of ${lang}`);\n            syn.raw.map(x => {\n                if (x.length === 2 && x[0] === \"\\\\\") {\n                    if (!x.match(/\\\\[ntvbrfa\\\\'\"]/))\n                        throw new Error(`Invalid escape '${x}' in string`);\n                }\n                else if (!x.match(/\\\\[ntvbrfa\\\\'\"]+/)) {\n                    if (!x.match(/[ !#-~]+/))\n                        throw new Error(`Invalid character in string '${x}'`);\n                }\n            });\n            return {\n                tag: \"StringLiteral\",\n                value: syn.raw.join(\"\"),\n                raw: `\"${syn.raw.join(\"\")}\"`\n            };\n        }\n        case \"CharLiteral\": {\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\" || lang === \"L4\")\n                throw new Error(`String and char literals are not a part of ${lang}`);\n            if (syn.raw.length === 1) {\n                if (!syn.raw.match(/[ !#-~]/))\n                    throw new Error(`Invalid character '${syn.raw}'`);\n            }\n            else {\n                if (!syn.raw.match(/\\\\[ntvbrfa\\\\'\"0]/))\n                    throw new Error(`Invalid escape character '${syn.raw}'`);\n            }\n            return {\n                tag: \"CharLiteral\",\n                value: syn.raw,\n                raw: `'${syn.raw}'`\n            };\n        }\n        case \"BoolLiteral\":\n            if (lang === \"L1\")\n                throw new Error(`Boolean literals 'true' and 'false' are not part of ${lang}`);\n            return { tag: \"BoolLiteral\", value: syn.value };\n        case \"NullLiteral\":\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`'NULL' is not a part of ${lang}`);\n            return { tag: \"NullLiteral\" };\n        case \"Identifier\":\n            return syn;\n        case \"IntLiteral\":\n            if (syn.raw === \"0\") {\n                return { tag: \"IntLiteral\", raw: \"0\", value: 0 };\n            }\n            else if (syn.raw.startsWith(\"0\") || syn.raw.startsWith(\"0\")) {\n                const match = syn.raw.match(/^0[xX](0*)([0-9a-fA-F]+)$/);\n                if (match === null) {\n                    if (syn.raw[1].toLowerCase() !== \"x\")\n                        throw new Error(`Bad numeric constant: ${syn.raw}\\nIdentifiers beginning with '0' must be hex constants starting as '0X' or '0x'`);\n                    throw new Error(`Invalid hex constant: ${syn.raw}\\nHex constants must only have the characters '0123456789abcdefABCDEF'`);\n                }\n                const hex = match[2];\n                if (hex.length > 8)\n                    throw new Error(`Hex constant too large: ${syn.raw}`);\n                const value = parseInt(hex, 16);\n                return {\n                    tag: \"IntLiteral\",\n                    raw: syn.raw,\n                    value: value < 0x80000000 ? value : value - 0x100000000\n                };\n            }\n            else {\n                const match = syn.raw.match(/^[0-9]+$/);\n                if (match === null)\n                    throw new Error(`Invalid integer constant: ${syn.raw}`);\n                if (syn.raw.length > 10)\n                    throw new Error(`Decimal constant too large: ${syn.raw}`);\n                const dec = parseInt(syn.raw, 10);\n                if (dec > 2147483648)\n                    throw new Error(`Decimal constant too large: ${syn.raw}`);\n                return {\n                    tag: \"IntLiteral\",\n                    raw: syn.raw,\n                    value: dec < 2147483648 ? dec : -2147483648\n                };\n            }\n        case \"ArrayMemberExpression\": {\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`Array access is not a part of ${lang}`);\n            return {\n                tag: \"ArrayMemberExpression\",\n                object: restrictExpression(lang, syn.object),\n                index: restrictExpression(lang, syn.index)\n            };\n        }\n        case \"StructMemberExpression\": {\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`Struct access is not a part of ${lang}`);\n            return {\n                tag: \"StructMemberExpression\",\n                deref: syn.deref,\n                object: restrictExpression(lang, syn.object),\n                field: syn.field\n            };\n        }\n        case \"CallExpression\": {\n            if (lang === \"L1\" || lang === \"L2\")\n                throw new Error(`Functions are not a part of ${lang}`);\n            return {\n                tag: \"CallExpression\",\n                callee: syn.callee,\n                arguments: syn.arguments.map(x => restrictExpression(lang, x))\n            };\n        }\n        case \"IndirectCallExpression\": {\n            if (lang !== \"C1\")\n                throw new Error(`Calls from function pointers not a part of ${lang}`);\n            return {\n                tag: \"IndirectCallExpression\",\n                callee: restrictExpression(lang, syn.callee),\n                arguments: syn.arguments.map(x => restrictExpression(lang, x))\n            };\n        }\n        case \"CastExpression\": {\n            if (lang !== \"C1\")\n                throw new Error(`Casts not a part of ${lang}`);\n            return {\n                tag: \"CastExpression\",\n                kind: restrictValueType(lang, syn.kind),\n                argument: restrictExpression(lang, syn.argument)\n            };\n        }\n        case \"UnaryExpression\": {\n            if (syn.operator === \"&\" && lang !== \"C1\")\n                throw new Error(`Address-of not a part of ${lang}`);\n            if (syn.operator === \"!\" && lang === \"L1\")\n                throw new Error(`Boolean negation not a part of ${lang}`);\n            if (syn.operator === \"*\" && (lang === \"L1\" || lang === \"L2\" || lang === \"L3\"))\n                throw new Error(`Pointer dereference not a part of ${lang}`);\n            return {\n                tag: \"UnaryExpression\",\n                operator: syn.operator,\n                argument: restrictExpression(lang, syn.argument)\n            };\n        }\n        case \"BinaryExpression\": {\n            if (lang === \"L1\") {\n                switch (syn.operator) {\n                    case \"*\":\n                    case \"/\":\n                    case \"%\":\n                    case \"+\":\n                    case \"-\":\n                        break;\n                    default:\n                        throw new Error(`Operator ${syn.operator} not a part of ${lang}`);\n                }\n            }\n            return {\n                tag: \"BinaryExpression\",\n                operator: syn.operator,\n                left: restrictExpression(lang, syn.left),\n                right: restrictExpression(lang, syn.right)\n            };\n        }\n        case \"LogicalExpression\": {\n            if (lang === \"L1\")\n                throw new Error(`Logical operators not a part of ${lang}`);\n            return {\n                tag: \"LogicalExpression\",\n                operator: syn.operator,\n                left: restrictExpression(lang, syn.left),\n                right: restrictExpression(lang, syn.right)\n            };\n        }\n        case \"ConditionalExpression\": {\n            if (lang === \"L1\")\n                throw new Error(`Conditional expression is not a part of ${lang}`);\n            return {\n                tag: \"ConditionalExpression\",\n                test: restrictExpression(lang, syn.test),\n                consequent: restrictExpression(lang, syn.consequent),\n                alternate: restrictExpression(lang, syn.alternate)\n            };\n        }\n        case \"AllocExpression\": {\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`Allocation not a part of ${lang}`);\n            return {\n                tag: \"AllocExpression\",\n                kind: restrictValueType(lang, syn.kind)\n            };\n        }\n        case \"AllocArrayExpression\": {\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`Allocation not a part of ${lang}`);\n            return {\n                tag: \"AllocArrayExpression\",\n                kind: restrictValueType(lang, syn.kind),\n                size: restrictExpression(lang, syn.size)\n            };\n        }\n        case \"ResultExpression\": {\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\" || lang === \"L4\")\n                throw new Error(`Contracts not a part of ${lang}`);\n            return {\n                tag: \"ResultExpression\"\n            };\n        }\n        case \"LengthExpression\": {\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\" || lang === \"L4\")\n                throw new Error(`Contracts not a part of ${lang}`);\n            return {\n                tag: \"LengthExpression\",\n                argument: restrictExpression(lang, syn.argument)\n            };\n        }\n        case \"HasTagExpression\": {\n            if (lang !== \"C1\")\n                throw new Error(`Tag contracts not a part of ${lang}`);\n            return {\n                tag: \"HasTagExpression\",\n                kind: restrictValueType(lang, syn.kind),\n                argument: restrictExpression(lang, syn.argument)\n            };\n        }\n        case \"AssignmentExpression\":\n            throw new Error(`Assignments 'x ${syn.operator} e2' must be used as statements, and not inside of expressions.`);\n        case \"UpdateExpression\":\n            throw new Error(`Increment/decrement operations 'e${syn.operator}' must be used as statements, and not inside of expressions.`);\n        case \"AssertExpression\":\n            throw new Error(`The 'assert()' function must be used as a statement, and not inside of expressions.`);\n        case \"ErrorExpression\":\n            throw new Error(`The 'error()' function must be used as a statement, and not inside of expressions.`);\n        default:\n            return impossible_1.impossible(syn);\n    }\n}\nexports.restrictExpression = restrictExpression;\nfunction restrictLValue(lang, syn) {\n    switch (syn.tag) {\n        case \"Identifier\":\n            return syn;\n        case \"StructMemberExpression\": {\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`Struct access not a part of ${lang}`);\n            return {\n                tag: \"StructMemberExpression\",\n                deref: syn.deref,\n                object: restrictLValue(lang, syn.object),\n                field: syn.field\n            };\n        }\n        case \"UnaryExpression\": {\n            if (syn.operator !== \"*\")\n                throw new Error(`Not an LValue`);\n            if (lang == \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`Pointer dereference not a part of ${lang}`);\n            return {\n                tag: \"UnaryExpression\",\n                operator: \"*\",\n                argument: restrictLValue(lang, syn.argument)\n            };\n        }\n        case \"ArrayMemberExpression\": {\n            if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\")\n                throw new Error(`Array access not a part of ${lang}`);\n            return {\n                tag: \"ArrayMemberExpression\",\n                object: restrictLValue(lang, syn.object),\n                index: restrictExpression(lang, syn.index)\n            };\n        }\n        case \"IntLiteral\":\n        case \"StringLiteral\":\n        case \"CharLiteral\":\n        case \"BoolLiteral\":\n        case \"NullLiteral\":\n        case \"CallExpression\":\n        case \"IndirectCallExpression\":\n        case \"CastExpression\":\n        case \"BinaryExpression\":\n        case \"LogicalExpression\":\n        case \"ConditionalExpression\":\n        case \"AllocExpression\":\n        case \"AllocArrayExpression\":\n        case \"ResultExpression\":\n        case \"LengthExpression\":\n        case \"HasTagExpression\":\n        case \"UpdateExpression\":\n        case \"AssignmentExpression\":\n        case \"AssertExpression\":\n        case \"ErrorExpression\":\n            throw new Error(`Not a valid LValue ${JSON.stringify(syn)}`);\n        default:\n            return impossible_1.impossible(syn);\n    }\n}\nexports.restrictLValue = restrictLValue;\nfunction restrictStatement(lang, syn) {\n    switch (syn.tag) {\n        case \"AnnoStatement\": {\n            if (syn.anno.tag !== \"assert\")\n                throw new Error(`Only assert annotations are allowed here, ${syn.anno.tag} is not permitted.`);\n            return {\n                tag: \"AssertStatement\",\n                contract: true,\n                test: restrictExpression(lang, syn.anno.test)\n            };\n        }\n        case \"ExpressionStatement\": {\n            switch (syn.expression.tag) {\n                case \"AssignmentExpression\": {\n                    if (lang === \"L1\") {\n                        switch (syn.expression.operator) {\n                            case \"=\":\n                            case \"*=\":\n                            case \"/=\":\n                            case \"%=\":\n                            case \"+=\":\n                            case \"-=\":\n                                break;\n                            default:\n                                throw new Error(`Assignment operator ${syn.expression.operator} not a part of ${lang}`);\n                        }\n                    }\n                    return {\n                        tag: \"AssignmentStatement\",\n                        operator: syn.expression.operator,\n                        left: restrictLValue(lang, syn.expression.left),\n                        right: restrictExpression(lang, syn.expression.right)\n                    };\n                }\n                case \"UpdateExpression\": {\n                    if (lang === \"L1\")\n                        throw new Error(`Postfix update 'x${syn.expression.operator}' not a part of ${lang}`);\n                    return {\n                        tag: \"UpdateStatement\",\n                        operator: syn.expression.operator,\n                        argument: restrictLValue(lang, syn.expression.argument)\n                    };\n                }\n                case \"AssertExpression\": {\n                    if (lang === \"L1\" || lang === \"L2\") {\n                        throw new Error(`Assertions not a part of ${lang}`);\n                    }\n                    return {\n                        tag: \"AssertStatement\",\n                        contract: false,\n                        test: restrictExpression(lang, syn.expression.test)\n                    };\n                }\n                case \"ErrorExpression\": {\n                    if (lang === \"L1\" || lang === \"L2\" || lang === \"L3\" || lang === \"L4\") {\n                        throw new Error(`The 'error()' function is not a part of ${lang}`);\n                    }\n                    return {\n                        tag: \"ErrorStatement\",\n                        argument: restrictExpression(lang, syn.expression.argument)\n                    };\n                }\n                default: {\n                    return {\n                        tag: \"ExpressionStatement\",\n                        expression: restrictExpression(lang, syn.expression)\n                    };\n                }\n            }\n        }\n        case \"VariableDeclaration\": {\n            return {\n                tag: \"VariableDeclaration\",\n                kind: restrictValueType(lang, syn.kind),\n                id: syn.id,\n                init: syn.init ? restrictExpression(lang, syn.init) : null\n            };\n        }\n        case \"IfStatement\": {\n            if (lang === \"L1\")\n                throw new Error(`Conditionals not a part of ${lang}`);\n            if (!syn.alternate) {\n                return {\n                    tag: \"IfStatement\",\n                    test: restrictExpression(lang, syn.test),\n                    consequent: restrictAssert(lang, syn.consequent)\n                };\n            }\n            else {\n                return {\n                    tag: \"IfStatement\",\n                    test: restrictExpression(lang, syn.test),\n                    consequent: restrictAssert(lang, syn.consequent),\n                    alternate: restrictAssert(lang, syn.alternate)\n                };\n            }\n        }\n        case \"WhileStatement\": {\n            if (lang === \"L1\")\n                throw new Error(`Loops not a part of ${lang}`);\n            return {\n                tag: \"WhileStatement\",\n                invariants: restrictLoopInvariants(lang, syn.annos),\n                test: restrictExpression(lang, syn.test),\n                body: restrictStatement(lang, syn.body)\n            };\n        }\n        case \"ForStatement\": {\n            if (lang === \"L1\")\n                throw new Error(`Loops not a part of ${lang}`);\n            let init;\n            let update;\n            if (syn.init === null) {\n                init = null;\n            }\n            else {\n                const candidate = restrictStatement(lang, syn.init);\n                switch (candidate.tag) {\n                    case \"AssignmentStatement\":\n                    case \"UpdateStatement\":\n                    case \"ExpressionStatement\":\n                    case \"VariableDeclaration\":\n                        init = candidate;\n                        break;\n                    default:\n                        throw new Error(`A ${candidate.tag} is not allowed as the first argument of a for statement`);\n                }\n            }\n            if (syn.update === null) {\n                update = null;\n            }\n            else {\n                const candidate = restrictStatement(lang, {\n                    tag: \"ExpressionStatement\",\n                    expression: syn.update\n                });\n                switch (candidate.tag) {\n                    case \"AssignmentStatement\":\n                    case \"UpdateStatement\":\n                    case \"ExpressionStatement\":\n                        update = candidate;\n                        break;\n                    default:\n                        throw new Error(`A ${candidate.tag} is not allowed as the third argument of a for statement`);\n                }\n            }\n            return {\n                tag: \"ForStatement\",\n                invariants: restrictLoopInvariants(lang, syn.annos),\n                init: init,\n                test: restrictExpression(lang, syn.test),\n                update: update,\n                body: restrictStatement(lang, syn.body)\n            };\n        }\n        case \"ReturnStatement\": {\n            return {\n                tag: \"ReturnStatement\",\n                argument: syn.argument ? restrictExpression(lang, syn.argument) : null\n            };\n        }\n        case \"BlockStatement\": {\n            return {\n                tag: \"BlockStatement\",\n                body: syn.body.map(x => restrictStatement(lang, x))\n            };\n        }\n        case \"BreakStatement\":\n        case \"ContinueStatement\": {\n            if (lang !== \"C1\")\n                throw new Error(`Control with 'break' and 'continue' not a part of ${lang}`);\n            return syn;\n        }\n        default:\n            return impossible_1.impossible(syn);\n    }\n}\nexports.restrictStatement = restrictStatement;\nfunction restrictAssert(lang, [annos, stm]) {\n    if (annos.length === 0)\n        return restrictStatement(lang, stm);\n    const asserts = annos.map((x) => {\n        if (x.tag !== \"assert\")\n            throw new Error(`The only annotations allowed with if-statements are assertions, ${x.tag} is not permitted`);\n        return {\n            tag: \"AssertStatement\",\n            contract: true,\n            test: restrictExpression(lang, x.test)\n        };\n    });\n    return {\n        tag: \"BlockStatement\",\n        body: asserts.concat([restrictStatement(lang, stm)])\n    };\n}\nfunction restrictLoopInvariants(lang, annos) {\n    return annos.map(x => {\n        if (x.tag !== \"loop_invariant\")\n            throw new Error(`The only annotations allowed are loop invariants, ${x.tag} is not permitted`);\n        return restrictExpression(lang, x.test);\n    });\n}\nfunction restrictFunctionAnnos(lang, annos) {\n    const preconditions = [];\n    const postconditions = [];\n    annos.map(x => {\n        if (x.tag === \"requires\") {\n            preconditions.push(restrictExpression(lang, x.test));\n        }\n        else if (x.tag === \"ensures\") {\n            postconditions.push(restrictExpression(lang, x.test));\n        }\n        else {\n            throw new Error(`The only annotations allowed are requires and ensures, ${x.tag} is not permitted`);\n        }\n    });\n    return { pre: preconditions, post: postconditions };\n}\nfunction restrictParams(lang, params) {\n    return params.map(param => ({\n        tag: param.tag,\n        kind: restrictValueType(lang, param.kind),\n        id: param.id\n    }));\n}\nexports.restrictParams = restrictParams;\nfunction restrictDeclaration(lang, decl) {\n    if (typeof decl === \"string\")\n        return decl;\n    switch (decl.tag) {\n        case \"FunctionDeclaration\": {\n            if (lang == \"L1\" || lang == \"L2\") {\n                if (decl.body === null)\n                    throw new Error(`function declarations are not a part of ${lang}`);\n                if (decl.id.name !== \"main\")\n                    throw new Error(`only function 'main' can be defined in ${lang}`);\n            }\n            const annos = restrictFunctionAnnos(lang, decl.annos);\n            return {\n                tag: \"FunctionDeclaration\",\n                returns: restrictType(lang, decl.returns),\n                id: decl.id,\n                params: restrictParams(lang, decl.params),\n                preconditions: annos.pre,\n                postconditions: annos.post,\n                body: decl.body === null\n                    ? null\n                    : {\n                        tag: \"BlockStatement\",\n                        body: decl.body.body.map(x => restrictStatement(lang, x))\n                    }\n            };\n        }\n        case \"FunctionTypeDefinition\": {\n            if (lang != \"C1\")\n                throw new Error(`function types are not a part of ${lang}`);\n            const annos = restrictFunctionAnnos(lang, decl.definition.annos);\n            return {\n                tag: \"FunctionTypeDefinition\",\n                definition: {\n                    tag: \"FunctionDeclaration\",\n                    returns: restrictType(lang, decl.definition.returns),\n                    id: decl.definition.id,\n                    params: restrictParams(lang, decl.definition.params),\n                    preconditions: annos.pre,\n                    postconditions: annos.post,\n                    body: null\n                }\n            };\n        }\n        case \"StructDeclaration\": {\n            if (lang == \"L1\" || lang == \"L2\" || lang == \"L3\")\n                throw new Error(`structs are not a part of ${lang}`);\n            return {\n                tag: \"StructDeclaration\",\n                id: decl.id,\n                definitions: decl.definitions === null ? null : restrictParams(lang, decl.definitions)\n            };\n        }\n        case \"TypeDefinition\": {\n            if (lang == \"L1\" || lang == \"L2\")\n                throw new Error(`typedefs are not a part of ${lang}`);\n            return {\n                tag: \"TypeDefinition\",\n                definition: {\n                    tag: \"VariableDeclaration\",\n                    id: decl.definition.id,\n                    kind: restrictValueType(lang, decl.definition.kind)\n                }\n            };\n        }\n        default:\n            return impossible_1.impossible(decl);\n    }\n}\nexports.restrictDeclaration = restrictDeclaration;\n"
    },
    {
      "id": 16,
      "identifier": "/Users/robs/r/jaco/node_modules/nearley/lib/nearley.js",
      "name": "./node_modules/nearley/lib/nearley.js",
      "index": 6,
      "index2": 4,
      "size": 13103,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
      "issuerId": 18,
      "issuerName": "./src/parse.ts",
      "issuerPath": [
        {
          "id": 19,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "name": "./src/demo/demo.ts",
          "profile": {
            "factory": 64,
            "building": 1924
          }
        },
        {
          "id": 18,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
          "name": "./src/parse.ts",
          "profile": {
            "factory": 288,
            "building": 665,
            "dependencies": 114
          }
        }
      ],
      "profile": {
        "factory": 808,
        "building": 8,
        "dependencies": 637
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": 18,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
          "module": "./src/parse.ts",
          "moduleName": "./src/parse.ts",
          "type": "cjs require",
          "userRequest": "nearley",
          "loc": "5:18-36"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [
        "ModuleConcatenation bailout: Module is not an ECMAScript module"
      ],
      "depth": 2,
      "source": "(function(root, factory) {\n    if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        root.nearley = factory();\n    }\n}(this, function() {\n\n    function Rule(name, symbols, postprocess) {\n        this.id = ++Rule.highestId;\n        this.name = name;\n        this.symbols = symbols;        // a list of literal | regex class | nonterminal\n        this.postprocess = postprocess;\n        return this;\n    }\n    Rule.highestId = 0;\n\n    Rule.prototype.toString = function(withCursorAt) {\n        function stringifySymbolSequence (e) {\n            return e.literal ? JSON.stringify(e.literal) :\n                   e.type ? '%' + e.type : e.toString();\n        }\n        var symbolSequence = (typeof withCursorAt === \"undefined\")\n                             ? this.symbols.map(stringifySymbolSequence).join(' ')\n                             : (   this.symbols.slice(0, withCursorAt).map(stringifySymbolSequence).join(' ')\n                                 + \" ● \"\n                                 + this.symbols.slice(withCursorAt).map(stringifySymbolSequence).join(' ')     );\n        return this.name + \" → \" + symbolSequence;\n    }\n\n\n    // a State is a rule at a position from a given starting point in the input stream (reference)\n    function State(rule, dot, reference, wantedBy) {\n        this.rule = rule;\n        this.dot = dot;\n        this.reference = reference;\n        this.data = [];\n        this.wantedBy = wantedBy;\n        this.isComplete = this.dot === rule.symbols.length;\n    }\n\n    State.prototype.toString = function() {\n        return \"{\" + this.rule.toString(this.dot) + \"}, from: \" + (this.reference || 0);\n    };\n\n    State.prototype.nextState = function(child) {\n        var state = new State(this.rule, this.dot + 1, this.reference, this.wantedBy);\n        state.left = this;\n        state.right = child;\n        if (state.isComplete) {\n            state.data = state.build();\n        }\n        return state;\n    };\n\n    State.prototype.build = function() {\n        var children = [];\n        var node = this;\n        do {\n            children.push(node.right.data);\n            node = node.left;\n        } while (node.left);\n        children.reverse();\n        return children;\n    };\n\n    State.prototype.finish = function() {\n        if (this.rule.postprocess) {\n            this.data = this.rule.postprocess(this.data, this.reference, Parser.fail);\n        }\n    };\n\n\n    function Column(grammar, index) {\n        this.grammar = grammar;\n        this.index = index;\n        this.states = [];\n        this.wants = {}; // states indexed by the non-terminal they expect\n        this.scannable = []; // list of states that expect a token\n        this.completed = {}; // states that are nullable\n    }\n\n\n    Column.prototype.process = function(nextColumn) {\n        var states = this.states;\n        var wants = this.wants;\n        var completed = this.completed;\n\n        for (var w = 0; w < states.length; w++) { // nb. we push() during iteration\n            var state = states[w];\n\n            if (state.isComplete) {\n                state.finish();\n                if (state.data !== Parser.fail) {\n                    // complete\n                    var wantedBy = state.wantedBy;\n                    for (var i = wantedBy.length; i--; ) { // this line is hot\n                        var left = wantedBy[i];\n                        this.complete(left, state);\n                    }\n\n                    // special-case nullables\n                    if (state.reference === this.index) {\n                        // make sure future predictors of this rule get completed.\n                        var exp = state.rule.name;\n                        (this.completed[exp] = this.completed[exp] || []).push(state);\n                    }\n                }\n\n            } else {\n                // queue scannable states\n                var exp = state.rule.symbols[state.dot];\n                if (typeof exp !== 'string') {\n                    this.scannable.push(state);\n                    continue;\n                }\n\n                // predict\n                if (wants[exp]) {\n                    wants[exp].push(state);\n\n                    if (completed.hasOwnProperty(exp)) {\n                        var nulls = completed[exp];\n                        for (var i = 0; i < nulls.length; i++) {\n                            var right = nulls[i];\n                            this.complete(state, right);\n                        }\n                    }\n                } else {\n                    wants[exp] = [state];\n                    this.predict(exp);\n                }\n            }\n        }\n    }\n\n    Column.prototype.predict = function(exp) {\n        var rules = this.grammar.byName[exp] || [];\n\n        for (var i = 0; i < rules.length; i++) {\n            var r = rules[i];\n            var wantedBy = this.wants[exp];\n            var s = new State(r, 0, this.index, wantedBy);\n            this.states.push(s);\n        }\n    }\n\n    Column.prototype.complete = function(left, right) {\n        var copy = left.nextState(right);\n        this.states.push(copy);\n    }\n\n\n    function Grammar(rules, start) {\n        this.rules = rules;\n        this.start = start || this.rules[0].name;\n        var byName = this.byName = {};\n        this.rules.forEach(function(rule) {\n            if (!byName.hasOwnProperty(rule.name)) {\n                byName[rule.name] = [];\n            }\n            byName[rule.name].push(rule);\n        });\n    }\n\n    // So we can allow passing (rules, start) directly to Parser for backwards compatibility\n    Grammar.fromCompiled = function(rules, start) {\n        var lexer = rules.Lexer;\n        if (rules.ParserStart) {\n          start = rules.ParserStart;\n          rules = rules.ParserRules;\n        }\n        var rules = rules.map(function (r) { return (new Rule(r.name, r.symbols, r.postprocess)); });\n        var g = new Grammar(rules, start);\n        g.lexer = lexer; // nb. storing lexer on Grammar is iffy, but unavoidable\n        return g;\n    }\n\n\n    function StreamLexer() {\n      this.reset(\"\");\n    }\n\n    StreamLexer.prototype.reset = function(data, state) {\n        this.buffer = data;\n        this.index = 0;\n        this.line = state ? state.line : 1;\n        this.lastLineBreak = state ? -state.col : 0;\n    }\n\n    StreamLexer.prototype.next = function() {\n        if (this.index < this.buffer.length) {\n            var ch = this.buffer[this.index++];\n            if (ch === '\\n') {\n              this.line += 1;\n              this.lastLineBreak = this.index;\n            }\n            return {value: ch};\n        }\n    }\n\n    StreamLexer.prototype.save = function() {\n      return {\n        line: this.line,\n        col: this.index - this.lastLineBreak,\n      }\n    }\n\n    StreamLexer.prototype.formatError = function(token, message) {\n        // nb. this gets called after consuming the offending token,\n        // so the culprit is index-1\n        var buffer = this.buffer;\n        if (typeof buffer === 'string') {\n            var nextLineBreak = buffer.indexOf('\\n', this.index);\n            if (nextLineBreak === -1) nextLineBreak = buffer.length;\n            var line = buffer.substring(this.lastLineBreak, nextLineBreak)\n            var col = this.index - this.lastLineBreak;\n            message += \" at line \" + this.line + \" col \" + col + \":\\n\\n\";\n            message += \"  \" + line + \"\\n\"\n            message += \"  \" + Array(col).join(\" \") + \"^\"\n            return message;\n        } else {\n            return message + \" at index \" + (this.index - 1);\n        }\n    }\n\n\n    function Parser(rules, start, options) {\n        if (rules instanceof Grammar) {\n            var grammar = rules;\n            var options = start;\n        } else {\n            var grammar = Grammar.fromCompiled(rules, start);\n        }\n        this.grammar = grammar;\n\n        // Read options\n        this.options = {\n            keepHistory: false,\n            lexer: grammar.lexer || new StreamLexer,\n        };\n        for (var key in (options || {})) {\n            this.options[key] = options[key];\n        }\n\n        // Setup lexer\n        this.lexer = this.options.lexer;\n        this.lexerState = undefined;\n\n        // Setup a table\n        var column = new Column(grammar, 0);\n        var table = this.table = [column];\n\n        // I could be expecting anything.\n        column.wants[grammar.start] = [];\n        column.predict(grammar.start);\n        // TODO what if start rule is nullable?\n        column.process();\n        this.current = 0; // token index\n    }\n\n    // create a reserved token for indicating a parse fail\n    Parser.fail = {};\n\n    Parser.prototype.feed = function(chunk) {\n        var lexer = this.lexer;\n        lexer.reset(chunk, this.lexerState);\n\n        var token;\n        while (token = lexer.next()) {\n            // We add new states to table[current+1]\n            var column = this.table[this.current];\n\n            // GC unused states\n            if (!this.options.keepHistory) {\n                delete this.table[this.current - 1];\n            }\n\n            var n = this.current + 1;\n            var nextColumn = new Column(this.grammar, n);\n            this.table.push(nextColumn);\n\n            // Advance all tokens that expect the symbol\n            var literal = token.value;\n            var value = lexer.constructor === StreamLexer ? token.value : token;\n            var scannable = column.scannable;\n            for (var w = scannable.length; w--; ) {\n                var state = scannable[w];\n                var expect = state.rule.symbols[state.dot];\n                // Try to consume the token\n                // either regex or literal\n                if (expect.test ? expect.test(value) :\n                    expect.type ? expect.type === token.type\n                                : expect.literal === literal) {\n                    // Add it\n                    var next = state.nextState({data: value, token: token, isToken: true, reference: n - 1});\n                    nextColumn.states.push(next);\n                }\n            }\n\n            // Next, for each of the rules, we either\n            // (a) complete it, and try to see if the reference row expected that\n            //     rule\n            // (b) predict the next nonterminal it expects by adding that\n            //     nonterminal's start state\n            // To prevent duplication, we also keep track of rules we have already\n            // added\n\n            nextColumn.process();\n\n            // If needed, throw an error:\n            if (nextColumn.states.length === 0) {\n                // No states at all! This is not good.\n                var message = this.lexer.formatError(token, \"invalid syntax\") + \"\\n\";\n                message += \"Unexpected \" + (token.type ? token.type + \" token: \" : \"\");\n                message += JSON.stringify(token.value !== undefined ? token.value : token) + \"\\n\";\n                var err = new Error(message);\n                err.offset = this.current;\n                err.token = token;\n                throw err;\n            }\n\n            // maybe save lexer state\n            if (this.options.keepHistory) {\n              column.lexerState = lexer.save()\n            }\n\n            this.current++;\n        }\n        if (column) {\n          this.lexerState = lexer.save()\n        }\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n\n        // Allow chaining, for whatever it's worth\n        return this;\n    };\n\n    Parser.prototype.save = function() {\n        var column = this.table[this.current];\n        column.lexerState = this.lexerState;\n        return column;\n    };\n\n    Parser.prototype.restore = function(column) {\n        var index = column.index;\n        this.current = index;\n        this.table[index] = column;\n        this.table.splice(index + 1);\n        this.lexerState = column.lexerState;\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n    };\n\n    // nb. deprecated: use save/restore instead!\n    Parser.prototype.rewind = function(index) {\n        if (!this.options.keepHistory) {\n            throw new Error('set option `keepHistory` to enable rewinding')\n        }\n        // nb. recall column (table) indicies fall between token indicies.\n        //        col 0   --   token 0   --   col 1\n        this.restore(this.table[index]);\n    };\n\n    Parser.prototype.finish = function() {\n        // Return the possible parsings\n        var considerations = [];\n        var start = this.grammar.start;\n        var column = this.table[this.table.length - 1]\n        column.states.forEach(function (t) {\n            if (t.rule.name === start\n                    && t.dot === t.rule.symbols.length\n                    && t.reference === 0\n                    && t.data !== Parser.fail) {\n                considerations.push(t);\n            }\n        });\n        return considerations.map(function(c) {return c.data; });\n    };\n\n    return {\n        Parser: Parser,\n        Grammar: Grammar,\n        Rule: Rule,\n    };\n\n}));\n"
    },
    {
      "id": 17,
      "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/lex.ts",
      "name": "./src/lex.ts",
      "index": 3,
      "index2": 3,
      "size": 7479,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
      "issuerId": 18,
      "issuerName": "./src/parse.ts",
      "issuerPath": [
        {
          "id": 19,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "name": "./src/demo/demo.ts",
          "profile": {
            "factory": 64,
            "building": 1924
          }
        },
        {
          "id": 18,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
          "name": "./src/parse.ts",
          "profile": {
            "factory": 288,
            "building": 665,
            "dependencies": 114
          }
        }
      ],
      "profile": {
        "factory": 808,
        "building": 8,
        "dependencies": 637
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": 18,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
          "module": "./src/parse.ts",
          "moduleName": "./src/parse.ts",
          "type": "cjs require",
          "userRequest": "./lex",
          "loc": "4:14-30"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [
        "ModuleConcatenation bailout: Module is not an ECMAScript module"
      ],
      "depth": 2,
      "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst moo_1 = require(\"moo\");\nconst immutable_1 = require(\"immutable\");\nconst impossible_1 = require(\"../node_modules/@calculemus/impossible\");\n/**\n * Ambitious Goal: \"invalid syntax\" errors from the lexer are unclear. Can we take errors out of the lexer to\n * the point we can clearly enumerate all files that will _not_ be accepted by the lexer? This would also\n * facilitate.\n *\n * Desired spec:\n * All UTF-8 strings should lex, unless they:\n *  1. Contain non-printable characters.\n *  2. Contain the character ` outside of a string/char/comment.\n *  3. Contain characters outside of the UTF-8 range.\n */\nconst basicLexing = {\n    identifier: {\n        match: /[A-Za-z_][A-Za-z0-9_]*/,\n        keywords: {\n            keyword: [\n                \"int\",\n                \"bool\",\n                \"string\",\n                \"char\",\n                \"void\",\n                \"struct\",\n                \"typedef\",\n                \"if\",\n                \"else\",\n                \"while\",\n                \"for\",\n                \"continue\",\n                \"break\",\n                \"return\",\n                \"assert\",\n                \"error\",\n                \"true\",\n                \"false\",\n                \"NULL\",\n                \"alloc\",\n                \"alloc_array\"\n            ]\n        }\n    },\n    numeric_literal: { match: /(?:0[0-9a-zA-Z_]+)|(?:[1-9][A-Za-z0-9_]*)|0/ },\n    char_delimiter: { match: /'/, push: \"charComponents\" },\n    string_delimiter: { match: /\\\"/, push: \"stringComponents\" },\n    logical_and: \"&&\",\n    decrement: \"--\",\n    increment: \"++\",\n    symbol: /[!$%&\\(\\)*+,\\-.\\/:;<=>?\\[\\\\\\]^{\\|}~]/,\n    unexpected_unicode_character: { match: /[\\x00-\\u{10FFFF}]/, lineBreaks: true },\n    invalid_character: { match: /./, lineBreaks: true },\n    type_identifier: \"<placeholder>\",\n    space: \"<placeholder>\"\n};\nfunction createLexer() {\n    return moo_1.states({\n        main: Object.assign({\n            newline: { match: /\\r?\\n/, lineBreaks: true },\n            whitespace: { match: /[ \\t\\v\\f\\r]+/ },\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            comment_line_start: { match: \"//\", push: \"lineComment\" },\n            pragma: /#.*/\n        }, basicLexing),\n        stringComponents: {\n            string_delimiter: { match: /\"/, pop: 1 },\n            characters: { match: /[^\\\\\\n\\r\"]+/, lineBreaks: false },\n            special_character: { match: /\\\\[^\\n\\r]/, lineBreaks: false },\n            invalid_string_character: { match: /[\\x00-xFF]/, lineBreaks: true }\n        },\n        charComponents: {\n            char_delimiter: { match: /'/, pop: 1 },\n            special_character: { match: /\\\\./, lineBreaks: true },\n            character: { match: /./, lineBreaks: false },\n            invalid_string_character: { match: /[\\x00-xFF]/, lineBreaks: true, pop: 1 }\n        },\n        multiLineComment: {\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            comment_end: { match: \"*/\", pop: 1 },\n            comment: { match: /\\*|\\/|[^*\\/\\n]+/, lineBreaks: false },\n            newline: { match: /\\r?\\n/, lineBreaks: true }\n        },\n        lineComment: {\n            comment: { match: /[^\\n]/, lineBreaks: false },\n            comment_line_end: { match: /\\r?\\n/, lineBreaks: true, pop: 1 }\n        }\n    }, \"main\");\n}\nexports.createLexer = createLexer;\nfunction createAnnoLexer() {\n    return moo_1.states({\n        main: Object.assign({\n            newline: { match: /\\r?\\n/, lineBreaks: true },\n            whitespace: { match: /[ \\t\\v\\f\\r]+/ },\n            anno_start: { match: \"/*@\", push: \"multiLineAnno\" },\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            anno_line_start: { match: \"//@\", push: \"lineAnno\" },\n            comment_line_start: { match: \"//\", push: \"lineComment\" },\n            pragma: /#.*/\n        }, basicLexing),\n        multiLineAnno: Object.assign({\n            newline: { match: /\\r?\\n/, lineBreaks: true },\n            whitespace: { match: /[ \\t\\v\\f\\r]+/ },\n            anno_end: { match: \"@*/\", pop: 1 },\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            comment_line_start: { match: \"//\", push: \"lineComment\" },\n            annospace: { match: \"@\" }\n        }, basicLexing),\n        lineAnno: Object.assign({\n            anno_end: { match: /\\r?\\n/, pop: 1, lineBreaks: true },\n            whitespace: { match: /[ \\t\\v\\f]+/ },\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            comment_line_start: { match: \"//\", next: \"lineComment\" },\n            annospace: { match: \"@\" }\n        }, basicLexing),\n        stringComponents: {\n            string_delimiter: { match: /\"/, pop: 1 },\n            characters: { match: /[^\\\\\\n\\r\"]+/, lineBreaks: false },\n            special_character: { match: /\\\\[^\\n\\r]/, lineBreaks: false },\n            invalid_string_character: { match: /[\\x00-xFF]/, lineBreaks: true }\n        },\n        charComponents: {\n            char_delimiter: { match: /'/, pop: 1 },\n            special_character: { match: /\\\\./, lineBreaks: true },\n            character: { match: /./, lineBreaks: false },\n            invalid_string_character: { match: /[\\x00-xFF]/, lineBreaks: true, pop: 1 }\n        },\n        multiLineComment: {\n            comment_start: { match: \"/*\", push: \"multiLineComment\" },\n            comment_end: { match: \"*/\", pop: 1 },\n            comment: { match: /\\*|\\/|[^*\\/\\n]+/, lineBreaks: false },\n            newline: { match: /\\r?\\n/, lineBreaks: true }\n        },\n        lineComment: {\n            comment: { match: /[^\\n]/, lineBreaks: false },\n            comment_line_end: { match: /\\r?\\n/, lineBreaks: true, pop: 1 }\n        }\n    }, \"main\");\n}\nexports.createAnnoLexer = createAnnoLexer;\nclass TypeLexer {\n    constructor(lang, typeIds, parsePragma) {\n        this.typeIds = typeIds;\n        switch (lang) {\n            case \"L1\":\n            case \"L2\":\n            case \"L3\":\n            case \"L4\": {\n                this.coreLexer = createLexer();\n                break;\n            }\n            case \"C0\":\n            case \"C1\": {\n                this.coreLexer = createAnnoLexer();\n                break;\n            }\n            default: {\n                this.coreLexer = impossible_1.impossible(lang);\n            }\n        }\n        this.parsePragma = parsePragma || (() => immutable_1.Set());\n    }\n    addIdentifier(typeIdentifier) {\n        this.typeIds = this.typeIds.add(typeIdentifier);\n    }\n    next() {\n        const tok = this.coreLexer.next();\n        if (!tok)\n            return undefined;\n        else if (tok[\"type\"] === \"pragma\") {\n            this.typeIds = this.typeIds.union(this.parsePragma(tok.text));\n            return tok;\n        }\n        else if (tok[\"type\"] === \"identifier\" && this.typeIds.has(tok.value)) {\n            tok[\"type\"] = \"type_identifier\";\n            return tok;\n        }\n        else if (tok[\"type\"] === \"identifier\") {\n            return tok;\n        }\n        else {\n            return tok;\n        }\n    }\n    save() {\n        return this.coreLexer.save();\n    }\n    reset(chunk, state) {\n        this.coreLexer.reset(chunk, state);\n    }\n    formatError(token, message) {\n        return this.coreLexer.formatError(token, message);\n    }\n    has(tokenType) {\n        return this.coreLexer.has(tokenType);\n    }\n}\nexports.TypeLexer = TypeLexer;\nexports.lexer = new TypeLexer(\"C1\", immutable_1.Set());\n"
    },
    {
      "id": 18,
      "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/parse.ts",
      "name": "./src/parse.ts",
      "index": 1,
      "index2": 10,
      "size": 5024,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "issuer": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
      "issuerId": 19,
      "issuerName": "./src/demo/demo.ts",
      "issuerPath": [
        {
          "id": 19,
          "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "name": "./src/demo/demo.ts",
          "profile": {
            "factory": 64,
            "building": 1924
          }
        }
      ],
      "profile": {
        "factory": 288,
        "building": 665,
        "dependencies": 114
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": 19,
          "moduleIdentifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
          "module": "./src/demo/demo.ts",
          "moduleName": "./src/demo/demo.ts",
          "type": "cjs require",
          "userRequest": "../parse",
          "loc": "3:16-35"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [
        "ModuleConcatenation bailout: Module is not an ECMAScript module"
      ],
      "depth": 1,
      "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst immutable_1 = require(\"immutable\");\nconst lex_1 = require(\"./lex\");\nconst nearley_1 = require(\"nearley\");\nconst restrictsyntax_1 = require(\"./restrictsyntax\");\nconst expressionRules = require(\"../lib/expression-rules\");\n//const statementRules = require(\"../lib/statement-rules\");\nconst programRules = require(\"../lib/program-rules\");\nfunction parseExpression(str, options) {\n    const opt = options ? options : {};\n    const parser = new nearley_1.Parser(nearley_1.Grammar.fromCompiled(expressionRules));\n    parser.lexer = new lex_1.TypeLexer(opt.lang || \"C1\", opt.types || immutable_1.Set());\n    parser.feed(str);\n    const parsed = parser.finish();\n    if (parsed.length > 1) {\n        throw new Error(\"Ambiguous parse!\");\n    }\n    else if (parsed.length === 0) {\n        throw new Error(\"Incomplete parse\");\n    }\n    else {\n        return restrictsyntax_1.restrictExpression(opt.lang || \"C1\", parsed[0]);\n    }\n}\nexports.parseExpression = parseExpression;\n/*\nexport function parseStatement(str: string, options?: { types?: Set<string>; lang: Lang }) {\n    programRules.lexer = new TypeLexer(options && options.types ? options.types : Set<string>());\n    const parser = new Parser(Grammar.fromCompiled(programRules));\n    parser.feed(str);\n    return restrictStatement;\n}\n*/\nfunction* semicolonSplit(s) {\n    let ndx = s.indexOf(\";\");\n    while (ndx > 0) {\n        yield { last: false, segment: s.slice(0, ndx) };\n        s = s.slice(ndx + 1);\n        ndx = s.indexOf(\";\");\n    }\n    yield { last: true, segment: s };\n}\nfunction parseProgramRaw(lang, str, typedefs) {\n    const parser = new nearley_1.Parser(nearley_1.Grammar.fromCompiled(programRules));\n    const lexer = (parser.lexer = new lex_1.TypeLexer(lang, typedefs || immutable_1.Set()));\n    const segments = semicolonSplit(str);\n    let decls = immutable_1.List();\n    let size = 0;\n    for (let segment of segments) {\n        parser.feed(segment.segment);\n        const parsed = parser.finish();\n        if (parsed.length > 1) {\n            console.log(\"Parse ambiguous\");\n            console.log(JSON.stringify(parsed[0]));\n            console.log(JSON.stringify(parsed[1]));\n            console.log(JSON.stringify(parsed[2]));\n            console.log(JSON.stringify(parsed[3]));\n            console.log(JSON.stringify(parsed[4]));\n            console.log(JSON.stringify(parsed[5]));\n            console.log(JSON.stringify(parsed[parsed.length - 1]));\n            throw new Error(`Internal error, parse ambiguous (${parsed.length} parses) (this should not happen)`);\n        }\n        else if (parsed.length === 0) {\n            if (segment.last) {\n                throw new Error(\"Incomplete parse at the end of the file\");\n            }\n            else {\n                parser.feed(\";\");\n            }\n        }\n        else {\n            // parsed.length === 1\n            const parsedGlobalDecls = parsed[0];\n            for (let i = size; i < parsedGlobalDecls.length - 1; i++) {\n                if (parsedGlobalDecls[i].tag === \"TypeDefinition\" || parsedGlobalDecls[i].tag === \"FunctionTypeDefinition\")\n                    throw new Error(`typedef is missing its trailing semicolon`);\n            }\n            if (segment.last) {\n                if (parsedGlobalDecls.length > size) {\n                    const possibleTypeDef = parsedGlobalDecls[parsedGlobalDecls.length - 1];\n                    if (possibleTypeDef.tag === \"TypeDefinition\" || possibleTypeDef.tag === \"FunctionTypeDefinition\")\n                        throw new Error(`typedef without a final semicolon at the end of the file`);\n                }\n                decls = decls.concat(parsedGlobalDecls);\n            }\n            else {\n                if (parsedGlobalDecls.length === 0)\n                    throw new Error(`semicolon at beginning of file`);\n                const possibleTypedef = parsedGlobalDecls[parsedGlobalDecls.length - 1];\n                if (parsedGlobalDecls.length === size)\n                    throw new Error(`too many semicolons after a ${possibleTypedef.tag}`);\n                size = parsedGlobalDecls.length;\n                switch (possibleTypedef.tag) {\n                    case \"TypeDefinition\":\n                    case \"FunctionTypeDefinition\": {\n                        lexer.addIdentifier(possibleTypedef.definition.id.name);\n                        break;\n                    }\n                    default:\n                        throw new Error(`unnecessary semicolon at the top level after ${possibleTypedef.tag}`);\n                }\n                parser.feed(\" \");\n            }\n        }\n    }\n    // code quality: Rewrite to make this impossible; return in loop\n    return decls;\n}\nexports.parseProgramRaw = parseProgramRaw;\nfunction parseProgram(lang, str, typedefs) {\n    return parseProgramRaw(lang, str, typedefs).map(decl => {\n        return restrictsyntax_1.restrictDeclaration(lang, decl);\n    });\n}\nexports.parseProgram = parseProgram;\n"
    },
    {
      "id": 19,
      "identifier": "/Users/robs/r/jaco/node_modules/ts-loader/index.js!/Users/robs/r/jaco/src/demo/demo.ts",
      "name": "./src/demo/demo.ts",
      "index": 0,
      "index2": 19,
      "size": 984,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "issuer": null,
      "issuerId": null,
      "issuerName": null,
      "issuerPath": null,
      "profile": {
        "factory": 64,
        "building": 1924
      },
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "assets": [],
      "reasons": [
        {
          "moduleId": null,
          "moduleIdentifier": null,
          "module": null,
          "moduleName": null,
          "type": "single entry",
          "userRequest": "/Users/robs/r/jaco/src/demo/demo.ts",
          "loc": "main"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [
        "ModuleConcatenation bailout: Module is not an ECMAScript module"
      ],
      "depth": 0,
      "source": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst parse_1 = require(\"../parse\");\nconst programs_1 = require(\"../typecheck/programs\");\nconst CodeMirror = require(\"codemirror\");\nconst immutable_1 = require(\"../../node_modules/immutable\");\nconst inputDoc = CodeMirror(document.getElementById(\"input\"), {\n    value: \"int main() {\\n  return 17;\\n}\",\n    lineNumbers: true\n});\nconst output = document.getElementById(\"output\");\nfunction draw(prog) {\n    try {\n        const program = parse_1.parseProgram(\"C1\", prog);\n        try {\n            programs_1.checkProgram(immutable_1.List(), program);\n            output.innerText = JSON.stringify(program, null, 2);\n        }\n        catch (e) {\n            output.innerText = e.message + \"\\n\\n====\\n\\n\" + JSON.stringify(program, null, 2);\n        }\n    }\n    catch (e) {\n        output.innerText = e.message;\n    }\n}\ninputDoc.on(\"update\", (x) => {\n    draw(inputDoc.getValue());\n});\ndraw(inputDoc.getValue());\n"
    }
  ],
  "filteredModules": 0,
  "children": []
}
